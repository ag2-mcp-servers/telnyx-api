# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:25:05+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union
from uuid import UUID

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    conint,
    constr,
)


class ActivationStatus(Enum):
    New = 'New'
    Pending = 'Pending'
    Conflict = 'Conflict'
    Cancel_Pending = 'Cancel Pending'
    Failed = 'Failed'
    Concurred = 'Concurred'
    Activate_RDY = 'Activate RDY'
    Disconnect_Pending = 'Disconnect Pending'
    Concurrence_Sent = 'Concurrence Sent'
    Old = 'Old'
    Sending = 'Sending'
    Active = 'Active'
    Canceled = 'Canceled'


class AnchorsiteOverride(Enum):
    Latency = 'Latency'
    Chicago__IL = 'Chicago, IL'
    Ashburn__VA = 'Ashburn, VA'
    San_Jose__CA = 'San Jose, CA'
    Sydney__Australia = 'Sydney, Australia'
    Amsterdam__Netherlands = 'Amsterdam, Netherlands'
    London__UK = 'London, UK'
    Toronto__Canada = 'Toronto, Canada'
    Vancouver__Canada = 'Vancouver, Canada'
    Frankfurt__Germany = 'Frankfurt, Germany'


class WebhookUrlMethod(Enum):
    POST = 'POST'
    GET = 'GET'


class AnswerRequest(BaseModel):
    billing_group_id: Optional[UUID] = Field(
        None,
        description='Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.',
        examples=['f5586561-8ff0-4291-a0ac-84fe544797bd'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    webhook_url: Optional[str] = Field(
        None,
        description='Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.',
        examples=['https://www.example.com/server-b/'],
    )
    webhook_url_method: Optional[WebhookUrlMethod] = Field(
        'POST',
        description='HTTP request type used for `webhook_url`.',
        examples=['GET'],
    )


class ApplicationName(RootModel[str]):
    root: str = Field(
        ...,
        description='A user-assigned name to help manage the application.',
        examples=['call-router'],
        title='Application Name',
    )


class Audio(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The media object ID returned when the media is successfully uploaded to the media endpoint.',
        examples=['your-media-id'],
    )
    link: Optional[str] = Field(
        None,
        description='The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.',
        examples=['http://www.example.com/file'],
    )


class IdpCertFingerprintAlgorithm(Enum):
    sha1 = 'sha1'
    sha256 = 'sha256'
    sha384 = 'sha384'
    sha512 = 'sha512'


class Settings(BaseModel):
    assertion_consumer_service_url: Optional[str] = Field(
        None,
        description='The Assertion Consumer Service URL for the service provider (Telnyx).',
        examples=['https://api.telnyx.com/sso/saml/auth/myorg'],
    )
    idp_cert_fingerprint: Optional[str] = Field(
        None,
        description='The certificate fingerprint for the identity provider (IdP)',
        examples=['13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7'],
    )
    idp_cert_fingerprint_algorithm: Optional[IdpCertFingerprintAlgorithm] = Field(
        'sha1',
        description="The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
        examples=['sha256'],
    )
    idp_entity_id: Optional[str] = Field(
        None,
        description='The Entity ID for the identity provider (IdP).',
        examples=['https://myorg.myidp.com/saml/metadata'],
    )
    idp_sso_target_url: Optional[str] = Field(
        None,
        description='The SSO target url for the identity provider (IdP).',
        examples=['https://myorg.myidp.com/trust/saml2/http-post/sso'],
    )
    name_identifier_format: Optional[str] = Field(
        None,
        description='The name identifier format associated with the authentication provider. This must be the same for both the Identity Provider (IdP) and the service provider (Telnyx).',
        examples=['urn:oasis:names:tc:SAML:1.1:nameid-format'],
    )
    service_provider_entity_id: Optional[str] = Field(
        None,
        description='The Entity ID for the service provider (Telnyx).',
        examples=['https://api.telnyx.com/sso/saml/metadata/myorg'],
    )


class RecordType(Enum):
    available_phone_number = 'available_phone_number'


class RecordType1(Enum):
    available_phone_number_block = 'available_phone_number_block'


class AvailablePhoneNumbersMetadata(BaseModel):
    best_effort_results: Optional[int] = Field(None, examples=[0])
    total_results: Optional[int] = Field(None, examples=[1])


class RecordType2(Enum):
    billing_group = 'billing_group'


class BillingGroup(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    deleted_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was removed.',
        examples=[None],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['f5586561-8ff0-4291-a0ac-84fe544797bd'],
    )
    name: Optional[str] = Field(
        None,
        description='A user-specified name for the billing group',
        examples=['My billing group name'],
    )
    organization_id: Optional[UUID] = Field(
        None,
        description='Identifies the organization that owns the resource.',
        examples=['f1486bae-f067-460c-ad43-73a92848f902'],
    )
    record_type: Optional[RecordType2] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['billing_group'],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class BridgeRequest(BaseModel):
    call_control_id: str = Field(
        ...,
        description='The Call Control ID of the call you want to bridge with.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    park_after_unbridge: Optional[str] = Field(
        None,
        description='Specifies behavior after the bridge ends (i.e. the opposite leg either hangs up or is transferred). If supplied with the value `self`, the current leg will be parked after unbridge. If not set, the default behavior is to hang up the leg.',
        examples=['self'],
    )
    queue: Optional[str] = Field(
        None,
        description="The name of the queue you want to bridge with, can't be used together with call_control_id parameter. Bridging with a queue means bridging with the first call in the queue. The call will always be removed from the queue regardless of whether bridging succeeds. Returns an error when the queue is empty.",
        examples=['support'],
    )


class BulkCredentialRequest(BaseModel):
    amount: Optional[int] = Field(
        None,
        description='Amount of credentials to be created. A single tag can hold at maximum 1000 credentials',
        examples=[100],
    )
    connection_id: str = Field(
        ...,
        description='Identifies the connection this credential is associated with.',
        examples=['1234567890'],
    )
    name: Optional[str] = Field(
        None,
        description='A default name for all credentials.',
        examples=['Default Credentials'],
    )
    tag: str = Field(
        ...,
        description='Tags a credential for bulk operations. A single tag can hold at maximum 1000 credentials.',
        examples=['My Credentials'],
    )


class RecordType3(Enum):
    call = 'call'


class Call(BaseModel):
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: str = Field(
        ...,
        description='ID that is unique to the call and can be used to correlate webhook events',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: str = Field(
        ...,
        description='ID that is unique to the call session and can be used to correlate webhook events',
        examples=['428c31b6-7af4-4bcb-b68e-5013ef9657c1'],
    )
    is_alive: bool = Field(
        ...,
        description='Indicates whether the call is alive or not. For Dial command it will always be `false` (dialing is asynchronous).',
        examples=[True],
    )
    record_type: RecordType3 = Field(..., examples=['call'])


class EventType(Enum):
    call_answered = 'call.answered'


class State(Enum):
    answered = 'answered'


class Payload(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    state: Optional[State] = Field(
        None, description='State received from a command.', examples=['answered']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class RecordType4(Enum):
    event = 'event'


class CallAnswered(BaseModel):
    event_type: Optional[EventType] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.answered'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload] = None
    record_type: Optional[RecordType4] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallAnsweredEvent(BaseModel):
    data: Optional[CallAnswered] = None


class EventType1(Enum):
    call_bridged = 'call.bridged'


class State1(Enum):
    bridged = 'bridged'


class Payload1(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    state: Optional[State1] = Field(
        None, description='State received from a command.', examples=['bridged']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallBridged(BaseModel):
    event_type: Optional[EventType1] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.bridged'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload1] = None
    record_type: Optional[RecordType4] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallBridgedEvent(BaseModel):
    data: Optional[CallBridged] = None


class AnchorsiteOverride1(Enum):
    field_Latency_ = '"Latency"'
    field_Chicago__IL_ = '"Chicago, IL"'
    field_Ashburn__VA_ = '"Ashburn, VA"'
    field_San_Jose__CA_ = '"San Jose, CA"'


class DtmfType(Enum):
    RFC_2833 = 'RFC 2833'
    Inband = 'Inband'
    SIP_INFO = 'SIP INFO'


class RecordType6(Enum):
    call_control_application = 'call_control_application'


class WebhookApiVersion(Enum):
    field_1 = '1'
    field_2 = '2'


class SipSubdomainReceiveSettings(Enum):
    only_my_connections = 'only_my_connections'
    from_anyone = 'from_anyone'


class CallControlApplicationInbound(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class CallControlApplicationOutbound(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[str] = Field(
        None,
        description='Identifies the associated outbound voice profile.',
        examples=['1293384261075731499'],
    )


class CallControlCommandResult(BaseModel):
    result: Optional[str] = Field(None, examples=['ok'])


class EventType2(Enum):
    call_dtmf_received = 'call.dtmf.received'


class Payload2(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    digit: Optional[str] = Field(
        None, description='The received DTMF digit or symbol.', examples=['#']
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class RecordType7(Enum):
    event = 'event'


class CallDtmfReceived(BaseModel):
    event_type: Optional[EventType2] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.dtmf.received'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload2] = None
    record_type: Optional[RecordType7] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallDtmfReceivedEvent(BaseModel):
    data: Optional[CallDtmfReceived] = None


class EventType3(Enum):
    call_enqueued = 'call.enqueued'


class Payload3(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Telnyx connection ID used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    current_position: Optional[int] = Field(
        None, description='Current position of the call in the queue.', examples=[7]
    )
    queue: Optional[str] = Field(
        None, description='The name of the queue', examples=['support']
    )


class CallEnqueued(BaseModel):
    event_type: Optional[EventType3] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.enqueued'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload3] = None
    record_type: Optional[RecordType7] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallEnqueuedEvent(BaseModel):
    data: Optional[CallEnqueued] = None


class RecordType9(Enum):
    call_event = 'call_event'


class Type(Enum):
    command = 'command'
    webhook = 'webhook'


class CallEvent(BaseModel):
    call_leg_id: str = Field(
        ...,
        description='Uniquely identifies an individual call leg.',
        examples=['308fe500-5213-11e9-ace7-02420a0f0668'],
    )
    call_session_id: str = Field(
        ...,
        description='Uniquely identifies the call control session. A session may include multiple call leg events.',
        examples=['308fec30-5213-11e9-9d3f-02420a0f0668'],
    )
    event_timestamp: str = Field(
        ..., description='Event timestamp', examples=['2019-03-29T11:10:19.127783Z']
    )
    metadata: Dict[str, Any] = Field(
        ...,
        description='Event metadata, which includes raw event, and extra information based on event type',
    )
    name: str = Field(..., description='Event name', examples=['call.hangup'])
    record_type: RecordType9 = Field(..., examples=['call_event'])
    type: Type = Field(..., description='Event type', examples=['webhook'])


class EventType4(Enum):
    call_fork_started = 'call.fork.started'


class Payload4(BaseModel):
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )


class RecordType10(Enum):
    event = 'event'


class CallForkStarted(BaseModel):
    event_type: Optional[EventType4] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.fork.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload4] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallForkStartedEvent(BaseModel):
    data: Optional[CallForkStarted] = None


class EventType5(Enum):
    call_fork_stopped = 'call.fork.stopped'


class CallForkStopped(BaseModel):
    event_type: Optional[EventType5] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.fork.stopped'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload4] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallForkStoppedEvent(BaseModel):
    data: Optional[CallForkStopped] = None


class ForwardingType(Enum):
    always = 'always'
    on_failure = 'on_failure'


class CallForwarding(BaseModel):
    call_forwarding_enabled: Optional[bool] = Field(
        True,
        description='Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.',
        examples=[True],
    )
    forwarding_type: Optional[ForwardingType] = Field(
        None,
        description="Call forwarding type. 'forwards_to' must be set for this to have an effect.",
        examples=['always'],
    )
    forwards_to: Optional[str] = Field(
        None,
        description='The phone number to which inbound calls to this number are forwarded. Inbound calls will not be forwarded if this field is left blank. If set, must be a +E.164-formatted phone number.',
    )


class EventType6(Enum):
    call_gather_ended = 'call.gather.ended'


class Status(Enum):
    valid = 'valid'
    invalid = 'invalid'
    call_hangup = 'call_hangup'
    cancelled = 'cancelled'
    cancelled_amd = 'cancelled_amd'


class Payload6(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    digits: Optional[str] = Field(
        None, description='The received DTMF digit or symbol.', examples=['5503']
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    status: Optional[Status] = Field(
        None, description='Reflects how command ended.', examples=['valid']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallGatherEnded(BaseModel):
    event_type: Optional[EventType6] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.gather.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload6] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallGatherEndedEvent(BaseModel):
    data: Optional[CallGatherEnded] = None


class EventType7(Enum):
    call_hangup = 'call.hangup'


class HangupCause(Enum):
    call_rejected = 'call_rejected'
    normal_clearing = 'normal_clearing'
    originator_cancel = 'originator_cancel'
    timeout = 'timeout'
    time_limit = 'time_limit'
    user_busy = 'user_busy'
    not_found = 'not_found'
    unspecified = 'unspecified'


class HangupSource(Enum):
    caller = 'caller'
    callee = 'callee'
    unknown = 'unknown'


class State2(Enum):
    hangup = 'hangup'


class Payload7(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    hangup_cause: Optional[HangupCause] = Field(
        None,
        description='The reason the call was ended (`call_rejected`, `normal_clearing`, `originator_cancel`, `timeout`, `time_limit`, `user_busy`, `not_found` or `unspecified`).',
        examples=['call_rejected'],
    )
    hangup_source: Optional[HangupSource] = Field(
        None,
        description='The party who ended the call (`callee`, `caller`, `unknown`).',
        examples=['caller'],
    )
    sip_hangup_cause: Optional[str] = Field(
        None,
        description='The reason the call was ended (SIP response code). If the SIP response is unavailable (in inbound calls for example) this is set to `unspecified`.',
        examples=['603'],
    )
    start_time: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the call started.',
        examples=['2018-02-02T22:20:27.521992Z'],
    )
    state: Optional[State2] = Field(
        None, description='State received from a command.', examples=['hangup']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallHangup(BaseModel):
    event_type: Optional[EventType7] = Field(
        None, description='The type of event being delivered.', examples=['call.hangup']
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload7] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallHangupEvent(BaseModel):
    data: Optional[CallHangup] = None


class EventType8(Enum):
    call_initiated = 'call.initiated'


class Direction(Enum):
    incoming = 'incoming'
    outgoing = 'outgoing'


class State3(Enum):
    parked = 'parked'
    bridging = 'bridging'


class Payload8(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    direction: Optional[Direction] = Field(
        None,
        description='Whether the call is `incoming` or `outgoing`.',
        examples=['incoming'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    state: Optional[State3] = Field(
        None, description='State received from a command.', examples=['parked']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallInitiated(BaseModel):
    event_type: Optional[EventType8] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.initiated'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload8] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallInitiatedEvent(BaseModel):
    data: Optional[CallInitiated] = None


class EventType9(Enum):
    call_left_queue = 'call.left.queue'


class Reason(Enum):
    bridged = 'bridged'
    bridging_in_process = 'bridging-in-process'
    hangup = 'hangup'
    leave = 'leave'
    timeout = 'timeout'


class Payload9(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Telnyx connection ID used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    queue: Optional[str] = Field(
        None, description='The name of the queue', examples=['support']
    )
    reason: Optional[Reason] = Field(
        None, description='The reason for leaving the queue', examples=['bridged']
    )


class CallLeftQueue(BaseModel):
    event_type: Optional[EventType9] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.left.queue'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload9] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallLeftQueueEvent(BaseModel):
    data: Optional[CallLeftQueue] = None


class EventType10(Enum):
    call_machine_detection_ended = 'call.machine.detection.ended'


class Result(Enum):
    human = 'human'
    machine = 'machine'
    not_sure = 'not_sure'


class Payload10(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    result: Optional[Result] = Field(
        None, description='Answering machine detection result.', examples=['machine']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallMachineDetectionEnded(BaseModel):
    event_type: Optional[EventType10] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.machine.detection.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload10] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallMachineDetectionEndedEvent(BaseModel):
    data: Optional[CallMachineDetectionEnded] = None


class EventType11(Enum):
    call_machine_greeting_ended = 'call.machine.greeting.ended'


class Result1(Enum):
    ended = 'ended'
    not_sure = 'not_sure'


class Payload11(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    result: Optional[Result1] = Field(
        None, description='Answering machine greeting ended result.', examples=['ended']
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallMachineGreetingEnded(BaseModel):
    event_type: Optional[EventType11] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.machine.greeting.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload11] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallMachineGreetingEndedEvent(BaseModel):
    data: Optional[CallMachineGreetingEnded] = None


class EventType12(Enum):
    call_playback_ended = 'call.playback.ended'


class Status1(Enum):
    valid = 'valid'
    invalid = 'invalid'
    call_hangup = 'call_hangup'


class Payload12(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The name of the audio media file being played back, if media_name has been used to start.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description='The audio URL being played back, if audio_url has been used to start.',
        examples=['http://example.com/audio.wav'],
    )
    overlay: Optional[bool] = Field(
        None,
        description='Whether the audio is going to be played in overlay mode or not.',
        examples=[False],
    )
    status: Optional[Status1] = Field(
        None, description='Reflects how command ended.', examples=['valid']
    )


class CallPlaybackEnded(BaseModel):
    event_type: Optional[EventType12] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.playback.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload12] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallPlaybackEndedEvent(BaseModel):
    data: Optional[CallPlaybackEnded] = None


class EventType13(Enum):
    call_playback_started = 'call.playback.started'


class Payload13(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The name of the audio media file being played back, if media_name has been used to start.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description='The audio URL being played back, if audio_url has been used to start.',
        examples=['http://example.com/audio.wav'],
    )
    overlay: Optional[bool] = Field(
        None,
        description='Whether the audio is going to be played in overlay mode or not.',
        examples=[False],
    )


class CallPlaybackStarted(BaseModel):
    event_type: Optional[EventType13] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.playback.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload13] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallPlaybackStartedEvent(BaseModel):
    data: Optional[CallPlaybackStarted] = None


class InboundCallRecordingChannels(Enum):
    single = 'single'
    dual = 'dual'


class InboundCallRecordingFormat(Enum):
    wav = 'wav'
    mp3 = 'mp3'


class CallRecording(BaseModel):
    inbound_call_recording_channels: Optional[InboundCallRecordingChannels] = Field(
        'single',
        description="When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.",
    )
    inbound_call_recording_enabled: Optional[bool] = Field(
        False,
        description='When enabled, any inbound call to this number will be recorded.',
    )
    inbound_call_recording_format: Optional[InboundCallRecordingFormat] = Field(
        'wav', description='The audio file format for calls being recorded.'
    )


class EventType14(Enum):
    call_recording_saved = 'call.recording.saved'


class Channels(Enum):
    single = 'single'
    dual = 'dual'


class PublicRecordingUrls(BaseModel):
    mp3: Optional[str] = Field(
        None,
        description='Recording URL in requested `mp3` format.',
        examples=['http://example.com/recording.mp3'],
    )
    wav: Optional[str] = Field(
        None,
        description='Recording URL in requested `wav` format.',
        examples=['http://example.com/recording.wav'],
    )


class RecordingUrls(BaseModel):
    mp3: Optional[str] = Field(
        None,
        description='Recording URL in requested `mp3` format.',
        examples=['http://example.com/recording.mp3'],
    )
    wav: Optional[str] = Field(
        None,
        description='Recording URL in requested `wav` format.',
        examples=['http://example.com/recording.wav'],
    )


class Payload14(BaseModel):
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    channels: Optional[Channels] = Field(
        None,
        description='Whether recording was recorded in `single` or `dual` channel.',
        examples=['single'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    public_recording_urls: Optional[PublicRecordingUrls] = Field(
        None,
        description='Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.',
    )
    recording_ended_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when recording ended.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    recording_started_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when recording started.',
        examples=['2018-02-02T22:20:27.521992Z'],
    )
    recording_urls: Optional[RecordingUrls] = Field(
        None,
        description='Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.',
    )


class CallRecordingSaved(BaseModel):
    event_type: Optional[EventType14] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.recording.saved'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload14] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallRecordingSavedEvent(BaseModel):
    data: Optional[CallRecordingSaved] = None


class EventType15(Enum):
    call_refer_completed = 'call.refer.completed'


class Payload15(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Unique ID for controlling the call.',
        examples=['v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    sip_notify_response: Optional[int] = Field(
        None,
        description='SIP NOTIFY event status for tracking the REFER attempt.',
        examples=[200],
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallReferCompleted(BaseModel):
    event_type: Optional[EventType15] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.refer.completed'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload15] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallReferCompletedEvent(BaseModel):
    data: Optional[CallReferCompleted] = None


class EventType16(Enum):
    call_refer_failed = 'call.refer.failed'


class Payload16(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Unique ID for controlling the call.',
        examples=['v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    sip_notify_response: Optional[int] = Field(
        None,
        description='SIP NOTIFY event status for tracking the REFER attempt.',
        examples=[603],
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallReferFailed(BaseModel):
    event_type: Optional[EventType16] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.refer.failed'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload16] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallReferFailedEvent(BaseModel):
    data: Optional[CallReferFailed] = None


class EventType17(Enum):
    call_refer_started = 'call.refer.started'


class Payload17(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Unique ID for controlling the call.',
        examples=['v2:OycMASgvIjsGIAVEx8x3n9rYeKnUJx6a3V8VGhs5futnr17KZhujZA'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    sip_notify_response: Optional[int] = Field(
        None,
        description='SIP NOTIFY event status for tracking the REFER attempt.',
        examples=[100],
    )
    to: Optional[str] = Field(
        None,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )


class CallReferStarted(BaseModel):
    event_type: Optional[EventType17] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.refer.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload17] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallReferStartedEvent(BaseModel):
    data: Optional[CallReferStarted] = None


class AnsweringMachineDetection(Enum):
    detect = 'detect'
    detect_beep = 'detect_beep'
    detect_words = 'detect_words'
    greeting_end = 'greeting_end'
    disabled = 'disabled'


class AnsweringMachineDetectionConfig(BaseModel):
    after_greeting_silence_millis: Optional[int] = Field(
        800,
        description='Silence duration threshold after a greeting message or voice for it be considered human.',
        examples=[1000],
    )
    between_words_silence_millis: Optional[int] = Field(
        50, description='Maximum threshold for silence between words.', examples=[100]
    )
    greeting_duration_millis: Optional[int] = Field(
        3500,
        description='Maximum threshold of a human greeting. If greeting longer than this value, considered machine.',
        examples=[1500],
    )
    greeting_silence_duration_millis: Optional[int] = Field(
        1500,
        description='If machine already detected, maximum threshold for silence between words. If exceeded, the greeting is considered ended.',
        examples=[2000],
    )
    greeting_total_analysis_time_millis: Optional[int] = Field(
        5000,
        description='If machine already detected, maximum timeout threshold to determine the end of the machine greeting.',
        examples=[7500],
    )
    initial_silence_millis: Optional[int] = Field(
        3500,
        description='If initial silence duration is greater than this value, consider it a machine.',
        examples=[1800],
    )
    maximum_number_of_words: Optional[int] = Field(
        5,
        description='If number of detected words is greater than this value, consder it a machine.',
        examples=[3],
    )
    maximum_word_length_millis: Optional[int] = Field(
        3500,
        description='If a single word lasts longer than this threshold, consider it a machine.',
        examples=[2000],
    )
    silence_threshold: Optional[int] = Field(
        256, description='Minimum noise threshold for any analysis.', examples=[512]
    )
    total_analysis_time_millis: Optional[int] = Field(
        3500,
        description='Maximum timeout threshold for overall detection.',
        examples=[5000],
    )


class EventType18(Enum):
    call_speak_ended = 'call.speak.ended'


class Status2(Enum):
    completed = 'completed'
    call_hangup = 'call_hangup'


class Payload18(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    status: Optional[Status2] = Field(
        None, description='Reflects how `speak` ended.', examples=['completed']
    )


class CallSpeakEnded(BaseModel):
    event_type: Optional[EventType18] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.speak.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload18] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallSpeakEndedEvent(BaseModel):
    data: Optional[CallSpeakEnded] = None


class EventType19(Enum):
    call_speak_started = 'call.speak.started'


class Payload19(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )


class CallSpeakStarted(BaseModel):
    event_type: Optional[EventType19] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.speak.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload19] = None
    record_type: Optional[RecordType10] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class CallSpeakStartedEvent(BaseModel):
    data: Optional[CallSpeakStarted] = None


class CallerName(BaseModel):
    caller_name: Optional[str] = Field(
        None,
        description="The name of the requested phone number's owner as per the CNAM database",
        examples=['TELNYX LLC'],
    )
    error_code: Optional[str] = Field(
        None,
        description='A caller-name lookup specific error code, expressed as a stringified 5-digit integer',
        examples=['10001'],
    )


class Type1(Enum):
    fixed_line = 'fixed line'
    mobile = 'mobile'
    voip = 'voip'
    fixed_line_or_mobile = 'fixed line or mobile'
    toll_free = 'toll free'
    premium_rate = 'premium rate'
    shared_cost = 'shared cost'
    personal_number = 'personal number'
    pager = 'pager'
    uan = 'uan'
    voicemail = 'voicemail'
    unknown = 'unknown'


class Carrier(BaseModel):
    error_code: Optional[str] = Field(None, description='Unused', examples=[None])
    mobile_country_code: Optional[str] = Field(
        None,
        description='Region code that matches the specific country calling code if the requested phone number type is mobile',
        examples=['US'],
    )
    mobile_network_code: Optional[str] = Field(
        None,
        description='National destination code (NDC), with a 0 prefix, if an NDC is found and the requested phone number type is mobile',
        examples=[866],
    )
    name: Optional[str] = Field(
        None,
        description='SPID (Service Provider ID) name, if the requested phone number has been ported; otherwise, the name of carrier who owns the phone number block',
        examples=['Telnyx/4'],
    )
    type: Optional[Type1] = Field(
        None,
        description='A phone number type that identifies the type of service associated with the requested phone number',
        examples=['voip'],
    )


class AggregationType(Enum):
    NO_AGGREGATION = 'NO_AGGREGATION'
    CONNECTION = 'CONNECTION'
    TAG = 'TAG'
    BILLING_GROUP = 'BILLING_GROUP'


class Connections(BaseModel):
    empty: Optional[bool] = None


class ProductBreakdown(Enum):
    NO_BREAKDOWN = 'NO_BREAKDOWN'
    DID_VS_TOLL_FREE = 'DID_VS_TOLL_FREE'
    COUNTRY = 'COUNTRY'
    DID_VS_TOLL_FREE_PER_COUNTRY = 'DID_VS_TOLL_FREE_PER_COUNTRY'


class Status3(Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'


class CdrUsageReportResponse(BaseModel):
    aggregation_type: Optional[AggregationType] = None
    connections: Optional[Union[List[int], Connections]] = Field(
        None, examples=['[1234567890L, 9876543210L]']
    )
    created_at: Optional[datetime_aliased] = Field(
        None, examples=['2018-02-02T22:25:27.521Z']
    )
    end_time: Optional[datetime_aliased] = Field(
        None, examples=['2018-02-02T22:25:27.521Z']
    )
    id: Optional[UUID] = Field(None, description='Identifies the resource')
    product_breakdown: Optional[ProductBreakdown] = None
    record_type: Optional[str] = Field(None, examples=['cdr_usage_report'])
    report_url: Optional[str] = Field(
        None, examples=['http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv']
    )
    result: Optional[Dict[str, Any]] = None
    start_time: Optional[datetime_aliased] = Field(
        None, examples=['2018-02-02T22:25:27.521Z']
    )
    status: Optional[Status3] = None
    updated_at: Optional[datetime_aliased] = Field(
        None, examples=['2018-02-02T22:25:27.521Z']
    )


class RecordType26(Enum):
    whatsapp_contact = 'whatsapp_contact'


class Status4(Enum):
    processing = 'processing'
    valid = 'valid'
    invalid = 'invalid'


class CheckContact(BaseModel):
    id: Optional[str] = Field(
        None,
        description='WhatsApp user identifier that can be used in other API calls. Only returned if the status is valid.',
    )
    input: Optional[str] = Field(
        None,
        description='The value you sent in the contacts field of the JSON request.',
    )
    record_type: Optional[RecordType26] = Field(
        None, description='Identifies the type of the resource.'
    )
    status: Optional[Status4] = Field(None, description='Status of the user.')


class Blocking(Enum):
    no_wait = 'no_wait'
    wait = 'wait'


class CheckContactRequestBody(BaseModel):
    blocking: Optional[Blocking] = Field(
        'no_wait',
        description='Blocking determines whether the request should wait for the processing to complete (synchronous) or not (asynchronous).',
    )
    contacts: List[str] = Field(
        ...,
        description='Array of contact phone numbers. The numbers can be in any standard telephone number format.',
    )
    whatsapp_user_id: str = Field(..., description="The sender's WhatsApp ID.")


class CnamListing(BaseModel):
    cnam_listing_details: Optional[str] = Field(
        None,
        description='The CNAM listing details for this number. Must be alphanumeric characters or spaces with a maximum length of 15. Requires cnam_listing_enabled to also be set to true.',
    )
    cnam_listing_enabled: Optional[bool] = Field(
        False,
        description='Enables CNAM listings for this number. Requires cnam_listing_details to also be set.',
    )


class CommentRecordType(Enum):
    number_order = 'number_order'
    sub_number_order = 'sub_number_order'
    number_order_phone_number = 'number_order_phone_number'


class CommenterType(Enum):
    admin = 'admin'
    user = 'user'


class Comment(BaseModel):
    body: Optional[str] = Field(None, examples=['Hi there, ....'])
    comment_record_id: Optional[UUID] = Field(
        None, examples=['8ffb3622-7c6b-4ccc-b65f-7a3dc0099576']
    )
    comment_record_type: Optional[CommentRecordType] = Field(
        None, examples=['sub_number_order']
    )
    commenter: Optional[str] = Field(None, examples=['user@company.com'])
    commenter_type: Optional[CommenterType] = Field(None, examples=['user'])
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the comment was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    read_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the comment was read.',
        examples=[None],
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the comment was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class Status5(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class Type2(Enum):
    sim_card_network_preferences = 'sim_card_network_preferences'


class EndReason(Enum):
    all_left = 'all_left'
    ended_via_api = 'ended_via_api'
    host_left = 'host_left'
    time_exceeded = 'time_exceeded'


class EndedBy(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call Control ID which ended the conference',
        examples=[
            'v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=='
        ],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='Call Session ID which ended the conference',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )


class RecordType27(Enum):
    conference = 'conference'


class Status6(Enum):
    init = 'init'
    in_progress = 'in_progress'
    completed = 'completed'


class Conference(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection (Call Control App) associated with the conference',
        examples=['3fa85f64-9191-4567-b3fc-2c963f66afa6'],
    )
    created_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the conference was created',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    end_reason: Optional[EndReason] = Field(
        None, description='Reason why the conference ended', examples=['all_left']
    )
    ended_by: Optional[EndedBy] = Field(
        None,
        description='IDs related to who ended the conference. It is expected for them to all be there or all be null',
    )
    expires_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the conference will expire',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    id: str = Field(
        ...,
        description='Uniquely identifies the conference',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    name: str = Field(
        ..., description='Name of the conference', examples=['All hands meeting']
    )
    record_type: RecordType27 = Field(..., examples=['conference'])
    region: Optional[str] = Field(
        None, description='Region where the conference is hosted', examples=['sv1']
    )
    status: Optional[Status6] = Field(
        None, description='Status of the conference', examples=['completed']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the conference was last updated',
        examples=['2019-01-23T18:10:02.574Z'],
    )


class SupervisorRole(Enum):
    barge = 'barge'
    monitor = 'monitor'
    none = 'none'
    whisper = 'whisper'


class ConferenceCallRequest(BaseModel):
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call',
        examples=[
            'v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=='
        ],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    from_: str = Field(
        ...,
        alias='from',
        description='The `from` number to be used as the caller id presented to the destination (`to` number).',
        examples=['+18005550101'],
    )
    hold: Optional[bool] = Field(
        False,
        description='Whether the participant should be put on hold immediately after joining the conference.',
        examples=[True],
    )
    hold_audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played to the participant when they are put on hold after joining the conference. If media_name is also supplied, this is currently ignored. Takes effect only when "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set to "true".',
        examples=['http://example.com/message.wav'],
    )
    hold_media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set to "true".',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    mute: Optional[bool] = Field(
        False,
        description='Whether the participant should be muted immediately after joining the conference.',
        examples=[False],
    )
    start_conference_on_enter: Optional[bool] = Field(
        False,
        description='Whether the conference should be started after the participant joins the conference.',
        examples=[True],
    )
    supervisor_role: Optional[SupervisorRole] = Field(
        None,
        description='Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. "barge" means the supervisor enters the conference as a normal participant. This is the same as "none". "monitor" means the supervisor is muted but can hear all participants. "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor. Defaults to "none".',
        examples=['whisper'],
    )
    to: str = Field(
        ...,
        description='The DID or SIP URI to dial out and bridge to the given call.',
        examples=['+18005550100 or sip:username@sip.telnyx.com'],
    )
    whisper_call_control_ids: Optional[List[str]] = Field(
        None,
        description='Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.',
        examples=[
            [
                'v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ',
                'v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw',
            ]
        ],
    )


class ConferenceCommandResult(BaseModel):
    result: str = Field(..., examples=['ok'])


class EventType20(Enum):
    conference_created = 'conference.created'


class Payload20(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='Conference ID that the participant joined.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class RecordType28(Enum):
    event = 'event'


class ConferenceCreated(BaseModel):
    event_type: Optional[EventType20] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.created'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload20] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceCreatedEvent(BaseModel):
    data: Optional[ConferenceCreated] = None


class ConferenceDetailRecord(BaseModel):
    call_leg_id: Optional[str] = Field(
        None,
        description='Telnyx UUID that identifies the conference call leg',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    call_sec: Optional[int] = Field(
        None, description='Duration of the conference call in seconds', examples=[100]
    )
    call_session_id: Optional[str] = Field(
        None,
        description='Telnyx UUID that identifies with conference call session',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    connection_id: Optional[str] = Field(
        None, description='Connection id', examples=['1583941447772537867']
    )
    ended_at: Optional[datetime_aliased] = Field(
        None, description='Conference end time', examples=['2020-07-01T00:00:00-06:00']
    )
    expires_at: Optional[datetime_aliased] = Field(
        None,
        description='Conference expiry time',
        examples=['2020-07-01T00:00:00-06:00'],
    )
    id: Optional[str] = Field(
        None,
        description='Conference id',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    is_telnyx_billable: Optional[bool] = Field(
        None,
        description='Indicates whether Telnyx billing charges might be applicable',
        examples=[False],
    )
    name: Optional[str] = Field(
        None, description='Conference name', examples=['My Conference']
    )
    participant_call_sec: Optional[int] = Field(
        None,
        description='Sum of the conference call duration for all participants in seconds',
        examples=[100],
    )
    participant_count: Optional[int] = Field(
        None,
        description='Number of participants that joined the conference call',
        examples=[5],
    )
    record_type: Literal['ConferenceDetailRecord'] = Field(
        ..., examples=['conference_detail_record']
    )
    region: Optional[str] = Field(
        None, description='Region where the conference is hosted', examples=['ch1']
    )
    started_at: Optional[datetime_aliased] = Field(
        None,
        description='Conference start time',
        examples=['2020-07-01T00:00:00-06:00'],
    )
    user_id: Optional[str] = Field(
        None, description='User id', examples=['3ca7bd3d-7d82-4e07-9df4-009123068320']
    )


class EventType21(Enum):
    conference_ended = 'conference.ended'


class Reason1(Enum):
    all_left = 'all_left'
    host_left = 'host_left'
    time_exceeded = 'time_exceeded'


class Payload21(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='Conference ID that the participant joined.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    reason: Optional[Reason1] = Field(None, description='Reason the conference ended.')


class ConferenceEnded(BaseModel):
    event_type: Optional[EventType21] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload21] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceEndedEvent(BaseModel):
    data: Optional[ConferenceEnded] = None


class EventType22(Enum):
    conference_floor_changed = 'conference.floor.changed'


class Payload22(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call Control ID of the new speaker.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='Call Leg ID of the new speaker.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='Call Session ID of the new speaker.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='Conference ID that had a speaker change event.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Telnyx connection ID used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferenceFloorChangedEvent(BaseModel):
    event_type: Optional[EventType22] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.floor.changed'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload22] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceHoldRequest(BaseModel):
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played to the participants when they are put on hold. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='List of unique identifiers and tokens for controlling the call. When empty all participants will be placed on hold.',
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played to the participants when they are put on hold. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )


class ConferenceMuteRequest(BaseModel):
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='Array of unique identifiers and tokens for controlling the call. When empty all participants will be muted.',
    )


class ConferenceParticipantDetailRecord(BaseModel):
    billed_sec: Optional[int] = Field(
        None,
        description='Duration of the conference call for billing purposes',
        examples=[120],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='Telnyx UUID that identifies the conference call leg',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    call_sec: Optional[int] = Field(
        None, description='Duration of the conference call in seconds', examples=[100]
    )
    call_session_id: Optional[str] = Field(
        None,
        description='Telnyx UUID that identifies with conference call session',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='Conference id',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    cost: Optional[str] = Field(
        None, description='Currency amount for Telnyx billing cost', examples=['0.004']
    )
    currency: Optional[str] = Field(
        None,
        description='Telnyx account currency used to describe monetary values, including billing cost',
        examples=['USD'],
    )
    destination_number: Optional[str] = Field(
        None,
        description='Number called by the participant to join the conference',
        examples=['+18005550199'],
    )
    id: Optional[str] = Field(
        None,
        description='Participant id',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    is_telnyx_billable: Optional[bool] = Field(
        None,
        description='Indicates whether Telnyx billing charges might be applicable',
        examples=[True],
    )
    joined_at: Optional[datetime_aliased] = Field(
        None,
        description='Participant join time',
        examples=['2020-07-01T00:00:00-06:00'],
    )
    left_at: Optional[datetime_aliased] = Field(
        None,
        description='Participant leave time',
        examples=['2020-07-01T00:00:00-06:00'],
    )
    originating_number: Optional[str] = Field(
        None,
        description='Participant origin number used in the conference call',
        examples=['+18005550199'],
    )
    rate: Optional[str] = Field(
        None,
        description='Currency amount per billing unit used to calculate the Telnyx billing cost',
        examples=['0.002'],
    )
    rate_measured_in: Optional[str] = Field(
        None,
        description='Billing unit used to calculate the Telnyx billing cost',
        examples=['minutes'],
    )
    record_type: Literal['ConferenceParticipantDetailRecord'] = Field(
        ..., examples=['conference_participant_detail_record']
    )
    user_id: Optional[str] = Field(
        None, description='User id', examples=['3ca7bd3d-7d82-4e07-9df4-009123068320']
    )


class EventType23(Enum):
    conference_participant_joined = 'conference.participant.joined'


class Payload23(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Call ID used to issue commands via Call Control API.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='Conference ID that the participant joined.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )


class ConferenceParticipantJoined(BaseModel):
    event_type: Optional[EventType23] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.joined'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    payload: Optional[Payload23] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantJoinedEvent(BaseModel):
    data: Optional[ConferenceParticipantJoined] = None


class EventType24(Enum):
    conference_participant_left = 'conference.participant.left'


class ConferenceParticipantLeft(BaseModel):
    event_type: Optional[EventType24] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.left'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    payload: Optional[Payload23] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantLeftEvent(BaseModel):
    data: Optional[ConferenceParticipantLeft] = None


class EventType25(Enum):
    conference_participant_playback_ended = 'conference.participant.playback.ended'


class Payload25(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description="Participant's call ID used to issue commands via Call Control API.",
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='ID of the conference the text was spoken in.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    creator_call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session that started the conference.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The name of the audio media file being played back, if media_name has been used to start.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description='The audio URL being played back, if audio_url has been used to start.',
        examples=['http://example.com/audio.wav'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferenceParticipantPlaybackEnded(BaseModel):
    event_type: Optional[EventType25] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.playback.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload25] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantPlaybackEndedEvent(BaseModel):
    data: Optional[ConferenceParticipantPlaybackEnded] = None


class EventType26(Enum):
    conference_participant_playback_started = 'conference.participant.playback.started'


class ConferenceParticipantPlaybackStarted(BaseModel):
    event_type: Optional[EventType26] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.playback.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload25] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantPlaybackStartedEvent(BaseModel):
    data: Optional[ConferenceParticipantPlaybackStarted] = None


class EventType27(Enum):
    conference_participant_speak_ended = 'conference.participant.speak.ended'


class Payload27(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description="Participant's call ID used to issue commands via Call Control API.",
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='State received from a command.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='ID of the conference the text was spoken in.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    creator_call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session that started the conference.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferenceParticipantSpeakEnded(BaseModel):
    event_type: Optional[EventType27] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.speak.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload27] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantSpeakEndedEvent(BaseModel):
    data: Optional[ConferenceParticipantSpeakEnded] = None


class EventType28(Enum):
    conference_participant_speak_started = 'conference.participant.speak.started'


class ConferenceParticipantSpeakStarted(BaseModel):
    event_type: Optional[EventType28] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.participant.speak.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload27] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceParticipantSpeakStartedEvent(BaseModel):
    data: Optional[ConferenceParticipantSpeakStarted] = None


class EventType29(Enum):
    conference_playback_ended = 'conference.playback.ended'


class Payload29(BaseModel):
    conference_id: Optional[str] = Field(
        None,
        description='ID of the conference the text was spoken in.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    creator_call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session that started the conference.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The name of the audio media file being played back, if media_name has been used to start.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description='The audio URL being played back, if audio_url has been used to start.',
        examples=['http://example.com/audio.wav'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferencePlaybackEnded(BaseModel):
    event_type: Optional[EventType29] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.playback.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload29] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferencePlaybackEndedEvent(BaseModel):
    data: Optional[ConferencePlaybackEnded] = None


class EventType30(Enum):
    conference_playback_started = 'conference.playback.started'


class ConferencePlaybackStarted(BaseModel):
    event_type: Optional[EventType30] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.playback.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload29] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferencePlaybackStartedEvent(BaseModel):
    data: Optional[ConferencePlaybackStarted] = None


class EventType31(Enum):
    conference_recording_saved = 'conference.recording.saved'


class Format(Enum):
    wav = 'wav'
    mp3 = 'mp3'


class Payload31(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description="Participant's call ID used to issue commands via Call Control API.",
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    channels: Optional[Channels] = Field(
        None,
        description='Whether recording was recorded in `single` or `dual` channel.',
        examples=['single'],
    )
    conference_id: Optional[UUID] = Field(
        None,
        description='ID of the conference that is being recorded.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    format: Optional[Format] = Field(
        None,
        description='The audio file format used when storing the call recording. Can be either `mp3` or `wav`.',
        examples=['mp3'],
    )
    public_recording_urls: Optional[PublicRecordingUrls] = Field(
        None,
        description='Recording URLs in requested format. The URL is valid for as long as the file exists. For security purposes, this feature is activated on a per request basis.  Please contact customer support with your Account ID to request activation.',
    )
    recording_ended_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when recording ended.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    recording_id: Optional[UUID] = Field(
        None,
        description='ID of the conference recording.',
        examples=['4577f9a2-cf0e-44f3-ac57-9f95fb03fa47'],
    )
    recording_started_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when recording started.',
        examples=['2018-02-02T22:20:27.521992Z'],
    )
    recording_urls: Optional[RecordingUrls] = Field(
        None,
        description='Recording URLs in requested format. These URLs are valid for 10 minutes. After 10 minutes, you may retrieve recordings via API using Reports -> Call Recordings documentation, or via Mission Control under Reporting -> Recordings.',
    )


class ConferenceRecordingSaved(BaseModel):
    event_type: Optional[EventType31] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.recording.saved'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload31] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceRecordingSavedEvent(BaseModel):
    data: Optional[ConferenceRecordingSaved] = None


class EventType32(Enum):
    conference_speak_ended = 'conference.speak.ended'


class Payload32(BaseModel):
    conference_id: Optional[str] = Field(
        None,
        description='ID of the conference the text was spoken in.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Call Control App ID (formerly Telnyx connection ID) used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    creator_call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session that started the conference.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferenceSpeakEnded(BaseModel):
    event_type: Optional[EventType32] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.speak.ended'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload32] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceSpeakEndedEvent(BaseModel):
    data: Optional[ConferenceSpeakEnded] = None


class Language(Enum):
    arb = 'arb'
    cmn_CN = 'cmn-CN'
    cy_GB = 'cy-GB'
    da_DK = 'da-DK'
    de_DE = 'de-DE'
    en_AU = 'en-AU'
    en_GB = 'en-GB'
    en_GB_WLS = 'en-GB-WLS'
    en_IN = 'en-IN'
    en_US = 'en-US'
    es_ES = 'es-ES'
    es_MX = 'es-MX'
    es_US = 'es-US'
    fr_CA = 'fr-CA'
    fr_FR = 'fr-FR'
    hi_IN = 'hi-IN'
    is_IS = 'is-IS'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    nb_NO = 'nb-NO'
    nl_NL = 'nl-NL'
    pl_PL = 'pl-PL'
    pt_BR = 'pt-BR'
    pt_PT = 'pt-PT'
    ro_RO = 'ro-RO'
    ru_RU = 'ru-RU'
    sv_SE = 'sv-SE'
    tr_TR = 'tr-TR'


class PayloadType(Enum):
    text = 'text'
    ssml = 'ssml'


class Voice(Enum):
    male = 'male'
    female = 'female'


class ConferenceSpeakRequest(BaseModel):
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='Call Control IDs of participants who will hear the spoken text. When empty all participants will hear the spoken text.',
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    language: Language = Field(
        ..., description='The language used to speak the text.', examples=['en-US']
    )
    payload: str = Field(
        ...,
        description='The text or SSML to be converted into speech. There is a 5,000 character limit.',
        examples=['Say this to participants'],
    )
    payload_type: Optional[PayloadType] = Field(
        'text',
        description='The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).',
        examples=['ssml'],
    )
    voice: Voice = Field(
        ...,
        description='The gender of the voice used to speak the text.',
        examples=['female'],
    )


class EventType33(Enum):
    conference_speak_started = 'conference.speak.started'


class ConferenceSpeakStarted(BaseModel):
    event_type: Optional[EventType33] = Field(
        None,
        description='The type of event being delivered.',
        examples=['conference.speak.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload32] = None
    record_type: Optional[RecordType28] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class ConferenceSpeakStartedEvent(BaseModel):
    data: Optional[ConferenceSpeakStarted] = None


class ConferenceStopRequest(BaseModel):
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='List of call control ids identifying participants the audio file should stop be played to. If not given, the audio will be stoped to the entire conference.',
    )


class ConferenceUnholdRequest(BaseModel):
    call_control_ids: List[str] = Field(
        ...,
        description='List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unheld.',
    )


class ConferenceUnmuteRequest(BaseModel):
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='List of unique identifiers and tokens for controlling the call. Enter each call control ID to be unmuted. When empty all participants will be unmuted.',
    )


class ConnectionActive(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Specifies whether the connection can be used.',
        examples=[False],
        title='Connection Active',
    )


class ConnectionName(RootModel[str]):
    root: str = Field(
        ...,
        description='A user-assigned name to help manage the connection.',
        examples=['office-connection'],
        title='Connection Name',
    )


class Port(Enum):
    rtcp_mux = 'rtcp-mux'
    rtp_1 = 'rtp+1'


class ConnectionRtcpSettings(BaseModel):
    capture_enabled: Optional[bool] = Field(
        False,
        description='BETA - Enable the capture and storage of RTCP messages to create QoS reports on the Telnyx Mission Control Portal.',
        examples=[True],
    )
    port: Optional[Port] = Field(
        'rtp+1',
        description='RTCP port by default is rtp+1, it can also be set to rtcp-mux',
    )
    report_frequency_secs: Optional[int] = Field(
        5,
        description='RTCP reports are sent to customers based on the frequency set. Frequency is in seconds and it can be set to values from 5 to 3000 seconds.',
        examples=[10],
    )


class ConsumedData(BaseModel):
    amount: Optional[int] = Field(None, examples=[10])
    unit: Optional[str] = Field('B', examples=['B'])


class CostInformation(BaseModel):
    currency: Optional[str] = Field(
        None, description='The ISO 4217 code for the currency.', examples=['USD']
    )
    monthly_cost: Optional[str] = Field(None, examples=['6.54'])
    upfront_cost: Optional[str] = Field(None, examples=['3.21'])


class CreateCallControlApplicationRequest(BaseModel):
    active: Optional[bool] = Field(
        True, description='Specifies whether the connection can be used.'
    )
    anchorsite_override: Optional[AnchorsiteOverride1] = Field(
        '"Latency"',
        description="<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
        examples=['"Amsterdam, Netherlands"'],
    )
    application_name: str = Field(
        ...,
        description='A user-assigned name to help manage the application.',
        examples=['call-router'],
    )
    dtmf_type: Optional[DtmfType] = Field(
        'RFC 2833',
        description='Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.',
        examples=['Inband'],
    )
    first_command_timeout: Optional[bool] = Field(
        False,
        description='Specifies whether calls to phone numbers associated with this connection should hangup after timing out.',
        examples=[True],
    )
    first_command_timeout_secs: Optional[int] = Field(
        30,
        description='Specifies how many seconds to wait before timing out a dial command.',
        examples=[10],
    )
    inbound: Optional[CallControlApplicationInbound] = None
    outbound: Optional[CallControlApplicationOutbound] = None
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: str = Field(
        ...,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class BeepEnabled(Enum):
    always = 'always'
    never = 'never'
    on_enter = 'on_enter'
    on_exit = 'on_exit'


class CreateConferenceRequest(BaseModel):
    beep_enabled: Optional[BeepEnabled] = Field(
        'never',
        description='Whether a beep sound should be played when participants join and/or leave the conference.',
        examples=['on_exit'],
    )
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call',
        examples=[
            'v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=='
        ],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    comfort_noise: Optional[bool] = Field(
        True, description='Toggle background comfort noise.', examples=[False]
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    duration_minutes: Optional[int] = Field(
        None,
        description='Time length (minutes) after which the conference will end.',
        examples=[5],
    )
    hold_audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played to participants joining the conference. The URL can point to either a WAV or MP3 file. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when "start_conference_on_create" is set to "false".',
        examples=['http://example.com/message.wav'],
    )
    hold_media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played to participants joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when "start_conference_on_create" is set to "false".',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    name: str = Field(..., description='Name of the conference', examples=['Business'])
    start_conference_on_create: Optional[bool] = Field(
        None,
        description='Whether the conference should be started on creation. If the conference isn\'t started all participants that join are automatically put on hold. Defaults to "true".',
        examples=[False],
    )


class SipUriCallingPreference(Enum):
    disabled = 'disabled'
    unrestricted = 'unrestricted'
    internal = 'internal'


class Inbound(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class CreateFqdnRequest(BaseModel):
    connection_id: str = Field(
        ...,
        description='ID of the FQDN connection to which this IP should be attached.',
    )
    dns_record_type: str = Field(
        ...,
        description="The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
        examples=['a'],
    )
    fqdn: str = Field(
        ..., description='FQDN represented by this resource.', examples=['example.com']
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this FQDN.', examples=[5060]
    )


class AniNumberFormat(Enum):
    field_E_164 = '+E.164'
    E_164 = 'E.164'
    field_E_164_national = '+E.164-national'
    E_164_national = 'E.164-national'


class DefaultRoutingMethod(Enum):
    sequential = 'sequential'
    round_robin = 'round-robin'


class DnisNumberFormat(Enum):
    field_e164 = '+e164'
    e164 = 'e164'
    national = 'national'
    sip_username = 'sip_username'


class SipRegion(Enum):
    US = 'US'
    Europe = 'Europe'
    Australia = 'Australia'


class CreateInboundIpRequest(BaseModel):
    ani_number_format: Optional[AniNumberFormat] = Field(
        'E.164-national',
        description="This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
    )
    codecs: Optional[List[str]] = Field(
        ['G722', 'G711U', 'G711A', 'G729', 'OPUS', 'H.264'],
        description='Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.',
    )
    default_routing_method: Optional[DefaultRoutingMethod] = Field(
        None,
        description='Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed.',
    )
    dnis_number_format: Optional[DnisNumberFormat] = 'e164'
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    isup_headers_enabled: Optional[bool] = Field(
        False,
        description='When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)',
    )
    prack_enabled: Optional[bool] = Field(
        False, description='Enable PRACK messages as defined in RFC3262.'
    )
    privacy_zone_enabled: Optional[bool] = Field(
        False,
        description='By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.',
    )
    sip_compact_headers_enabled: Optional[bool] = Field(
        True, description='Defaults to true.'
    )
    sip_region: Optional[SipRegion] = Field(
        'US',
        description='Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.',
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
    )
    timeout_1xx_secs: Optional[conint(ge=1, le=120)] = Field(
        3, description='Time(sec) before aborting if connection is not made.'
    )
    timeout_2xx_secs: Optional[int] = Field(
        90,
        description='Time(sec) before aborting if call is unanswered (min: 1, max: 600).',
    )


class TransportProtocol(Enum):
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'


class CreateIpRequest(BaseModel):
    connection_id: Optional[str] = Field(
        None, description='ID of the IP Connection to which this IP should be attached.'
    )
    ip_address: str = Field(
        ...,
        description='IP adddress represented by this resource.',
        examples=['192.168.0.0'],
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this IP.', examples=[5060]
    )


class Type3(Enum):
    SMS = 'SMS'
    MMS = 'MMS'


class CreateManagedAccountRequest(BaseModel):
    business_name: str = Field(
        ...,
        description="The name of the business for which the new managed account is being created, that will be used as the managed accounts's organization's name.",
        examples=["Larry's Cat Food Inc"],
    )
    email: Optional[str] = Field(
        None,
        description='The email address for the managed account. If not provided, the email address will be generated based on the email address of the manager account.',
        examples=['new_managed_account@customer.org'],
    )
    password: Optional[str] = Field(
        None,
        description='Password for the managed account. If a password is not supplied, the account will not be able to be signed into directly. (A password reset may still be performed later to enable sign-in via password.)',
        examples=['3jVjLq!tMuWKyWx4NN*CvhnB'],
    )


class CreateMessagingHostedNumberOrderRequest(BaseModel):
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Automatically associate the number with this messaging profile ID when the order is complete.',
    )
    phone_numbers: Optional[List[str]] = Field(
        None, description='Phone numbers to be used for hosted messaging.'
    )


class WebhookApiVersion6(Enum):
    field_1 = '1'
    field_2 = '2'
    field_2010_04_01 = '2010-04-01'


class CreateMultiPartDocServiceDocumentRequest(BaseModel):
    file: Optional[bytes] = Field(None, description='The file you are uploading.')


class Status7(Enum):
    pending = 'pending'
    success = 'success'
    failure = 'failure'


class CreateNumberBlockOrderRequest(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection associated with this phone number.',
        examples=['346789098765567'],
    )
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    errors: Optional[str] = Field(
        None,
        description='Errors the reservation could happen upon',
        examples=['Number is already on hold'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[10],
    )
    range: int = Field(
        ..., description='The phone number range included in the block.', examples=[10]
    )
    record_type: Optional[str] = Field(None, examples=['number_block_order'])
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    starting_number: str = Field(
        ..., description='Starting phone number block', examples=['+19705555000']
    )
    status: Optional[Status7] = Field(None, description='The status of the order.')
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class RequirementType(Enum):
    address_proof = 'address_proof'
    identification = 'identification'
    reg_form = 'reg_form'


class CreateNumberOrderDocumentRequest(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order document was uploaded.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    file_id: Optional[str] = Field(
        None,
        description='The id of the file to associate as a number order document.',
        examples=['1e3c5822-0362-4702-8e46-5a129f0d3976'],
    )
    id: Optional[UUID] = Field(None, examples=['387d1e31-a218-4375-8151-103f2d5e2d2c'])
    record_type: Optional[str] = Field(None, examples=['number_order_document'])
    requirement_type: Optional[RequirementType] = None
    requirements_id: Optional[str] = Field(
        None,
        description='Unique id for a requirement.',
        examples=['36aaf27d-986b-493c-bd1b-de16af2e4292'],
    )


class CreatePortingOrder(BaseModel):
    phone_numbers: List[str] = Field(
        ...,
        description='The list of +E.164 formatted phone numbers',
        examples=[['+13035550000', '+13035550001', '+13035550002']],
    )


class CreatePortingOrderComment(BaseModel):
    body: Optional[str] = Field(
        None, examples=['Please, let me know when the port completes']
    )


class CreateRoomClientTokenRequest(BaseModel):
    refresh_token_ttl_secs: Optional[conint(ge=60, le=86400)] = Field(
        3600,
        description="The time to live in seconds of the Refresh Token, after that time the Refresh Token is invalid and can't be used to refresh Client Token.",
        examples=[3600],
    )
    token_ttl_secs: Optional[conint(ge=10, le=3600)] = Field(
        600,
        description="The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
        examples=[600],
    )


class CreateRoomRequest(BaseModel):
    max_participants: Optional[conint(ge=2, le=50)] = Field(
        10,
        description='The maximum amount of participants allowed in a room. If new participants try to join after that limit is reached, their request will be rejected.',
        examples=[10],
    )
    unique_name: Optional[str] = Field(
        None,
        description='The unique (within the Telnyx account scope) name of the room.',
        examples=['My room'],
    )


class Inbound1(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class StatusCallbackMethod(Enum):
    get = 'get'
    post = 'post'


class VoiceMethod(Enum):
    get = 'get'
    post = 'post'


class CreateVerificationRequestCall(BaseModel):
    call_timeout_secs: Optional[int] = Field(
        None,
        description="Must be less than the profile's default_verification_timeout_secs or timeout_secs, whichever is lesser.",
        examples=[30],
    )
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    timeout_secs: Optional[int] = Field(
        None,
        description='The number of seconds the verification code is valid for.',
        examples=[300],
    )
    verify_profile_id: UUID = Field(
        ...,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class CreateVerificationRequestFlashcall(BaseModel):
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    timeout_secs: Optional[int] = Field(
        None,
        description='The number of seconds the verification code is valid for.',
        examples=[300],
    )
    verify_profile_id: UUID = Field(
        ...,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class CreateVerificationRequestSMS(BaseModel):
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    timeout_secs: Optional[int] = Field(
        None,
        description='The number of seconds the verification code is valid for.',
        examples=[300],
    )
    verify_profile_id: UUID = Field(
        ...,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class CreateVerificationRequestWhatsapp(BaseModel):
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    timeout_secs: Optional[int] = Field(
        None,
        description='The number of seconds the verification code is valid for.',
        examples=[300],
    )
    verify_profile_id: UUID = Field(
        ...,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class CreateVerifyProfileCallRequest(BaseModel):
    default_call_timeout_secs: Optional[int] = Field(
        45,
        description='Must be less than default_verification_timeout_secs',
        examples=[30],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    speech_template: Optional[str] = Field(
        None,
        description='Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )


class CreateVerifyProfileFlashcallRequest(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class CreateVerifyProfilePSD2Request(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class CreateVerifyProfileSMSRequest(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    messaging_enabled: Optional[bool] = Field(
        None,
        description='Enables SMS text messaging for the Verify profile.',
        examples=[True],
    )
    messaging_template: Optional[str] = Field(
        None,
        description='Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )
    rcs_enabled: Optional[bool] = Field(
        None,
        description='Enables RCS messaging for the Verify profile.',
        examples=[True],
    )
    vsms_enabled: Optional[bool] = Field(
        None, description='Enables VSMS for the Verify profile.', examples=[True]
    )


class CreateVerifyProfileWhatsappRequest(BaseModel):
    app_name: Optional[str] = Field(
        None,
        description='The name that identifies the application requesting 2fa in the verification message.',
        examples=['Example Secure App'],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class CreatedAt(RootModel[str]):
    root: str = Field(
        ...,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2020-02-02T22:25:27.521Z'],
        title='Created At',
    )


class WebhookApiVersion7(Enum):
    field_1 = '1'
    field_2 = '2'


class CredentialInbound(BaseModel):
    ani_number_format: Optional[AniNumberFormat] = Field(
        'E.164-national',
        description="This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
    )
    codecs: Optional[List[str]] = Field(
        ['G722', 'G711U', 'G711A', 'G729', 'OPUS', 'H.264'],
        description='Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.',
    )
    dnis_number_format: Optional[DnisNumberFormat] = 'e164'
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    isup_headers_enabled: Optional[bool] = Field(
        False,
        description='When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)',
    )
    prack_enabled: Optional[bool] = Field(
        False, description='Enable PRACK messages as defined in RFC3262.'
    )
    privacy_zone_enabled: Optional[bool] = Field(
        False,
        description='By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.',
    )
    sip_compact_headers_enabled: Optional[bool] = Field(
        True, description='Defaults to true.'
    )
    timeout_1xx_secs: Optional[conint(ge=1, le=120)] = Field(
        3, description='Time(sec) before aborting if connection is not made.'
    )
    timeout_2xx_secs: Optional[str] = Field(
        '90',
        description='Time(sec) before aborting if call is unanswered (min: 1, max: 600).',
    )


class AniOverrideType(Enum):
    always = 'always'
    normal = 'normal'
    emergency = 'emergency'


class T38ReinviteSource(Enum):
    telnyx = 'telnyx'
    customer = 'customer'
    disabled = 'disabled'
    passthru = 'passthru'
    caller_passthru = 'caller-passthru'
    callee_passthru = 'callee-passthru'


class Status10(Enum):
    pending = 'pending'
    complete = 'complete'
    failed = 'failed'
    expired = 'expired'


class CsvDownload(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Identifies the resource.',
        examples=['42587e44-3a3e-46de-9255-0c9a7a1d1ec7'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['csv_download'],
    )
    status: Optional[Status10] = Field(
        'pending',
        description='Indicates the completion level of the CSV report. Only complete CSV download requests will be able to be retrieved.',
        examples=['pending'],
    )
    url: Optional[str] = Field(
        None,
        description='The URL at which the CSV file can be retrieved.',
        examples=['https://www.telnyx.com/sample/42587e44-3a3e-46de-9255-0c9a7a1d1ec7'],
    )


class Currencies(Enum):
    USD = 'USD'
    EUR = 'EUR'
    GBP = 'GBP'
    AUD = 'AUD'
    CAD = 'CAD'


class Currency(BaseModel):
    amount_1000: int
    currency_code: str
    fallback_value: Optional[str] = None


class CustomSipHeader(BaseModel):
    name: str = Field(
        ..., description='The name of the header to add.', examples=['head_1']
    )
    value: str = Field(..., description='The value of the header.', examples=['val_1'])


class DayOfWeek(Enum):
    MONDAY = 1
    TUESDAY = 2
    WEDNESDAY = 3
    THURSDAY = 4
    FRIDAY = 5
    SATURDAY = 6
    SUNDAY = 7


class DateTimeComponent(BaseModel):
    day_of_month: Optional[int] = Field(None, description='The day of month')
    day_of_week: Optional[DayOfWeek] = Field(
        None,
        description='Both strings and numbers are accepted. If different from the value derived from the date (if specified), use the derived value.',
    )
    hour: Optional[int] = Field(None, description='The hour')
    minute: Optional[int] = Field(None, description='The minute')
    month: Optional[int] = Field(None, description='The month')
    year: Optional[int] = Field(None, description='The year')


class DateTimeUnixEpoch(BaseModel):
    timestamp: Optional[int] = Field(None, description='Epoch timestamp in seconds')


class Direction1(Enum):
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'


class Action(Enum):
    both = 'both'
    ordering = 'ordering'
    porting = 'porting'


class PhoneNumberType(Enum):
    local = 'local'
    national = 'national'
    toll_free = 'toll_free'


class AcceptanceCriteria(BaseModel):
    locality_limit: Optional[str] = Field(
        None,
        description='Specifies geography-based acceptance criteria',
        examples=['Issued by the same country that the phone number belongs to'],
    )
    time_limit: Optional[str] = Field(
        None,
        description='Specifies time-based acceptance criteria',
        examples=['Current and not expired'],
    )


class Type7(Enum):
    document = 'document'
    address = 'address'
    textual = 'textual'


class DocReqsRequirementType(BaseModel):
    acceptance_criteria: Optional[AcceptanceCriteria] = Field(
        None, description='Specifies objective criteria for acceptance'
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2021-04-09T22:25:27.521Z'],
    )
    description: Optional[str] = Field(
        None,
        description='Describes the requirement type',
        examples=[
            'Proves the customer has a physical address in the same locality as the phone number'
        ],
    )
    example: Optional[str] = Field(
        None,
        description='Provides one or more examples of acceptable documents',
        examples=['Utility bill, internet bill, phone bill, or lease'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the associated document',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    name: Optional[str] = Field(
        None,
        description='A short descriptive name for this requirement_type',
        examples=['Proof of Address'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource',
        examples=['requirement_type'],
    )
    type: Optional[Type7] = Field(
        None,
        description='Defines the type of this requirement type',
        examples=['document'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was last updated.',
        examples=['2021-04-12T20:20:20.020Z'],
    )


class DocReqsRequirementTypeList(RootModel[List[DocReqsRequirementType]]):
    root: List[DocReqsRequirementType]


class Size(BaseModel):
    amount: Optional[int] = Field(
        None, description='The number of bytes', examples=[123456]
    )
    unit: Optional[str] = Field(
        None, description='Identifies the unit', examples=['bytes']
    )


class Status11(Enum):
    pending = 'pending'
    verified = 'verified'
    denied = 'denied'


class DocServiceDocumentUploadInline(BaseModel):
    file: str = Field(
        ...,
        description='The Base64 encoded contents of the file you are uploading.',
        examples=['[Base64 encoded content]'],
    )


class DocServiceDocumentUploadURL(BaseModel):
    url: str = Field(
        ...,
        description='If the file is already hosted publicly, you can provide a URL and have the documents service fetch it for you.',
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )


class DocServiceRecord(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['sample_record_type'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Document(BaseModel):
    caption: Optional[str] = Field(
        None, description='Describes the specified media.', examples=['My cool media!']
    )
    filename: Optional[str] = Field(
        None,
        description='Describes the filename for the specific document.',
        examples=['example.pdf'],
    )
    id: Optional[str] = Field(
        None,
        description='The media object ID returned when the media is successfully uploaded to the media endpoint.',
        examples=['f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68'],
    )
    link: Optional[str] = Field(
        None,
        description='The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.',
        examples=['http://www.example.com/file'],
    )


class Unit(Enum):
    B = 'B'
    KB = 'KB'
    MB = 'MB'


class DownlinkData(BaseModel):
    amount: Optional[float] = Field(None, description='Downlink data', examples=[1])
    unit: Optional[Unit] = Field('MB', description='Transmission unit')


class Email(BaseModel):
    email: str
    type: str


class EmergencyStatus(Enum):
    disabled = 'disabled'
    active = 'active'
    provisioning = 'provisioning'
    deprovisioning = 'deprovisioning'


class EmergencySettings(BaseModel):
    emergency_address_id: Optional[str] = Field(
        None, description='Identifies the address to be used with emergency services.'
    )
    emergency_enabled: Optional[bool] = Field(
        False,
        description='Allows you to enable or disable emergency services on the phone number. In order to enable emergency services, you must also set an emergency_address_id.',
    )
    emergency_status: Optional[EmergencyStatus] = Field(
        'disabled',
        description='Represents the state of the number regarding emergency activation.',
    )


class EncryptedMedia(Enum):
    SRTP = 'SRTP'
    ZRTP = 'ZRTP'


class EnqueueRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    max_size: Optional[int] = Field(
        100,
        description="The maximum number of calls allowed in the queue at a given time. Can't be modified for an existing queue.",
        examples=[200],
    )
    max_wait_time_secs: Optional[int] = Field(
        None,
        description='The number of seconds after which the call will be removed from the queue.',
        examples=[600],
    )
    queue_name: Optional[str] = Field(
        None,
        description="The name of the queue the call should be put in. If a queue with a given name doesn't exist yet it will be created.",
        examples=['tier_1_support'],
    )


class Source(BaseModel):
    parameter: Optional[str] = Field(
        None, description='Indicates which query parameter caused the error.'
    )
    pointer: Optional[str] = Field(
        None, description='JSON pointer (RFC6901) to the offending entity.'
    )


class Error(BaseModel):
    code: str
    detail: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[Source] = None
    title: str


class ErrorSource(BaseModel):
    parameter: Optional[str] = Field(
        None, description='Indicates which query parameter caused the error.'
    )
    pointer: Optional[str] = Field(
        None, description='JSON pointer (RFC6901) to the offending entity.'
    )


class Errors(BaseModel):
    errors: Optional[List[Error]] = None


class Errors1(BaseModel):
    empty: Optional[bool] = None


class Direction2(Enum):
    inbound = 'inbound'
    outbound = 'outbound'


class RecordType42(Enum):
    fax = 'fax'


class Status12(Enum):
    queued = 'queued'
    media_processed = 'media.processed'
    sending = 'sending'
    delivered = 'delivered'
    failed = 'failed'
    initiated = 'initiated'
    receiving = 'receiving'
    media_processing = 'media.processing'
    received = 'received'


class Fax(BaseModel):
    connection_id: Optional[str] = Field(
        None, description='The connection ID to send the fax with.', examples=['234423']
    )
    created_at: Optional[str] = Field(
        None, description='ISO 8601 timestamp when resource was created'
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name of a file used for the fax's media.",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description="The URL to the PDF used for the fax's media. If media_name was supplied, this is omitted.",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    quality: Optional[str] = Field(
        'high',
        description='The quality of the fax. Can be normal, high, very_high',
        examples=['high'],
    )
    record_type: Optional[RecordType42] = Field(
        None, description='Identifies the type of the resource.', examples=['fax']
    )
    status: Optional[Status12] = Field(
        None, description='Status of the fax', examples=['queued']
    )
    store_media: Optional[bool] = Field(
        None, description='Should fax media be stored on temporary URL.'
    )
    stored_media_url: Optional[str] = Field(
        None,
        description='If store_media was set to true, this is a link to temporary location. Link expires after 7 days.',
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    updated_at: Optional[str] = Field(
        None, description='ISO 8601 timestamp when resource was updated'
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description="Optional failover URL that will receive fax webhooks if webhook_url doesn't return a 2XX response",
    )
    webhook_url: Optional[str] = Field(
        None, description='URL that will receive fax webhooks'
    )


class Inbound2(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class EventType34(Enum):
    fax_delivered = 'fax.delivered'


class Status13(Enum):
    delivered = 'delivered'


class Payload34(BaseModel):
    call_duration_secs: Optional[int] = Field(
        None, description='The duration of the call in seconds.', examples=[25]
    )
    connection_id: Optional[str] = Field(
        None,
        description='The ID of the connection that was used to send the fax.',
        examples=['234423'],
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    fax_id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    original_media_url: Optional[str] = Field(
        None,
        description="The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    page_count: Optional[int] = Field(
        None, description='Number of transferred pages', examples=[2]
    )
    status: Optional[Status13] = Field(
        None, description='The status of the fax.', examples=['delivered']
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Identifier of the user to whom the fax belongs',
        examples=['yfff7c54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class RecordType43(Enum):
    event = 'event'


class FaxDelivered(BaseModel):
    event_type: Optional[EventType34] = Field(
        None,
        description='The type of event being delivered.',
        examples=['fax.delivered'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload34] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class EventType35(Enum):
    fax_failed = 'fax.failed'


class FailureReason(Enum):
    rejected = 'rejected'


class Status14(Enum):
    failed = 'failed'


class Payload35(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='The ID of the connection that was used to send the fax.',
        examples=['234423'],
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    failure_reason: Optional[FailureReason] = Field(
        None, description='Cause of the sending failure'
    )
    fax_id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    original_media_url: Optional[str] = Field(
        None,
        description="The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    status: Optional[Status14] = Field(
        None, description='The status of the fax.', examples=['failed']
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Identifier of the user to whom the fax belongs',
        examples=['yfff7c54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class FaxFailed(BaseModel):
    event_type: Optional[EventType35] = Field(
        None, description='The type of event being delivered.', examples=['fax.failed']
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload35] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class EventType36(Enum):
    fax_media_processed = 'fax.media.processed'


class Status15(Enum):
    media_processed = 'media.processed'


class Payload36(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='The ID of the connection that was used to send the fax.',
        examples=['234423'],
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    fax_id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    original_media_url: Optional[str] = Field(
        None,
        description="The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    status: Optional[Status15] = Field(
        None, description='The status of the fax.', examples=['media.processed']
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Identifier of the user to whom the fax belongs',
        examples=['yfff7c54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class FaxMediaProcessed(BaseModel):
    event_type: Optional[EventType36] = Field(
        None,
        description='The type of event being delivered.',
        examples=['fax.media.processed'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload36] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class EventType37(Enum):
    fax_queued = 'fax.queued'


class Status16(Enum):
    queued = 'queued'


class Payload37(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='The ID of the connection that was used to send the fax.',
        examples=['234423'],
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    fax_id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    original_media_url: Optional[str] = Field(
        None,
        description="The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    status: Optional[Status16] = Field(
        None, description='The status of the fax.', examples=['queued']
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Identifier of the user to whom the fax belongs',
        examples=['yfff7c54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class FaxQueued(BaseModel):
    event_type: Optional[EventType37] = Field(
        None, description='The type of event being delivered.', examples=['fax.queued']
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload37] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class EventType38(Enum):
    fax_sending_started = 'fax.sending.started'


class Status17(Enum):
    sending = 'sending'


class Payload38(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='The ID of the connection that was used to send the fax.',
        examples=['234423'],
    )
    direction: Optional[Direction2] = Field(
        None, description='The direction of the fax.', examples=['outbound']
    )
    fax_id: Optional[UUID] = Field(
        None,
        description='Identifies the fax.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    original_media_url: Optional[str] = Field(
        None,
        description="The original URL to the PDF used for the fax's media. If media_name was supplied, this is omitted",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    status: Optional[Status17] = Field(
        None, description='The status of the fax.', examples=['sending']
    )
    to: Optional[str] = Field(
        None,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI',
        examples=['+13127367276'],
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Identifier of the user to whom the fax belongs',
        examples=['yfff7c54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class FaxSendingStarted(BaseModel):
    event_type: Optional[EventType38] = Field(
        None,
        description='The type of event being delivered.',
        examples=['fax.sending.started'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    payload: Optional[Payload38] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class Feature(BaseModel):
    name: Optional[str] = Field(None, examples=['sms'])


class CldFilter(Enum):
    contains = 'contains'
    starts_with = 'starts_with'
    ends_with = 'ends_with'


class CliFilter(Enum):
    contains = 'contains'
    starts_with = 'starts_with'
    ends_with = 'ends_with'


class FilterType(Enum):
    and_ = 'and'
    or_ = 'or'


class Filter(BaseModel):
    billing_group: Optional[str] = Field(
        None, examples=['adfaa016-f921-4b6c-97bb-e4c1dad231c5']
    )
    cld: Optional[str] = Field(None, examples=['+13129457420'])
    cld_filter: Optional[CldFilter] = None
    cli: Optional[str] = Field(None, examples=['+13129457420'])
    cli_filter: Optional[CliFilter] = None
    filter_type: Optional[FilterType] = None
    tags_list: Optional[str] = Field(None, examples=['tag1'])


class FirstCommandTimeout(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Specifies whether calls to phone numbers associated with this connection should hangup after timing out.',
        examples=[True],
        title='First Command Timeout',
    )


class FirstCommandTimeoutSecs(RootModel[int]):
    root: int = Field(
        ...,
        description='Specifies how many seconds to wait before timing out a dial command.',
        examples=[10],
        title='First Command Timeout Secs',
    )


class Fqdn(BaseModel):
    connection_id: Optional[str] = Field(
        None, description='ID of the FQDN connection to which this FQDN is attached.'
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    dns_record_type: Optional[str] = Field(
        None,
        description="The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
        examples=['a'],
    )
    fqdn: Optional[str] = Field(
        None, description='FQDN represented by this resource.', examples=['example.com']
    )
    id: Optional[str] = Field(
        None, description='Identifies the resource.', examples=['1293384261075731499']
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this FQDN.', examples=[5060]
    )
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['fqdn']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class FqdnConnectionTransportProtocol(Enum):
    UDP = 'UDP'
    TCP = 'TCP'
    TLS = 'TLS'


class GatherUsingAudioRequest(BaseModel):
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played back at the beginning of each prompt. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    inter_digit_timeout_millis: Optional[int] = Field(
        5000,
        description='The number of milliseconds to wait for input between digits.',
        examples=[10000],
    )
    invalid_audio_url: Optional[str] = Field(
        None,
        description="The URL of a file to play when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The URL can point to either a WAV or MP3 file. invalid_media_name and invalid_audio_url cannot be used together in one request.",
        examples=['http://example.com/invalid.wav'],
    )
    invalid_media_name: Optional[str] = Field(
        None,
        description="The media_name of a file to be played back when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    maximum_digits: Optional[int] = Field(
        128,
        description='The maximum number of digits to fetch. This parameter has a maximum value of 128.',
        examples=[10],
    )
    maximum_tries: Optional[int] = Field(
        3,
        description='The maximum number of times the file should be played if there is no input from the user on the call.',
        examples=[3],
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played back at the beginning of each prompt. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    minimum_digits: Optional[int] = Field(
        1,
        description='The minimum number of digits to fetch. This parameter has a minimum value of 1.',
        examples=[1],
    )
    terminating_digit: Optional[str] = Field(
        '#',
        description='The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.',
        examples=['#'],
    )
    timeout_millis: Optional[int] = Field(
        60000,
        description='The number of milliseconds to wait for a DTMF response after file playback ends before a replaying the sound file.',
        examples=[60000],
    )
    valid_digits: Optional[str] = Field(
        '0123456789#*',
        description='A list of all digits accepted as valid.',
        examples=['123'],
    )


class ServiceLevel(Enum):
    basic = 'basic'
    premium = 'premium'


class GatherUsingSpeakRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    inter_digit_timeout_millis: Optional[int] = Field(
        5000,
        description='The number of milliseconds to wait for input between digits.',
        examples=[10000],
    )
    invalid_payload: Optional[str] = Field(
        None,
        description="The text or SSML to be converted into speech when digits don't match the `valid_digits` parameter or the number of digits is not between `min` and `max`. There is a 5,000 character limit.",
        examples=['Say this on the call'],
    )
    language: Language = Field(
        ..., description='The language you want spoken.', examples=['en-US']
    )
    maximum_digits: Optional[int] = Field(
        128,
        description='The maximum number of digits to fetch. This parameter has a maximum value of 128.',
        examples=[10],
    )
    maximum_tries: Optional[int] = Field(
        3,
        description='The maximum number of times that a file should be played back if there is no input from the user on the call.',
        examples=[3],
    )
    minimum_digits: Optional[int] = Field(
        1,
        description='The minimum number of digits to fetch. This parameter has a minimum value of 1.',
        examples=[1],
    )
    payload: str = Field(
        ...,
        description='The text or SSML to be converted into speech. There is a 5,000 character limit.',
        examples=['Say this on the call'],
    )
    payload_type: Optional[PayloadType] = Field(
        'text',
        description='The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).',
        examples=['ssml'],
    )
    service_level: Optional[ServiceLevel] = Field(
        'premium',
        description='This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.',
        examples=['premium'],
    )
    terminating_digit: Optional[str] = Field(
        '#',
        description='The digit used to terminate input if fewer than `maximum_digits` digits have been gathered.',
        examples=['#'],
    )
    timeout_millis: Optional[int] = Field(
        60000,
        description='The number of milliseconds to wait for a DTMF response after speak ends before a replaying the sound file.',
        examples=[60000],
    )
    valid_digits: Optional[str] = Field(
        '0123456789#*',
        description='A list of all digits accepted as valid.',
        examples=['123'],
    )
    voice: Voice = Field(
        ...,
        description='The gender of the voice used to speak back the text.',
        examples=['female'],
    )


class HangupRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class Status18(Enum):
    deleted = 'deleted'
    failed = 'failed'
    pending = 'pending'
    successful = 'successful'


class HostedNumber(BaseModel):
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    phone_number: Optional[str] = Field(
        None, description='The messaging hosted phone number (+E.164 format)'
    )
    record_type: Optional[str] = Field(None, examples=['messaging_hosted_number'])
    status: Optional[Status18] = None


class Image(BaseModel):
    caption: Optional[str] = Field(
        None, description='Describes the specified media.', examples=['My cool media!']
    )
    id: Optional[str] = Field(
        None,
        description='The media object ID returned when the media is successfully uploaded to the media endpoint.',
        examples=['f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68'],
    )
    link: Optional[str] = Field(
        None,
        description='The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.',
        examples=['http://www.example.com/file'],
    )


class ImmutableListString1(BaseModel):
    empty: Optional[bool] = None


class ImmutableListString(RootModel[Union[List[str], ImmutableListString1]]):
    root: Union[List[str], ImmutableListString1] = Field(
        ...,
        description='Error returned by the gateway in case sending of message failed.',
        examples=['US'],
    )


class ImmutableSetLong1(BaseModel):
    empty: Optional[bool] = None


class ImmutableSetLong(RootModel[Union[List[int], ImmutableSetLong1]]):
    root: Union[List[int], ImmutableSetLong1] = Field(
        ..., examples=['[1234567890L, 9876543210L]']
    )


class InboundFqdn(BaseModel):
    ani_number_format: Optional[AniNumberFormat] = Field(
        'E.164-national',
        description="This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
    )
    codecs: Optional[List[str]] = Field(
        ['G722', 'G711U', 'G711A', 'G729', 'OPUS', 'H.264'],
        description='Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.',
    )
    default_routing_method: Optional[DefaultRoutingMethod] = Field(
        None,
        description='Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or null, other values are not allowed.',
    )
    dnis_number_format: Optional[DnisNumberFormat] = 'e164'
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    isup_headers_enabled: Optional[bool] = Field(
        False,
        description='When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)',
    )
    prack_enabled: Optional[bool] = Field(
        False, description='Enable PRACK messages as defined in RFC3262.'
    )
    privacy_zone_enabled: Optional[bool] = Field(
        False,
        description='By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.',
    )
    sip_compact_headers_enabled: Optional[bool] = Field(
        True, description='Defaults to true.'
    )
    sip_region: Optional[SipRegion] = Field(
        'US',
        description='Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.',
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
    )
    timeout_1xx_secs: Optional[conint(ge=1, le=120)] = Field(
        3, description='Time(sec) before aborting if connection is not made.'
    )
    timeout_2xx_secs: Optional[int] = Field(
        90,
        description='Time(sec) before aborting if call is unanswered (min: 1, max: 600).',
    )


class InboundIp(BaseModel):
    ani_number_format: Optional[AniNumberFormat] = Field(
        'E.164-national',
        description="This setting allows you to set the format with which the caller's number (ANI) is sent for inbound phone calls.",
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    codecs: Optional[List[str]] = Field(
        ['G722', 'G711U', 'G711A', 'G729', 'OPUS', 'H.264'],
        description='Defines the list of codecs that Telnyx will send for inbound calls to a specific number on your portal account, in priority order. This only works when the Connection the number is assigned to uses Media Handling mode: default. OPUS and H.264 codecs are available only when using TCP or TLS transport for SIP.',
    )
    default_primary_ip_id: Optional[str] = Field(
        None,
        description='The default primary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.',
        examples=['192.168.0.0'],
    )
    default_routing_method: Optional[DefaultRoutingMethod] = Field(
        None,
        description='Default routing method to be used when a number is associated with the connection. Must be one of the routing method types or left blank, other values are not allowed.',
    )
    default_secondary_ip_id: Optional[str] = Field(
        None,
        description='The default secondary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.',
        examples=['192.168.0.0'],
    )
    default_tertiary_ip_id: Optional[str] = Field(
        None,
        description='The default tertiary IP to use for the number. Only settable if the connection is\n              of IP authentication type. Value must be the ID of an authorized IP set on the connection.',
        examples=['192.168.0.0'],
    )
    dnis_number_format: Optional[DnisNumberFormat] = 'e164'
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    isup_headers_enabled: Optional[bool] = Field(
        False,
        description='When set, inbound phone calls will receive ISUP parameters via SIP headers. (Only when available and only when using TCP or TLS transport.)',
    )
    prack_enabled: Optional[bool] = Field(
        False, description='Enable PRACK messages as defined in RFC3262.'
    )
    privacy_zone_enabled: Optional[bool] = Field(
        False,
        description='By default, Telnyx does not send caller-id information when the caller has chosen to hide this information. When this option is enabled, Telnyx will send the SIP header Privacy:id plus the caller-id information so that the receiver side can choose when to hide it.',
    )
    sip_compact_headers_enabled: Optional[bool] = Field(
        True, description='Defaults to true.'
    )
    sip_region: Optional[SipRegion] = Field(
        'US',
        description='Selects which `sip_region` to receive inbound calls from. If null, the default region (US) will be used.',
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
    )
    timeout_1xx_secs: Optional[conint(ge=1, le=120)] = Field(
        3, description='Time(sec) before aborting if connection is not made.'
    )
    timeout_2xx_secs: Optional[int] = Field(
        90,
        description='Time(sec) before aborting if call is unanswered (min: 1, max: 600).',
    )


class EventType39(Enum):
    message_received = 'message.received'


class LineType(Enum):
    Wireline = 'Wireline'
    Wireless = 'Wireless'
    VoWiFi = 'VoWiFi'
    VoIP = 'VoIP'
    Pre_Paid_Wireless = 'Pre-Paid Wireless'
    field_ = ''


class Status19(Enum):
    queued = 'queued'
    sending = 'sending'
    sent = 'sent'
    delivered = 'delivered'
    sending_failed = 'sending_failed'
    delivery_failed = 'delivery_failed'
    delivery_unconfirmed = 'delivery_unconfirmed'


class CcItem(BaseModel):
    carrier: Optional[str] = Field(None, description='The carrier of the receiver.')
    line_type: Optional[LineType] = Field(
        None, description='The line-type of the receiver.'
    )
    phone_number: Optional[str] = Field(
        None,
        description='Receiving address (+E.164 formatted phone number or short code).',
    )
    status: Optional[Status19] = None


class Cost(BaseModel):
    amount: Optional[Decimal] = Field(
        None, description='The amount deducted from your account.'
    )
    currency: Optional[str] = Field(
        None, description='The ISO 4217 currency identifier.'
    )


class Direction8(Enum):
    inbound = 'inbound'


class Status20(Enum):
    received = 'received'
    delivered = 'delivered'


class From(BaseModel):
    carrier: Optional[str] = Field(None, description='The carrier of the sender.')
    line_type: Optional[LineType] = Field(
        None, description='The line-type of the sender.'
    )
    phone_number: Optional[str] = Field(
        None,
        description='Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).',
    )
    status: Optional[Status20] = None


class MediaItem(BaseModel):
    content_type: Optional[str] = Field(
        None, description='The MIME type of the requested media.'
    )
    hash_sha256: Optional[constr(min_length=32, max_length=32)] = Field(
        None, description='The SHA256 hash of the requested media.'
    )
    size: Optional[int] = Field(None, description='The size of the requested media.')
    url: Optional[str] = Field(
        None, description='The url of the media requested to be sent.'
    )


class RecordType49(Enum):
    message = 'message'


class Status21(Enum):
    queued = 'queued'
    sending = 'sending'
    sent = 'sent'
    delivered = 'delivered'
    sending_failed = 'sending_failed'
    delivery_failed = 'delivery_failed'
    delivery_unconfirmed = 'delivery_unconfirmed'
    webhook_delivered = 'webhook_delivered'


class ToItem(BaseModel):
    carrier: Optional[str] = Field(None, description='The carrier of the receiver.')
    line_type: Optional[LineType] = Field(
        None, description='The line-type of the receiver.'
    )
    phone_number: Optional[str] = Field(
        None,
        description='Receiving address (+E.164 formatted phone number or short code).',
    )
    status: Optional[Status21] = None


class Type8(Enum):
    SMS = 'SMS'
    MMS = 'MMS'


class InboundMessagePayload(BaseModel):
    cc: Optional[List[CcItem]] = None
    completed_at: Optional[datetime_aliased] = Field(
        None, description='Not used for inbound messages.'
    )
    cost: Optional[Cost] = None
    direction: Optional[Direction8] = Field(
        None,
        description='The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.',
        examples=['inbound'],
    )
    encoding: Optional[str] = Field(
        None, description='Encoding scheme used for the message body.'
    )
    errors: Optional[List[Error]] = Field(
        None,
        description='These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.',
    )
    from_: Optional[From] = Field(None, alias='from')
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    media: Optional[List[MediaItem]] = None
    messaging_profile_id: Optional[str] = Field(
        None, description='Unique identifier for a messaging profile.'
    )
    parts: Optional[conint(ge=1, le=10)] = Field(
        None, description="Number of parts into which the message's body must be split."
    )
    received_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the message request was received.',
    )
    record_type: Optional[RecordType49] = Field(
        None, description='Identifies the type of the resource.', examples=['message']
    )
    sent_at: Optional[datetime_aliased] = Field(
        None, description='Not used for inbound messages.'
    )
    tags: Optional[List[str]] = Field(
        None, description='Tags associated with the resource.'
    )
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: Optional[List[ToItem]] = None
    type: Optional[Type8] = Field(
        None,
        description="The type of message. This value can be either 'sms' or 'mms'.",
    )
    valid_until: Optional[datetime_aliased] = Field(
        None, description='Not used for inbound messages.'
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class IntId(RootModel[str]):
    root: str = Field(
        ...,
        description='Uniquely identifies the resource.',
        examples=['1293384261075731499'],
        title='Int ID',
    )


class CoverageType(Enum):
    number = 'number'
    block = 'block'


class NumberType(Enum):
    did = 'did'
    toll_free = 'toll-free'


class PhoneNumberType1(Enum):
    local = 'local'
    toll_free = 'toll_free'
    national = 'national'
    landline = 'landline'
    shared_cost = 'shared_cost'
    mobile = 'mobile'


class InventoryCoverage(BaseModel):
    count: Optional[int] = Field(None, examples=[3])
    coverage_type: Optional[CoverageType] = Field(None, examples=['number'])
    group: Optional[str] = Field(None, examples=['318'])
    group_type: Optional[str] = Field(None, examples=['npa'])
    number_range: Optional[int] = Field(None, examples=[1])
    number_type: Optional[NumberType] = Field(None, examples=['did'])
    phone_number_type: Optional[PhoneNumberType1] = Field(None, examples=['local'])
    record_type: Optional[str] = Field(None, examples=['inventory_coverage_group'])


class InventoryCoverageMetadata(BaseModel):
    total_results: Optional[int] = Field(None, examples=[25])


class Ip(BaseModel):
    connection_id: Optional[str] = Field(
        None, description='ID of the IP Connection to which this IP should be attached.'
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[str] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['1293384261075731499'],
    )
    ip_address: Optional[str] = Field(
        None,
        description='IP adddress represented by this resource.',
        examples=['192.168.0.0'],
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this IP.', examples=[5060]
    )
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['ip']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class JoinConferenceRequest(BaseModel):
    beep_enabled: Optional[BeepEnabled] = Field(
        'never',
        description='Whether a beep sound should be played when the participant joins and/or leaves the conference. Can be used to override the conference-level setting.',
        examples=['on_exit'],
    )
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call',
        examples=[
            'v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=='
        ],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    end_conference_on_exit: Optional[bool] = Field(
        None,
        description='Whether the conference should end and all remaining participants be hung up after the participant leaves the conference. Defaults to "false".',
        examples=[True],
    )
    hold: Optional[bool] = Field(
        None,
        description='Whether the participant should be put on hold immediately after joining the conference. Defaults to "false".',
        examples=[True],
    )
    hold_audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played to the participant when they are put on hold after joining the conference. hold_media_name and hold_audio_url cannot be used together in one request. Takes effect only when "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set to "true".',
        examples=['http://example.com/message.wav'],
    )
    hold_media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played to the participant when they are put on hold after joining the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file. Takes effect only when "start_conference_on_create" is set to "false". This property takes effect only if "hold" is set to "true".',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    mute: Optional[bool] = Field(
        None,
        description='Whether the participant should be muted immediately after joining the conference. Defaults to "false".',
        examples=[True],
    )
    soft_end_conference_on_exit: Optional[bool] = Field(
        None,
        description='Whether the conference should end after the participant leaves the conference. NOTE this doesn\'t hang up the other participants. Defaults to "false".',
        examples=[True],
    )
    start_conference_on_enter: Optional[bool] = Field(
        None,
        description='Whether the conference should be started after the participant joins the conference. Defaults to "false".',
        examples=[True],
    )
    supervisor_role: Optional[SupervisorRole] = Field(
        None,
        description='Sets the joining participant as a supervisor for the conference. A conference can have multiple supervisors. "barge" means the supervisor enters the conference as a normal participant. This is the same as "none". "monitor" means the supervisor is muted but can hear all participants. "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor. Defaults to "none".',
        examples=['whisper'],
    )
    whisper_call_control_ids: Optional[List[str]] = Field(
        None,
        description='Array of unique call_control_ids the joining supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.',
        examples=[
            [
                'v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ',
                'v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw',
            ]
        ],
    )


class Policy(Enum):
    fallback = 'fallback'
    deterministic = 'deterministic'


class LanguageModel(BaseModel):
    code: str = Field(
        ...,
        description='The code of the language or locale to use — Accepts both language and language_locale formats (e.g., en and en_US).',
    )
    policy: Policy = Field(
        ..., description='The language policy the message should follow'
    )


class LeaveConferenceRequest(BaseModel):
    beep_enabled: Optional[BeepEnabled] = Field(
        'never',
        description='Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.',
        examples=['on_exit'],
    )
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call',
        examples=['f91269aa-61d1-417f-97b3-10e020e8bc47'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class LeaveQueueRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class RecordType50(Enum):
    ledger_billing_group_report = 'ledger_billing_group_report'


class Status22(Enum):
    pending = 'pending'
    complete = 'complete'
    failed = 'failed'
    deleted = 'deleted'


class LedgerBillingGroupReport(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    organization_id: Optional[UUID] = Field(
        None, description='Uniquely identifies the organization that owns the resource.'
    )
    record_type: Optional[RecordType50] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['ledger_billing_group_report'],
    )
    report_url: Optional[str] = Field(
        None,
        description='External url of the ledger billing group report, if the status is complete',
    )
    status: Optional[Status22] = Field(
        None, description='Status of the ledger billing group report'
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class Location(BaseModel):
    address: str = Field(
        ..., description='Address of the location. Only displayed if name is present.'
    )
    latitude: str = Field(..., description='Latitude of the location')
    longitude: str = Field(..., description='Longitude of the location')
    name: str = Field(..., description='Name of the location')


class Loopcount(RootModel[Union[str, int]]):
    root: Union[str, int]


class RecordType51(Enum):
    managed_account = 'managed_account'


class RecordType52(Enum):
    balance = 'balance'


class ManagedAccountBalance(BaseModel):
    available_credit: Optional[Decimal] = Field(
        None,
        description='Available amount to spend (balance + credit limit)',
        examples=['400.00'],
    )
    balance: Optional[Decimal] = Field(
        None, description="The account's current balance.", examples=['300.00']
    )
    credit_limit: Optional[Decimal] = Field(
        None, description="The account's credit limit.", examples=['100.00']
    )
    currency: Optional[str] = Field(
        None, description='The ISO 4217 currency identifier.', examples=['USD']
    )
    record_type: Optional[RecordType52] = Field(
        None, description='Identifies the type of the resource.', examples=['balance']
    )


class MarkMessageAsReadRequestBody(BaseModel):
    status: str
    whatsapp_user_id: str = Field(
        ..., description="The user's WhatsApp ID.", examples=['15125551212']
    )


class Direction9(Enum):
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'


class RecordType53(Enum):
    INCOMPLETE = 'INCOMPLETE'
    COMPLETED = 'COMPLETED'
    ERRORS = 'ERRORS'


class Status23(Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'


class MdrDetailReportResponse(BaseModel):
    connections: Optional[List[int]] = None
    created_at: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    directions: Optional[List[Direction9]] = None
    end_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    filters: Optional[List[Filter]] = None
    id: Optional[UUID] = Field(None, description='Identifies the resource')
    profiles: Optional[str] = Field(None, examples=['My profile'])
    record_type: Optional[str] = Field(None, examples=['mdr_report'])
    record_types: Optional[List[RecordType53]] = None
    report_name: Optional[str] = Field(None, examples=['report_name_8hvb45Gu'])
    report_url: Optional[str] = Field(
        None, examples=['http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv']
    )
    start_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    status: Optional[Status23] = None
    updated_at: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )


class Currency1(Enum):
    AUD = 'AUD'
    CAD = 'CAD'
    EUR = 'EUR'
    GBP = 'GBP'
    USD = 'USD'


class MessageType1(Enum):
    SMS = 'SMS'
    MMS = 'MMS'


class Status24(Enum):
    GW_TIMEOUT = 'GW_TIMEOUT'
    DELIVERED = 'DELIVERED'
    DLR_UNCONFIRMED = 'DLR_UNCONFIRMED'
    DLR_TIMEOUT = 'DLR_TIMEOUT'
    RECEIVED = 'RECEIVED'
    GW_REJECT = 'GW_REJECT'
    FAILED = 'FAILED'


class MdrDetailResponse(BaseModel):
    cld: Optional[str] = Field(
        None,
        description='The destination number for a call, or the callee',
        examples=['+1555123456'],
    )
    cli: Optional[str] = Field(
        None,
        description='The number associated with the person initiating the call, or the caller',
        examples=['+1555123456'],
    )
    cost: Optional[str] = Field(
        None,
        description='Final cost. Cost is calculated as rate * parts',
        examples=['0.1'],
    )
    created_at: Optional[datetime_aliased] = Field(
        None, description='Message sent time', examples=['2020-07-01T00:00:00-06:00']
    )
    currency: Optional[Currency1] = Field(
        None, description='Currency of the rate and cost', examples=['USD']
    )
    direction: Optional[str] = Field(
        None,
        description='Direction of message - inbound or outbound.',
        examples=['outbound'],
    )
    id: Optional[str] = Field(
        None,
        description='Id of message detail record',
        examples=['99b637f3-07fd-45ac-b9ca-b87208c24650'],
    )
    message_type: Optional[MessageType1] = Field(
        None, description='Type of message', examples=['SMS']
    )
    parts: Optional[float] = Field(
        None,
        description='Number of parts this message has. Max number of character is 160. If message contains more characters then that it will be broken down in multiple parts',
        examples=[2],
    )
    profile_name: Optional[str] = Field(
        None,
        description='Configured profile name. New profiles can be created and configured on Telnyx portal',
        examples=['configured-profile-name'],
    )
    rate: Optional[str] = Field(
        None, description='Rate applied to the message', examples=['0.05']
    )
    record_type: Optional[str] = Field(None, examples=['mdr_report'])
    status: Optional[Status24] = Field(
        None, description='Message status', examples=['DELIVERED']
    )


class MdrGetDetailReportByIdResponse(BaseModel):
    data: Optional[MdrDetailReportResponse] = None


class MdrPostDetailReportRequest(BaseModel):
    connections: Optional[List[int]] = None
    directions: Optional[List[Direction9]] = None
    end_date: datetime_aliased = Field(..., examples=['2020-07-01T00:00:00-06:00'])
    filters: Optional[List[Filter]] = None
    include_message_body: Optional[bool] = Field(None, examples=[True])
    profiles: Optional[str] = Field(None, examples=['My profile'])
    record_types: Optional[List[RecordType53]] = None
    report_name: Optional[str] = None
    start_date: datetime_aliased = Field(..., examples=['2020-07-01T00:00:00-06:00'])


class MdrPostDetailReportResponse(BaseModel):
    data: Optional[MdrDetailReportResponse] = None


class AggregationType1(Enum):
    NO_AGGREGATION = 'NO_AGGREGATION'
    PROFILE = 'PROFILE'
    TAGS = 'TAGS'


class MdrPostUsageReportRequest(BaseModel):
    aggregation_type: AggregationType1
    end_date: datetime_aliased = Field(..., examples=['2020-07-01T00:00:00-06:00'])
    profiles: Optional[str] = Field(None, examples=['My profile'])
    start_date: datetime_aliased = Field(..., examples=['2020-07-01T00:00:00-06:00'])


class MdrUsageRecord(BaseModel):
    carrier_passthrough_fee: Optional[str] = Field(None, examples=['0'])
    connection: Optional[str] = Field(None, examples=['all'])
    cost: Optional[str] = Field(None, examples=['0'])
    currency: Optional[str] = Field(None, examples=['USD'])
    delivered: Optional[str] = Field(None, examples=['0'])
    direction: Optional[str] = Field(None, examples=['outbound'])
    message_type: Optional[str] = Field(None, examples=['SMS'])
    parts: Optional[str] = Field(None, examples=['0'])
    product: Optional[str] = Field(None, examples=['outbound'])
    profile_id: Optional[str] = Field(None, examples=['All'])
    received: Optional[str] = Field(None, examples=['0'])
    sent: Optional[str] = Field(None, examples=['0'])
    tags: Optional[str] = Field(None, examples=['All'])
    tn_type: Optional[str] = Field(None, examples=['TF'])


class Status25(Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'


class MdrUsageReportResponse(BaseModel):
    aggregation_type: Optional[AggregationType1] = None
    connections: Optional[List[int]] = None
    created_at: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    end_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    id: Optional[UUID] = Field(None, description='Identifies the resource')
    profiles: Optional[str] = Field(None, examples=['My profile'])
    record_type: Optional[str] = Field(None, examples=['mdr_usage_report'])
    report_url: Optional[str] = Field(
        None, examples=['http://portal.telnyx.com/downloads/report_name_8hvb45Gu.csv']
    )
    result: Optional[List[MdrUsageRecord]] = None
    start_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )
    status: Optional[Status25] = None
    updated_at: Optional[datetime_aliased] = Field(
        None, examples=['2020-07-01T00:00:00-06:00']
    )


class MediaHandlingMode(Enum):
    default = 'default'
    proxy = 'proxy'


class MediaFeatures(BaseModel):
    accept_any_rtp_packets_enabled: Optional[bool] = Field(
        False,
        description='When enabled, Telnyx will accept RTP packets from any customer-side IP address and port, not just those to which Telnyx is sending RTP.',
    )
    media_handling_mode: Optional[MediaHandlingMode] = Field(
        'default',
        description='Controls how media is handled for the phone number. default: media routed through Telnyx with transcode support. proxy: media routed through Telnyx with no transcode support.',
    )
    rtp_auto_adjust_enabled: Optional[bool] = Field(
        True,
        description='When RTP Auto-Adjust is enabled, the destination RTP address port will be automatically changed to match the source of the incoming RTP packets.',
    )
    t38_fax_gateway_enabled: Optional[bool] = Field(
        False,
        description='Controls whether Telnyx will accept a T.38 re-INVITE for this phone number. Note that Telnyx will not send a T.38 re-INVITE; this option only controls whether one will be accepted.',
    )


class MediaRequestBody(BaseModel):
    media_content_type: str = Field(
        ..., description='The content-type of the uplaoded media.'
    )
    upload_file: bytes = Field(..., description='The media to store with WhatsApp.')
    whatsapp_user_id: str = Field(..., description="The user's WhatsApp ID.")


class MediaResource(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the media resource was created',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    expires_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the media resource will expire and be deleted.',
        examples=['2020-01-23T18:10:02.574Z'],
    )
    media_name: Optional[str] = Field(
        None, description='Uniquely identifies a media resource.'
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the media resource was last updated',
        examples=['2019-01-23T18:10:02.574Z'],
    )


class RecordType55(Enum):
    whatsapp_message_id = 'whatsapp_message_id'


class Message(BaseModel):
    id: Optional[str] = None
    record_type: Optional[RecordType55] = Field(
        None, description='Identifies the type of the resource.'
    )


class MessageBody(BaseModel):
    message_body: Optional[str] = Field(
        None,
        description='Text of the message. This is available only for last 7 days',
        examples=['This is message text'],
    )
    record_type: Optional[str] = Field('message_body', examples=['message_body'])


class MessageCost(BaseModel):
    amount: Optional[float] = Field(
        None,
        description='Final cost. Cost is calculated as rate * parts',
        examples=[0.1],
    )
    currency: Optional[Currency] = None


class Direction11(Enum):
    inbound = 'inbound'
    outbound = 'outbound'


class MessageType2(Enum):
    SMS = 'SMS'
    MMS = 'MMS'
    RCS = 'RCS'


class Status26(Enum):
    gw_timeout = 'gw_timeout'
    delivered = 'delivered'
    dlr_unconfirmed = 'dlr_unconfirmed'
    dlr_timeout = 'dlr_timeout'
    received = 'received'
    gw_reject = 'gw_reject'
    failed = 'failed'


class MessageDetailRecord(BaseModel):
    carrier: Optional[str] = Field(
        None,
        description='Country-specific carrier used to send or receive the message',
        examples=['T-Mobile USA'],
    )
    carrier_fee: Optional[str] = Field(
        None,
        description='Fee charged by certain carriers in order to deliver certain message types. Telnyx passes this fee on to the customer according to our pricing table',
        examples=['0.003'],
    )
    cld: Optional[str] = Field(
        None,
        description='The recipient of the message (to parameter in the Messaging API)',
        examples=['+1555123456'],
    )
    cli: Optional[str] = Field(
        None,
        description='The sender of the message (from parameter in the Messaging API). For Alphanumeric ID messages, this is the sender ID value',
        examples=['+1555123456'],
    )
    completed_at: Optional[datetime_aliased] = Field(
        None, description='Message completion time', examples=['2020-07-01T00:00:00Z']
    )
    cost: Optional[str] = Field(
        None,
        description='Amount, in the user currency, for the Telnyx billing cost',
        examples=['0.003'],
    )
    country_code: Optional[str] = Field(
        None,
        description='Two-letter representation of the country of the cld property using the ISO 3166-1 alpha-2 format',
        examples=['US'],
    )
    created_at: Optional[datetime_aliased] = Field(
        None, description='Message creation time', examples=['2020-07-01T00:00:00Z']
    )
    currency: Optional[str] = Field(
        None,
        description='Telnyx account currency used to describe monetary values, including billing cost',
        examples=['USD'],
    )
    delivery_status: Optional[str] = Field(
        None,
        description='Final webhook delivery status',
        examples=['success: webhook succeeded'],
    )
    delivery_status_failover_url: Optional[str] = Field(
        None,
        description='Failover customer-provided URL which Telnyx posts delivery status webhooks to',
        examples=['https://api.example.com/sms/telnyx/inbound'],
    )
    delivery_status_webhook_url: Optional[str] = Field(
        None,
        description='Primary customer-provided URL which Telnyx posts delivery status webhooks to',
        examples=['https://api.example.com/sms/telnyx/inbound'],
    )
    direction: Optional[Direction11] = Field(
        None,
        description="Logical direction of the message from the Telnyx customer's perspective. It's inbound when the Telnyx customer receives the message, or outbound otherwise",
        examples=['outbound'],
    )
    errors: Optional[List[str]] = Field(
        None, description='Telnyx API error codes returned by the Telnyx gateway'
    )
    fteu: Optional[bool] = Field(
        None,
        description='Indicates whether this is a Free-To-End-User (FTEU) short code message',
        examples=[False],
    )
    mcc: Optional[str] = Field(
        None,
        description='Mobile country code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID',
        examples=['204'],
    )
    message_type: Optional[MessageType2] = Field(
        None,
        description='Describes the Messaging service used to send the message. Available services are: Short Message Service (SMS), Multimedia Messaging Service (MMS), and Rich Communication Services (RCS)',
        examples=['SMS'],
    )
    mnc: Optional[str] = Field(
        None,
        description='Mobile network code. Only available for certain products, such as Global Outbound-Only from Alphanumeric Sender ID',
        examples=['01'],
    )
    on_net: Optional[bool] = Field(
        None,
        description='Indicates whether both sender and recipient numbers are Telnyx-managed',
        examples=[True],
    )
    parts: Optional[int] = Field(
        None,
        description='Number of message parts. The message is broken down in multiple parts when its length surpasses the limit of 160 characters',
        examples=[2],
    )
    profile_id: Optional[str] = Field(
        None,
        description='Unique identifier of the Messaging Profile used to send or receive the message',
        examples=['30ef55db-c4a2-4c4a-9804-a68077973d07'],
    )
    profile_name: Optional[str] = Field(
        None,
        description='Name of the Messaging Profile used to send or receive the message',
        examples=['My Messaging Profile'],
    )
    rate: Optional[str] = Field(
        None,
        description='Currency amount per billing unit used to calculate the Telnyx billing cost',
        examples=['0.003'],
    )
    record_type: Literal['MessageDetailRecord'] = Field(
        ...,
        description='Identifies the record schema',
        examples=['message_detail_record'],
    )
    sent_at: Optional[datetime_aliased] = Field(
        None,
        description='Time when the message was sent',
        examples=['2020-07-01T00:00:00Z'],
    )
    source_country_code: Optional[str] = Field(
        None,
        description='Two-letter representation of the country of the cli property using the ISO 3166-1 alpha-2 format',
        examples=['US'],
    )
    status: Optional[Status26] = Field(
        None,
        description='Final status of the message after the delivery attempt',
        examples=['delivered'],
    )
    tags: Optional[str] = Field(
        None,
        description='Comma-separated tags assigned to the Telnyx number associated with the message',
        examples=['tag1,tag2,tag3'],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None, description='Message updated time', examples=['2020-07-01T00:00:00Z']
    )
    user_id: Optional[str] = Field(
        None,
        description='Identifier of the Telnyx account who owns the message',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    uuid: Optional[str] = Field(
        None,
        description='Unique identifier of the message',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )


class MessageRate(BaseModel):
    amount: Optional[float] = Field(
        None, description='Rate applied to the message', examples=[0.1]
    )
    currency: Optional[Currency] = None


class MessageStatus(Enum):
    GW_TIMEOUT = 'GW_TIMEOUT'
    DELIVERED = 'DELIVERED'
    DLR_UNCONFIRMED = 'DLR_UNCONFIRMED'
    DLR_TIMEOUT = 'DLR_TIMEOUT'
    RECEIVED = 'RECEIVED'
    GW_REJECT = 'GW_REJECT'
    FAILED = 'FAILED'


class MessageType(Enum):
    audio = 'audio'
    contacts = 'contacts'
    document = 'document'
    hsm = 'hsm'
    image = 'image'
    location = 'location'
    template = 'template'
    text = 'text'
    video = 'video'
    voice = 'voice'
    unknown = 'unknown'


class MessagingFeatureSet(BaseModel):
    domestic_two_way: bool = Field(
        ...,
        description='Send messages to and receive messages from numbers in the same country.',
    )
    international_inbound: bool = Field(
        ..., description='Receive messages from numbers in other countries.'
    )
    international_outbound: bool = Field(
        ..., description='Send messages to numbers in other countries.'
    )


class Status27(Enum):
    failed = 'failed'
    pending = 'pending'
    successful = 'successful'


class MessagingHostedNumberOrder(BaseModel):
    id: Optional[UUID] = Field(None, description='Resource unique identifier.')
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Automatically associate the number with this messaging profile ID when the order is complete.',
    )
    phone_numbers: Optional[List[HostedNumber]] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['messaging_hosted_number_order'],
    )
    status: Optional[Status27] = None


class RecordType56(Enum):
    messaging_profile = 'messaging_profile'


class WebhookApiVersion10(Enum):
    field_1 = '1'
    field_2 = '2'
    field_2010_04_01 = '2010-04-01'


class Inbound3(BaseModel):
    received: Optional[float] = Field(
        None, description='The number of inbound messages received.'
    )


class Outbound3(BaseModel):
    delivered: Optional[float] = Field(
        None, description='The number of outbound messages successfully delivered.'
    )
    error_ratio: Optional[float] = Field(
        None, description='The ratio of messages sent that resulted in errors.'
    )
    sent: Optional[float] = Field(
        None, description='The number of outbound messages sent.'
    )


class RecordType57(Enum):
    messaging_profile_metrics = 'messaging_profile_metrics'


class MessagingProfileHighLevelMetrics(BaseModel):
    inbound: Optional[Inbound3] = None
    messaging_profile_id: Optional[UUID] = Field(
        None, description='Identifies the type of resource.'
    )
    outbound: Optional[Outbound3] = None
    phone_numbers: Optional[float] = Field(
        None,
        description='The number of phone numbers associated with the messaging profile.',
    )
    record_type: Optional[RecordType57] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['messaging_profile_metrics'],
    )


class MessagingProfileMessageTypeMetrics(BaseModel):
    delivered: Optional[float] = Field(
        None, description='The number of outbound messages successfully delivered.'
    )
    label: Optional[str] = Field(None, description='The metric type.')
    outbound_error_ratio: Optional[float] = Field(
        None, description='The ratio of outbound messages sent that resulted in errors.'
    )
    received: Optional[float] = Field(
        None, description='The number of inbound messages received.'
    )
    sent: Optional[float] = Field(
        None, description='The number of outbound messages sent.'
    )


class MessagingUrlDomain(BaseModel):
    id: Optional[str] = None
    record_type: Optional[str] = None
    url_domain: Optional[str] = None
    use_case: Optional[str] = None


class Meta(BaseModel):
    page_number: Optional[int] = Field(None, examples=[2])
    page_size: Optional[int] = Field(None, examples=[25])
    total_pages: Optional[int] = Field(None, examples=[3])
    total_results: Optional[int] = Field(None, examples=[55])


class Metadata(BaseModel):
    page_number: Optional[float] = Field(
        None,
        description='Current Page based on pagination settings (included when defaults are used.)',
        examples=[3],
    )
    page_size: Optional[float] = Field(
        None,
        description='Number of results to return per page based on pagination settings (included when defaults are used.)',
        examples=[1],
    )
    total_pages: Optional[float] = Field(
        None,
        description='Total number of pages based on pagination settings',
        examples=[13],
    )
    total_results: Optional[float] = Field(
        None, description='Total number of results', examples=[13]
    )


class MobileOperatorNetwork(BaseModel):
    country_code: Optional[str] = Field(
        None,
        description='The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.',
        examples=['US'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    mcc: Optional[str] = Field(
        None,
        description="MCC stands for Mobile Country Code. It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
        examples=['310'],
    )
    mnc: Optional[str] = Field(
        None,
        description="MNC stands for Mobile Network Code. It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
        examples=['410'],
    )
    name: Optional[str] = Field(
        None,
        description='The operator network name.',
        examples=['AT&T Mobility (USACG)'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['mobile_operator_network'],
    )
    tadig: Optional[str] = Field(
        None,
        description='TADIG stands for Transferred Account Data Interchange Group. The TADIG code is a unique identifier for network operators in GSM mobile networks.',
        examples=['USACG'],
    )


class MobileOperatorNetworkPreferencesRequest(BaseModel):
    mobile_operator_network_id: Optional[UUID] = Field(
        None,
        description='The mobile operator network resource identification UUID.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    priority: Optional[int] = Field(
        None,
        description='It determines what is the priority of a specific operator network that should be assumed by a SIM card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.',
        examples=[0],
    )


class MobileOperatorNetworkPreferencesResponse(BaseModel):
    mobile_operator_network_id: Optional[UUID] = Field(
        None,
        description='The mobile operator network resource identification UUID.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    mobile_operator_network_name: Optional[str] = Field(
        None,
        description='The mobile operator network resource name.',
        examples=['AT&T Mobility (USACG)'],
    )
    priority: Optional[int] = Field(
        None,
        description='It determines what is the priority of a specific operator network that should be assumed by a SIM card when connecting to a network. The highest priority is 0, the second highest is 1 and so on.',
        examples=[0],
    )


class MobileOperatorNetworksPreferencesRequest(
    RootModel[List[MobileOperatorNetworkPreferencesRequest]]
):
    root: List[MobileOperatorNetworkPreferencesRequest] = Field(
        ...,
        description='A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.',
    )


class MobileOperatorNetworksPreferencesResponse(
    RootModel[List[MobileOperatorNetworkPreferencesResponse]]
):
    root: List[MobileOperatorNetworkPreferencesResponse] = Field(
        ...,
        description='A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.',
    )


class Money(BaseModel):
    amount: Optional[str] = Field(None, examples=['0.06'])
    currency: Optional[Currency1] = None


class Name(BaseModel):
    first_name: Optional[str] = Field(None, description='First name')
    formatted_name: str = Field(..., description='Full name as it normally appears')
    last_name: Optional[str] = Field(None, description='Last name')
    prefix: Optional[str] = Field(None, description='Name preffix')
    suffix: Optional[str] = Field(None, description='Name suffix')


class NewBillingGroup(BaseModel):
    name: Optional[str] = Field(None, description='A name for the billing group')


class NewLedgerBillingGroupReport(BaseModel):
    month: Optional[int] = Field(
        None, description='Month of the ledger billing group report', examples=[10]
    )
    year: Optional[int] = Field(
        None, description='Year of the ledger billing group report', examples=[2019]
    )


class ChannelTypeId(Enum):
    sms = 'sms'
    voice = 'voice'
    email = 'email'
    webhook = 'webhook'


class NotificationChannel(BaseModel):
    channel_destination: Optional[str] = Field(
        None,
        description='The destination associated with the channel type.',
        examples=['+13125550000'],
    )
    channel_type_id: Optional[ChannelTypeId] = Field(
        None, description='A Channel Type ID'
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    id: Optional[str] = Field(
        None, description='A UUID.', examples=['12455643-3cf1-4683-ad23-1cd32f7d5e0a']
    )
    notification_profile_id: Optional[str] = Field(
        None,
        description='A UUID reference to the associated Notification Profile.',
        examples=['12455643-3cf1-4683-ad23-1cd32f7d5e0a'],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class NotificationEvent(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    enabled: Optional[bool] = Field(None, examples=[True])
    id: Optional[str] = Field(
        None, description='A UUID.', examples=['d5c395cd-9864-4609-b5e2-3f9fd4ce201a']
    )
    name: Optional[str] = Field(
        None, description='A human readable name.', examples=['Emergency Number Dialed']
    )
    notification_category: Optional[str] = Field(None, examples=['Calls'])
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class AssociatedRecordType(Enum):
    account = 'account'
    phone_number = 'phone_number'


class Parameter(BaseModel):
    data_type: Optional[str] = Field(None, examples=['string'])
    name: Optional[str] = Field(None, examples=['phone_number'])
    optional: Optional[bool] = Field(None, examples=[False])


class NotificationEventCondition(BaseModel):
    allow_multiple_channels: Optional[bool] = Field(
        None,
        description='Dictates whether a notification channel id needs to be provided when creating a notficiation setting.',
        examples=[False],
    )
    associated_record_type: Optional[AssociatedRecordType] = Field(
        None, examples=['phone_number']
    )
    asynchronous: Optional[bool] = Field(
        None,
        description='Dictates whether a notification setting will take effect immediately.',
        examples=[True],
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    description: Optional[str] = Field(
        None, examples=['When emergency number dialed from phone number X']
    )
    enabled: Optional[bool] = Field(None, examples=[True])
    id: Optional[str] = Field(
        None, description='A UUID.', examples=['70c7c5cb-dce2-4124-accb-870d39dbe852']
    )
    name: Optional[str] = Field(None, examples=['from phone number'])
    notification_event_id: Optional[str] = Field(
        None, examples=['d5c395cd-9864-4609-b5e2-3f9fd4ce201a']
    )
    parameters: Optional[List[Parameter]] = None
    supported_channels: Optional[List[str]] = Field(
        None,
        description='Dictates the supported notification channel types that can be emitted.',
        examples=[['webhook', 'sms', 'email', 'voice']],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class NotificationProfile(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    id: Optional[str] = Field(
        None, description='A UUID.', examples=['12455643-3cf1-4683-ad23-1cd32f7d5e0a']
    )
    name: Optional[str] = Field(None, description='A human readable name.')
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class Parameter1(BaseModel):
    name: Optional[str] = Field(None, examples=['phone_number'])
    value: Optional[str] = Field(None, examples=['+13125550000'])


class Status28(Enum):
    enabled = 'enabled'
    enable_received = 'enable-received'
    enable_pending = 'enable-pending'
    enable_submtited = 'enable-submtited'
    delete_received = 'delete-received'
    delete_pending = 'delete-pending'
    delete_submitted = 'delete-submitted'
    deleted = 'deleted'


class NotificationSetting(BaseModel):
    associated_record_type: Optional[str] = Field(None, examples=['phone_number'])
    associated_record_type_value: Optional[str] = Field(None, examples=['+13125550000'])
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2019-10-15T10:07:15.527Z'],
    )
    id: Optional[str] = Field(
        None, description='A UUID.', examples=['8eb5b5f9-5893-423c-9f15-b487713d44d4']
    )
    notification_channel_id: Optional[str] = Field(
        None,
        description='A UUID reference to the associated Notification Channel.',
        examples=['12455643-3cf1-4683-ad23-1cd32f7d5e0a'],
    )
    notification_event_condition_id: Optional[str] = Field(
        None,
        description='A UUID reference to the associated Notification Event Condition.',
        examples=['70c7c5cb-dce2-4124-accb-870d39dbe852'],
    )
    notification_profile_id: Optional[str] = Field(
        None,
        description='A UUID reference to the associated Notification Profile.',
        examples=['12455643-3cf1-4683-ad23-1cd32f7d5e0a'],
    )
    parameters: Optional[List[Parameter1]] = None
    status: Optional[Status28] = Field(
        None,
        description='Most preferences apply immediately; however, other may needs to propagate.',
        examples=['enable-received'],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2019-10-15T10:07:15.527Z'],
    )


class Status29(Enum):
    pending = 'pending'
    success = 'success'
    failure = 'failure'


class NumberBlockOrder(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection associated to all numbers in the phone number block.',
        examples=['346789098765567'],
    )
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated to all numbers in the phone number block.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[1],
    )
    range: Optional[int] = Field(
        None, description='The phone number range included in the block.', examples=[10]
    )
    record_type: Optional[str] = Field(None, examples=['number_block_order'])
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    starting_number: Optional[str] = Field(
        None, description='Starting phone number block', examples=['+19705555000']
    )
    status: Optional[Status29] = Field(
        None, description='The status of the order.', examples=['success']
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class NumberHealthMetrics(BaseModel):
    inbound_outbound_ratio: float = Field(
        ...,
        description='The ratio of messages received to the number of messages sent.',
    )
    message_count: int = Field(
        ..., description='The number of messages analyzed for the health metrics.'
    )
    spam_ratio: float = Field(
        ...,
        description='The ratio of messages blocked for spam to the number of messages attempted.',
    )
    success_ratio: float = Field(
        ...,
        description='The ratio of messages sucessfully delivered to the number of messages attempted.',
    )


class NumberOrder(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection associated with this phone number.',
        examples=['346789098765567'],
    )
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[1],
    )
    record_type: Optional[str] = Field(None, examples=['number_order'])
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    status: Optional[Status29] = Field(None, description='The status of the order.')
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class NumberOrderBlockEvent(BaseModel):
    data: Optional[NumberBlockOrder] = None


class NumberOrderDocument(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order document was uploaded.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    file_id: Optional[str] = Field(
        None,
        description='The id of the file to associate as a number order document.',
        examples=['1e3c5822-0362-4702-8e46-5a129f0d3976'],
    )
    id: Optional[UUID] = Field(None, examples=['387d1e31-a218-4375-8151-103f2d5e2d2c'])
    record_type: Optional[str] = Field(None, examples=['number_order_document'])
    requirement_type: Optional[RequirementType] = None
    requirements_id: Optional[str] = Field(
        None,
        description='Unique id for a requirement.',
        examples=['36aaf27d-986b-493c-bd1b-de16af2e4292'],
    )


class PhoneNumberType2(Enum):
    local = 'local'
    toll_free = 'toll-free'
    mobile = 'mobile'
    national = 'national'
    shared_cost = 'shared-cost'


class RecordType58(Enum):
    event = 'event'


class NumberOrdered(BaseModel):
    event_type: Optional[str] = Field(
        None,
        description='The type of event being delivered.',
        examples=['number_order.complete'],
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    payload: Optional[NumberOrder] = None
    record_type: Optional[RecordType58] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class NumberOrderedEvent(BaseModel):
    data: Optional[NumberOrdered] = None


class NumberPoolSettings(BaseModel):
    geomatch: Optional[bool] = Field(
        False,
        description='If set to true, Number Pool will try to choose a sending number with the same area code as the destination\nnumber. If there are no such numbers available, a nunber with a different area code will be chosen. Currently\nonly NANP numbers are supported.\n',
    )
    long_code_weight: float = Field(
        ...,
        description='Defines the probability weight for a Long Code number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100.  Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n',
        examples=[1],
    )
    skip_unhealthy: bool = Field(
        ...,
        description='If set to true all unhealthy numbers will be automatically excluded from the pool.\nHealth metrics per number are calculated on a regular basis, taking into account the deliverability\nrate and the amount of messages marked as spam by upstream carriers.\nNumbers with a deliverability rate below 25% or spam ratio over 75% will be considered unhealthy.\n',
        examples=[True],
    )
    sticky_sender: Optional[bool] = Field(
        False,
        description='If set to true, Number Pool will try to choose the same sending number for all messages to a particular\nrecipient. If the sending number becomes unhealthy and `skip_unhealthy` is set to true, a new\nnumber will be chosen.\n',
    )
    toll_free_weight: float = Field(
        ...,
        description='Defines the probability weight for a Toll Free number to be selected when sending a message.\nThe higher the weight the higher the probability. The sum of the weights for all number types\ndoes not necessarily need to add to 100. Weight must be a non-negative number, and when equal\nto zero it will remove the number type from the pool.\n',
        examples=[10],
    )


class Organization(BaseModel):
    company: str = Field(..., description="Name of the contact's company")
    department: Optional[str] = Field(
        None, description="Name of the contact's department"
    )
    title: Optional[str] = Field(None, description="Contact's business title")


class CallRecordingChannels(Enum):
    single = 'single'
    dual = 'dual'


class CallRecordingFormat(Enum):
    wav = 'wav'
    mp3 = 'mp3'


class CallRecordingType(Enum):
    all = 'all'
    none = 'none'
    by_caller_phone_number = 'by_caller_phone_number'


class OutboundCallRecording(BaseModel):
    call_recording_caller_phone_numbers: Optional[List[str]] = Field(
        None,
        description="When call_recording_type is 'by_caller_phone_number', only outbound calls using one of these numbers will be recorded. Numbers must be specified in E164 format.",
        examples=[['+19705555098']],
    )
    call_recording_channels: Optional[CallRecordingChannels] = Field(
        'single',
        description="When using 'dual' channels, the final audio file will be a stereo recording with the first leg on channel A, and the rest on channel B.",
        examples=['dual'],
    )
    call_recording_format: Optional[CallRecordingFormat] = Field(
        'wav',
        description='The audio file format for calls being recorded.',
        examples=['mp3'],
    )
    call_recording_type: Optional[CallRecordingType] = Field(
        None, description='Specifies which calls are recorded.'
    )


class IpAuthenticationMethod(Enum):
    tech_prefixp_charge_info = 'tech-prefixp-charge-info'
    token = 'token'


class EventType40(Enum):
    message_sent = 'message.sent'
    message_finalized = 'message.finalized'


class Meta1(BaseModel):
    attempt: Optional[int] = Field(
        None,
        description='Number of attempts to deliver the webhook event.',
        examples=[1],
    )
    delivered_to: Optional[str] = Field(
        None,
        description='The webhook URL the event was delivered to.',
        examples=['https://www.example.com/hooks'],
    )


class Direction12(Enum):
    outbound = 'outbound'


class From1(BaseModel):
    carrier: Optional[str] = Field(None, description='The carrier of the receiver.')
    line_type: Optional[LineType] = Field(
        None, description='The line-type of the receiver.'
    )
    phone_number: Optional[str] = Field(
        None,
        description='Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).',
    )


class MediaItem1(BaseModel):
    content_type: Optional[str] = Field(
        None, description='The MIME type of the requested media.'
    )
    sha256: Optional[str] = Field(
        None, description='The SHA256 hash of the requested media.'
    )
    size: Optional[int] = Field(None, description='The size of the requested media.')
    url: Optional[str] = Field(
        None, description='The url of the media requested to be sent.'
    )


class RecordType60(Enum):
    message = 'message'


class Status33(Enum):
    queued = 'queued'
    sending = 'sending'
    sent = 'sent'
    expired = 'expired'
    sending_failed = 'sending_failed'
    delivery_unconfirmed = 'delivery_unconfirmed'
    delivered = 'delivered'
    delivery_failed = 'delivery_failed'


class ToItem1(BaseModel):
    carrier: Optional[str] = Field(None, description='The carrier of the receiver.')
    line_type: Optional[LineType] = Field(
        None, description='The line-type of the receiver.'
    )
    phone_number: Optional[str] = Field(
        None,
        description='Receiving address (+E.164 formatted phone number or short code).',
    )
    status: Optional[Status33] = Field(
        None, description='The delivery status of the message.'
    )


class OutboundMessagePayload(BaseModel):
    completed_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the message was finalized.',
    )
    cost: Optional[Cost] = None
    direction: Optional[Direction12] = Field(
        None,
        description='The direction of the message. Inbound messages are sent to you whereas outbound messages are sent from you.',
        examples=['outbound'],
    )
    encoding: Optional[str] = Field(
        None, description='Encoding scheme used for the message body.'
    )
    errors: Optional[List[Error]] = Field(
        None,
        description='These errors may point at addressees when referring to unsuccessful/unconfirmed delivery statuses.',
    )
    from_: Optional[From1] = Field(None, alias='from')
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    media: Optional[List[MediaItem1]] = None
    messaging_profile_id: Optional[str] = Field(
        None, description='Unique identifier for a messaging profile.'
    )
    organization_id: Optional[UUID] = Field(
        None, description='The id of the organization the messaging profile belongs to.'
    )
    parts: Optional[conint(ge=1, le=10)] = Field(
        None, description="Number of parts into which the message's body must be split."
    )
    received_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the message request was received.',
    )
    record_type: Optional[RecordType60] = Field(
        None, description='Identifies the type of the resource.', examples=['message']
    )
    sent_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the message was sent.',
    )
    subject: Optional[str] = Field(None, description='Subject of multimedia message')
    tags: Optional[List[str]] = Field(
        None, description='Tags associated with the resource.'
    )
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: Optional[List[ToItem1]] = None
    type: Optional[Type8] = Field(None, description='The type of message.')
    valid_until: Optional[datetime_aliased] = Field(
        None,
        description="Message must be out of the queue by this time or else it will be discarded and marked as 'sending_failed'. Once the message moves out of the queue, this field will be nulled",
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class OutboundVoiceProfileId(RootModel[str]):
    root: str = Field(
        ...,
        description='Identifies the associated outbound voice profile.',
        examples=['1293384261075731499'],
        title='Outbound Voice Profile ID',
    )


class PaginationMeta(BaseModel):
    page_number: Optional[int] = Field(None, examples=[2])
    page_size: Optional[int] = Field(None, examples=[25])
    total_pages: Optional[int] = Field(None, examples=[3])
    total_results: Optional[int] = Field(None, examples=[55])


class PaginationMetaSimple(BaseModel):
    page_number: Optional[int] = Field(None, examples=[2])
    page_size: Optional[int] = Field(None, examples=[25])
    total_pages: Optional[int] = Field(None, examples=[3])
    total_results: Optional[int] = Field(None, examples=[55])


class Conference1(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Uniquely identifies the conference',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    name: Optional[str] = Field(
        None, description='Name of the conference', examples=['All hands meeting']
    )


class RecordType61(Enum):
    participant = 'participant'


class Status34(Enum):
    joining = 'joining'
    joined = 'joined'
    left = 'left'


class Participant(BaseModel):
    call_control_id: str = Field(
        ...,
        description='Call Control ID associated with the partiipant of the conference',
        examples=[
            'v2:v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ'
        ],
    )
    call_leg_id: str = Field(
        ...,
        description='Uniquely identifies the call leg associated with the participant',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    conference: Conference1 = Field(
        ..., description='Info about the conference that the participant is in'
    )
    created_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the participant was created',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    end_conference_on_exit: bool = Field(
        ...,
        description='Whether the conference will end and all remaining participants be hung up after the participant leaves the conference.',
        examples=[True],
    )
    id: str = Field(
        ...,
        description='Uniquely identifies the participant',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    muted: bool = Field(
        ..., description='Whether the participant is muted.', examples=[True]
    )
    on_hold: bool = Field(
        ..., description='Whether the participant is put on_hold.', examples=[True]
    )
    record_type: RecordType61 = Field(..., examples=['participant'])
    soft_end_conference_on_exit: bool = Field(
        ...,
        description='Whether the conference will end after the participant leaves the conference.',
        examples=[True],
    )
    status: Status34 = Field(
        ...,
        description='The status of the participant with respect to the lifecycle within the conference',
        examples=['joining'],
    )
    updated_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the participant was last updated',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    whisper_call_control_ids: List[str] = Field(
        ...,
        description='Array of unique call_control_ids the participant can whisper to..',
        examples=[
            [
                'v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ',
                'v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw',
            ]
        ],
    )


class PassThroughFee(BaseModel):
    amount: Optional[float] = Field(
        None, description='Normalized carrier pass through fee', examples=[0.1]
    )
    currency: Optional[Currency] = None


class PauseRecordingRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class Phone(BaseModel):
    id: Optional[str] = Field(None, description='WhatsApp ID')
    phone: Optional[str] = None
    type: Optional[str] = Field(
        None, description='Standard Values: CELL, MAIN, IPHONE, HOME, WORK'
    )


class Status35(Enum):
    pending = 'pending'
    success = 'success'
    failure = 'failure'


class Status36(Enum):
    pending = 'pending'
    in_progress = 'in_progress'
    completed = 'completed'
    failed = 'failed'


class Type10(Enum):
    delete_phone_number_block = 'delete_phone_number_block'


class PhoneNumberBlocksJobDeletePhoneNumberBlockRequest(BaseModel):
    phone_number_block_id: str


class PhoneNumberBlocksJobFailedOperation(BaseModel):
    errors: Optional[List[Error]] = None
    id: Optional[str] = Field(None, description="The phone number's ID")
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class PhoneNumberBlocksJobSuccessfulOperation(BaseModel):
    id: Optional[str] = Field(None, description="The phone number's ID")
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class NumberLevelRouting(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class PhoneNumberType3(Enum):
    longcode = 'longcode'
    tollfree = 'tollfree'


class Status37(Enum):
    purchase_pending = 'purchase-pending'
    purchase_failed = 'purchase-failed'
    port_pending = 'port-pending'
    port_failed = 'port-failed'
    active = 'active'
    deleted = 'deleted'
    emergency_only = 'emergency-only'
    ported_out = 'ported-out'
    port_out_pending = 'port-out-pending'


class PhoneNumberDeletedDetailed(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the billing group associated with the phone number.',
    )
    call_forwarding_enabled: Optional[bool] = Field(
        True,
        description='Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.',
    )
    call_recording_enabled: Optional[bool] = Field(
        None, description='Indicates whether call recording is enabled for this number.'
    )
    caller_id_name_enabled: Optional[bool] = Field(
        None, description='Indicates whether caller ID is enabled for this number.'
    )
    cnam_listing_enabled: Optional[bool] = Field(
        None, description='Indicates whether a CNAM listing is enabled for this number.'
    )
    connection_id: Optional[str] = Field(
        None, description='Identifies the connection associated with the phone number.'
    )
    connection_name: Optional[str] = Field(
        None,
        description='The user-assigned name of the connection to be associated with this phone number.',
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the time it took to activate after the purchase.',
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    emergency_address_id: Optional[str] = Field(
        None,
        description='Identifies the emergency address associated with the phone number.',
    )
    emergency_enabled: Optional[bool] = Field(
        None,
        description='Indicates whether emergency services are enabled for this number.',
    )
    external_pin: Optional[str] = Field(
        None,
        description='If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism.',
    )
    id: Optional[IntId] = None
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
    )
    messaging_profile_name: Optional[str] = Field(
        None,
        description='The name of the messaging profile associated with the phone number.',
        examples=['regional-customers'],
    )
    number_level_routing: Optional[NumberLevelRouting] = Field(
        'enabled',
        description='Specifies whether the number can have overrides to the routing settings on itself (enabled) or if it uses the associated connection for all routing settings (disabled). Defaults to enabled but will be changed to disabled in the future. There are performance advantages to using disabled and setting all routing information at the connection level.',
    )
    phone_number: Optional[str] = Field(
        None,
        description='The +E.164-formatted phone number associated with this record.',
    )
    phone_number_type: Optional[PhoneNumberType3] = Field(
        None, description="The phone number's type."
    )
    purchased_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating the time the request was made to purchase the number.',
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['phone_number'],
    )
    status: Optional[Status37] = Field(
        None, description="The phone number's current status."
    )
    t38_fax_gateway_enabled: Optional[bool] = Field(
        None,
        description='Indicates whether T38 Fax Gateway for inbound calls to this number.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='A list of user-assigned tags to help manage the phone number.',
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class PhoneNumberDetailed(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the billing group associated with the phone number.',
    )
    call_forwarding_enabled: Optional[bool] = Field(
        True,
        description='Indicates if call forwarding will be enabled for this number if forwards_to and forwarding_type are filled in. Defaults to true for backwards compatibility with APIV1 use of numbers endpoints.',
    )
    call_recording_enabled: Optional[bool] = Field(
        None, description='Indicates whether call recording is enabled for this number.'
    )
    caller_id_name_enabled: Optional[bool] = Field(
        None, description='Indicates whether caller ID is enabled for this number.'
    )
    cnam_listing_enabled: Optional[bool] = Field(
        None, description='Indicates whether a CNAM listing is enabled for this number.'
    )
    connection_id: Optional[str] = Field(
        None, description='Identifies the connection associated with the phone number.'
    )
    connection_name: Optional[str] = Field(
        None,
        description='The user-assigned name of the connection to be associated with this phone number.',
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    emergency_address_id: Optional[str] = Field(
        None,
        description='Identifies the emergency address associated with the phone number.',
    )
    emergency_enabled: Optional[bool] = Field(
        None,
        description='Indicates whether emergency services are enabled for this number.',
    )
    external_pin: Optional[str] = Field(
        None,
        description='If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, Telnyx will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism.',
    )
    id: Optional[IntId] = None
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
    )
    messaging_profile_name: Optional[str] = Field(
        None,
        description='The name of the messaging profile associated with the phone number.',
        examples=['regional-customers'],
    )
    number_level_routing: Optional[NumberLevelRouting] = Field(
        'enabled',
        description='Specifies whether the number can have overrides to the routing settings on itself (enabled) or if it uses the associated connection for all routing settings (disabled). Defaults to enabled but will be changed to disabled in the future. There are performance advantages to using disabled and setting all routing information at the connection level.',
    )
    phone_number: Optional[str] = Field(
        None,
        description='The +E.164-formatted phone number associated with this record.',
    )
    phone_number_type: Optional[PhoneNumberType3] = Field(
        None, description="The phone number's type."
    )
    purchased_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was purchased.',
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['phone_number'],
    )
    status: Optional[Status37] = Field(
        None, description="The phone number's current status."
    )
    t38_fax_gateway_enabled: Optional[bool] = Field(
        None,
        description='Indicates whether T38 Fax Gateway for inbound calls to this number.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='A list of user-assigned tags to help manage the phone number.',
    )


class PhoneNumberEnableEmergencyRequest(BaseModel):
    emergency_address_id: str = Field(
        ..., description='Identifies the address to be used with emergency services.'
    )
    emergency_enabled: bool = Field(
        ...,
        description='Indicates whether to enable emergency services on this number.',
    )


class Features(BaseModel):
    mms: Optional[MessagingFeatureSet] = None
    sms: Optional[MessagingFeatureSet] = None


class RecordType62(Enum):
    messaging_phone_number = 'messaging_phone_number'
    messaging_settings = 'messaging_settings'


class Type11(Enum):
    long_code = 'long-code'
    toll_free = 'toll-free'
    short_code = 'short-code'
    longcode = 'longcode'
    tollfree = 'tollfree'
    shortcode = 'shortcode'


class PhoneNumberWithMessagingSettings(BaseModel):
    country_code: Optional[constr(pattern=r'^[A-Z]{2}$')] = Field(
        None, description='ISO 3166-1 alpha-2 country code.', examples=['US']
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    eligible_messaging_products: Optional[List[str]] = Field(
        None,
        description='The messaging products that this number can be registered to use',
    )
    features: Optional[Features] = None
    health: Optional[NumberHealthMetrics] = None
    id: Optional[str] = Field(None, description='Identifies the type of resource.')
    messaging_product: Optional[str] = Field(
        None,
        description='The messaging product that the number is registered to use',
        examples=['P2P'],
    )
    messaging_profile_id: Optional[str] = Field(
        None, description='Unique identifier for a messaging profile.'
    )
    phone_number: Optional[str] = Field(
        None, description='+E.164 formatted phone number.'
    )
    record_type: Optional[RecordType62] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['messaging_settings'],
    )
    traffic_type: Optional[str] = Field(
        None,
        description='The messaging traffic or use case for which the number is currently configured.',
        examples=['P2P'],
    )
    type: Optional[Type11] = Field(None, description='The type of the phone number')
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class UsagePaymentMethod1(Enum):
    pay_per_minute = 'pay-per-minute'
    channel = 'channel'


class PhoneNumberWithVoiceSettings(BaseModel):
    call_forwarding: Optional[CallForwarding] = None
    call_recording: Optional[CallRecording] = None
    cnam_listing: Optional[CnamListing] = None
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection associated with this phone number.',
        examples=['1d0e6cb8-8668-462e-94c6-49ae0f0ed48b'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    emergency: Optional[EmergencySettings] = None
    id: Optional[str] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['1293384261075731499'],
    )
    media_features: Optional[MediaFeatures] = None
    phone_number: Optional[str] = Field(
        None, description='The phone number in +E164 format.', examples=['+13035551234']
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['voice_settings'],
    )
    tech_prefix_enabled: Optional[bool] = Field(
        False,
        description='Controls whether a tech prefix is enabled for this phone number.',
        examples=[False],
    )
    translated_number: Optional[str] = Field(
        '',
        description='This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed.',
        examples=['+13035559999'],
    )
    usage_payment_method: Optional[UsagePaymentMethod1] = Field(
        'pay-per-minute',
        description='Controls whether a number is billed per minute or uses your concurrent channels.',
        examples=['pay-per-minute'],
    )


class PhoneNumbersBulkUpdateError(BaseModel):
    errors: Optional[List[Error]] = None
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class Status39(Enum):
    pending = 'pending'
    in_progress = 'in_progress'
    completed = 'completed'
    failed = 'failed'
    expired = 'expired'


class Type12(Enum):
    update_emergency_settings = 'update_emergency_settings'
    delete_phone_numbers = 'delete_phone_numbers'
    update_phone_numbers = 'update_phone_numbers'


class PhoneNumbersJobDeletePhoneNumbersRequest(BaseModel):
    phone_numbers: List[str]


class PhoneNumbersJobFailedOperation(BaseModel):
    errors: Optional[List[Error]] = None
    id: Optional[str] = Field(None, description="The phone number's ID")
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class PhoneNumbersJobPendingOperation(BaseModel):
    id: Optional[str] = Field(None, description="The phone number's ID")
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class PhoneNumbersJobSuccessfulOperation(BaseModel):
    id: Optional[str] = Field(None, description="The phone number's ID")
    phone_number: Optional[str] = Field(
        None, description='The phone number in e164 format.'
    )


class PhoneNumbersJobUpdateEmergencySettingsRequest(BaseModel):
    emergency_address_id: str = Field(
        ..., description='Identifies the address to be used with emergency services.'
    )
    emergency_enabled: bool = Field(
        ...,
        description='Indicates whether to enable emergency services on this number.',
    )
    phone_numbers: List[str]


class PhoneNumbersJobUpdatePhoneNumbersRequest(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the billing group associated with the phone number.',
    )
    connection_id: Optional[str] = Field(
        None, description='Identifies the connection associated with the phone number.'
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    external_pin: Optional[str] = Field(
        None,
        description='If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism.',
    )
    phone_numbers: List[str] = Field(
        ...,
        description='Array of phone number ids and/or phone numbers in E164 format to update',
    )
    tags: Optional[List[str]] = Field(
        None, description='A list of user-assigned tags to help organize phone numbers.'
    )


class PlayAudioUrlRequest(BaseModel):
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played back on the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    loop: Optional[Loopcount] = Field(
        default_factory=lambda: Loopcount.model_validate(1),
        description='The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.',
        examples=['infinity'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played back on the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    overlay: Optional[bool] = Field(
        False,
        description='When enabled, audio will be mixed on top of any other audio that is actively being played back. Note that `overlay: true` will only work if there is another audio file already being played on the call.',
        examples=[True],
    )
    stop: Optional[str] = Field(
        'all',
        description='When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.',
        examples=['current'],
    )
    target_legs: Optional[str] = Field(
        'self',
        description='Specifies the leg or legs on which audio will be played. If supplied, the value must be either `self`, `opposite` or `both`.',
        examples=['self'],
    )


class PlaybackStopRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    stop: Optional[str] = Field(
        'all',
        description='Use `current` to stop only the current audio or `all` to stop all audios in the queue.',
        examples=['current'],
    )


class PortedStatus(Enum):
    Y = 'Y'
    N = 'N'
    field_ = ''


class Portability(BaseModel):
    altspid: Optional[str] = Field(
        None,
        description='Alternative SPID (Service Provider ID). Often used when a carrier is using a number from another carrier',
        examples=['073H'],
    )
    altspid_carrier_name: Optional[str] = Field(
        None, description='Alternative service provider name', examples=['Telnyx/4']
    )
    altspid_carrier_type: Optional[str] = Field(
        None, description='Alternative service provider type', examples=['3']
    )
    city: Optional[str] = Field(
        None,
        description='City name extracted from the locality in the Local Exchange Routing Guide (LERG) database',
        examples=['WAUKEGAN'],
    )
    line_type: Optional[str] = Field(
        None, description='Type of number', examples=['voip']
    )
    lrn: Optional[str] = Field(
        None,
        description='Local Routing Number, if assigned to the requested phone number',
        examples=['2245701999'],
    )
    ocn: Optional[str] = Field(
        None,
        description='Operating Company Name (OCN) as per the Local Exchange Routing Guide (LERG) database',
        examples=['073H'],
    )
    ported_date: Optional[str] = Field(
        None,
        description='ISO-formatted date when the requested phone number has been ported',
        examples=['2017-10-20'],
    )
    ported_status: Optional[PortedStatus] = Field(
        None,
        description='Indicates whether or not the requested phone number has been ported',
        examples=['Y'],
    )
    spid: Optional[str] = Field(
        None, description='SPID (Service Provider ID)', examples=['073H']
    )
    spid_carrier_name: Optional[str] = Field(
        None, description='Service provider name', examples=['Telnyx/4']
    )
    spid_carrier_type: Optional[str] = Field(
        None, description='Service provider type', examples=['3']
    )
    state: Optional[str] = Field(None, examples=['Illinois'])


class PortabilityCheckDetails(BaseModel):
    fast_portable: Optional[bool] = Field(
        None,
        description='Indicates whether this phone number is FastPort eligible',
        examples=[True],
    )
    not_portable_reason: Optional[str] = Field(
        None,
        description='If this phone number is not portable, explains why. Empty string if the number is portable.',
        examples=['No coverage'],
    )
    phone_number: Optional[str] = Field(
        None,
        description='The +E.164 formatted phone number this result is about',
        examples=['+13125550123'],
    )
    portable: Optional[bool] = Field(
        None,
        description='Indicates whether this phone number is portable',
        examples=[True],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['portability_check_result'],
    )


class PortabilityStatus(Enum):
    pending = 'pending'
    confirmed = 'confirmed'
    provisional = 'provisional'


class PortingOrderActivationSettings(BaseModel):
    activation_status: Optional[ActivationStatus] = None
    fast_port_eligible: Optional[bool] = Field(
        None,
        description='Indicates whether this porting order is eligible for FastPort',
        examples=[True],
    )
    foc_datetime_actual: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted Date/Time of the FOC date',
        examples=['2021-03-19T10:07:15.527Z'],
    )
    foc_datetime_requested: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted Date/Time requested for the FOC date',
        examples=['2021-03-19T10:07:15.527Z'],
    )


class PortingOrderEndUserAdmin(BaseModel):
    account_number: Optional[str] = Field(
        None,
        description="The authorized person's account number with the current service provider",
        examples=['123abc'],
    )
    auth_person_name: Optional[str] = Field(
        None,
        description='Name of person authorizing the porting order',
        examples=['Porter McPortersen II'],
    )
    billing_phone_number: Optional[str] = Field(
        None,
        description='Billing phone number associated with these phone numbers',
        examples=[13035551234],
    )
    business_identifier: Optional[str] = Field(
        None,
        description='European business identification number. Applicable only in the European Union',
        examples=['abc123'],
    )
    entity_name: Optional[str] = Field(
        None,
        description='Person Name or Company name requesting the port',
        examples=['Porter McPortersen'],
    )
    pin_passcode: Optional[str] = Field(
        None,
        description='PIN/passcode possibly required by the old service provider for extra verification',
        examples=[1234],
    )
    tax_identifier: Optional[str] = Field(
        None,
        description='European tax identification number. Applicable only in the European Union',
        examples=['1234abcd'],
    )


class PortingOrderEndUserLocation(BaseModel):
    administrative_area: Optional[str] = Field(
        None,
        description='State, province, or similar of billing address',
        examples=['IL'],
    )
    country_code: Optional[str] = Field(
        None,
        description='ISO3166-1 alpha-2 country code of billing address',
        examples=['US'],
    )
    extended_address: Optional[str] = Field(
        None, description='Second line of billing address', examples=['Suite 504']
    )
    locality: Optional[str] = Field(
        None,
        description='City or municipality of billing address',
        examples=['Chicago'],
    )
    postal_code: Optional[str] = Field(
        None, description='Postal Code of billing address', examples=[60654]
    )
    street_address: Optional[str] = Field(
        None,
        description='First line of billing address',
        examples=['311 W. Superior St'],
    )


class PortingOrderPhoneNumberConfiguration(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='identifies the connection to set on the numbers when ported',
        examples=['f1486bae-f067-460c-ad43-73a92848f902'],
    )
    emergency_address_id: Optional[str] = Field(
        None,
        description='identifies the emergency address to set on the numbers when ported',
        examples=['f1486bae-f067-460c-ad43-73a92848f902'],
    )
    messaging_profile_id: Optional[str] = Field(
        None,
        description='identifies the messaging profile to set on the numbers when ported',
        examples=['f1486bae-f067-460c-ad43-73a92848f901'],
    )
    tags: Optional[List[str]] = Field(None, examples=[['abc', '123']])


class FieldType(Enum):
    document = 'document'


class PortingOrderRequirement(BaseModel):
    field_type: Optional[FieldType] = Field(
        None,
        description='Type of value expected on field_value field',
        examples=['document'],
    )
    field_value: Optional[str] = Field(
        None,
        description='identifies the document that satisfies this requirement',
        examples=['9787fb5f-cbe5-4de4-b765-3303774ee9fe'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['porting_requirement'],
    )
    requirement_type_id: Optional[str] = Field(
        None,
        description='Identifies the requirement type that meets this requirement',
        examples=['59b0762a-b274-4f76-ac32-4d5cf0272e66'],
    )


class Value(Enum):
    draft = 'draft'
    in_process = 'in-process'
    submitted = 'submitted'
    exception = 'exception'
    foc_date_confirmed = 'foc-date-confirmed'
    ported = 'ported'
    canceled = 'canceled'
    cancel_pending = 'cancel-pending'


class PortingOrderType(Enum):
    full = 'full'
    partial = 'partial'


class PortingOrderUserFeedback(BaseModel):
    user_comment: Optional[str] = Field(
        None,
        description='A comment related to the customer rating.',
        examples=['I loved my experience porting numbers with Telnyx'],
    )
    user_rating: Optional[int] = Field(
        None,
        description='Once an order is ported, cancellation is requested or the request is canceled, the user may rate their experience',
        examples=[5],
    )


class Status40(Enum):
    created = 'created'
    in_process = 'in-process'
    completed = 'completed'
    failed = 'failed'


class PortingOrdersActivationJob(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2021-03-19T10:07:15.527Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Uniquely identifies this activation job',
        examples=['f1486bae-f067-460c-ad43-73a92848f902'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['porting_activation_job'],
    )
    status: Optional[Status40] = Field(
        None, description='Specifies the status of this activation job'
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2021-03-19T10:07:15.527Z'],
    )


class UserType(Enum):
    admin = 'admin'
    user = 'user'
    system = 'system'


class PortingOrdersComment(BaseModel):
    body: Optional[str] = Field(
        None, description='Body of comment', examples=['Great experience so far']
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2021-03-19T10:07:15.527Z'],
    )
    id: Optional[UUID] = Field(None, examples=['f1486bae-f067-460c-ad43-73a92848f902'])
    porting_order_id: Optional[UUID] = Field(
        None, examples=['f1486bae-f067-460c-ad43-73a92848f902']
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['porting_comment'],
    )
    user_type: Optional[UserType] = Field(
        None,
        description='Indicates whether this comment was created by a Telnyx Admin, user, or system',
        examples=['user'],
    )


class Code(Enum):
    ACCOUNT_NUMBER_MISMATCH = 'ACCOUNT_NUMBER_MISMATCH'
    AUTH_PERSON_MISMATCH = 'AUTH_PERSON_MISMATCH'
    BTN_ATN_MISMATCH = 'BTN_ATN_MISMATCH'
    ENTITY_NAME_MISMATCH = 'ENTITY_NAME_MISMATCH'
    FOC_EXPIRED = 'FOC_EXPIRED'
    FOC_REJECTED = 'FOC_REJECTED'
    LOCATION_MISMATCH = 'LOCATION_MISMATCH'
    LSR_PENDING = 'LSR_PENDING'
    MAIN_BTN_PORTING = 'MAIN_BTN_PORTING'
    OSP_IRRESPONSIVE = 'OSP_IRRESPONSIVE'
    OTHER = 'OTHER'
    PASSCODE_PIN_INVALID = 'PASSCODE_PIN_INVALID'
    PHONE_NUMBER_HAS_SPECIAL_FEATURE = 'PHONE_NUMBER_HAS_SPECIAL_FEATURE'
    PHONE_NUMBER_MISMATCH = 'PHONE_NUMBER_MISMATCH'
    PHONE_NUMBER_NOT_PORTABLE = 'PHONE_NUMBER_NOT_PORTABLE'
    PORT_TYPE_INCORRECT = 'PORT_TYPE_INCORRECT'
    PORTING_ORDER_SPLIT_REQUIRED = 'PORTING_ORDER_SPLIT_REQUIRED'
    PORTING_ORDER_SPLIT_REQUIRED_1 = 'PORTING_ORDER_SPLIT_REQUIRED'
    POSTAL_CODE_MISMATCH = 'POSTAL_CODE_MISMATCH'
    RATE_CENTER_NOT_PORTABLE = 'RATE_CENTER_NOT_PORTABLE'
    SV_CONFLICT = 'SV_CONFLICT'
    SV_UNKNOWN_FAILURE = 'SV_UNKNOWN_FAILURE'


class PortingOrdersExceptionType(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='Identifier of an exception type',
        examples=['ENTITY_NAME_MISMATCH'],
    )
    description: Optional[str] = Field(
        None,
        description='Description of an exception type',
        examples=['Entity name does not match that on the CSR'],
    )


class PortoutComment(BaseModel):
    body: str = Field(..., description='Comment body', examples=['This is a comment'])
    created_at: str = Field(
        ...,
        description='Comment creation timestamp in ISO 8601 format',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: str = Field(..., examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'])
    portout_id: Optional[str] = Field(
        None,
        description='Identifies the associated port request',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['portout']
    )
    user_id: str = Field(
        ...,
        description='Identifies the user who created the comment. Will be null if created by Telnyx Admin',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )


class Status41(Enum):
    pending = 'pending'
    authorized = 'authorized'
    ported = 'ported'
    rejected = 'rejected'
    rejected_pending = 'rejected-pending'
    canceled = 'canceled'


class PortoutDetails(BaseModel):
    carrier_name: Optional[str] = Field(
        None, description='Carrier the number will be ported out to', examples=['test']
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the portout was created',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    foc_date: Optional[str] = Field(
        None,
        description='ISO 8601 formatted Date/Time of the FOC date',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[str] = Field(None, examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'])
    phone_numbers: Optional[List[str]] = Field(
        None,
        description='Phone numbers associated with this portout',
        examples=[['+35312345678']],
    )
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['portout']
    )
    requested_foc_date: Optional[str] = Field(
        None,
        description='ISO 8601 formatted Date/Time of the user requested FOC date',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    spid: Optional[str] = Field(
        None,
        description='New service provider spid',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    status: Optional[Status41] = Field(
        None, description='Status of portout request', examples=['rejected']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the portout was last updated',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class PrivateWirelessGatewayRequest(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The private wireless gateway name.',
        examples=['My private wireless gateway'],
    )
    network_id: Optional[UUID] = Field(
        None,
        description='The identification of the related network resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )


class Value1(Enum):
    provisioning = 'provisioning'
    provisioned = 'provisioned'
    failed = 'failed'
    decommissioning = 'decommissioning'


class PrivateWirelessGatewayStatus(BaseModel):
    error_code: Optional[str] = Field(
        None,
        description='This attribute is an <a href="https://developers.telnyx.com/docs/api/v2/overview#errors">error code</a> related to the failure reason.',
        examples=[None],
    )
    error_description: Optional[str] = Field(
        None,
        description='This attribute provides a human-readable explanation of why a failure happened.',
        examples=[None],
    )
    value: Optional[Value1] = Field(
        'provisioning',
        description='The current status or failure details of the Private Wireless Gateway. <ul>\n <li><code>provisioning</code> - the Private Wireless Gateway is being provisioned.</li>\n <li><code>provisioned</code> - the Private Wireless Gateway was provisioned and able to receive connections.</li>\n <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.</li>\n <li><code>decommissioning</code> - the Private Wireless Gateway is being removed from the network.</li>\n </ul>\n Transitioning between the provisioning and provisioned states may take some time.',
        examples=['provisioned'],
    )


class Product(Enum):
    LONG_CODE = 'LONG_CODE'
    SHORT_CODE = 'SHORT_CODE'
    SHORT_CODE_FTEU = 'SHORT_CODE_FTEU'
    TOLL_FREE = 'TOLL_FREE'
    ALPHANUMERIC_ID = 'ALPHANUMERIC_ID'
    RCS = 'RCS'


class RecordType63(Enum):
    queue = 'queue'


class Queue(BaseModel):
    average_wait_time_secs: int = Field(
        ...,
        description='The average time that the calls currently in the queue have spent waiting, given in seconds.',
        examples=[175],
    )
    created_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the queue was created',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    current_size: int = Field(
        ..., description='The number of calls currently in the queue', examples=[20]
    )
    id: str = Field(
        ...,
        description='Uniquely identifies the queue',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    max_size: int = Field(
        ...,
        description='The maximum number of calls allowed in the queue',
        examples=[50],
    )
    name: str = Field(..., description='Name of the queue', examples=['support'])
    record_type: RecordType63 = Field(..., examples=['queue'])
    updated_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the queue was last updated',
        examples=['2019-01-23T18:10:02.574Z'],
    )


class RecordType64(Enum):
    queue_call = 'queue_call'


class QueueCall(BaseModel):
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: str = Field(
        ...,
        description='ID that is unique to the call and can be used to correlate webhook events',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: str = Field(
        ...,
        description='ID that is unique to the call session and can be used to correlate webhook events',
        examples=['428c31b6-7af4-4bcb-b68e-5013ef9657c1'],
    )
    connection_id: str = Field(
        ...,
        description='Telnyx connection ID used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    enqueued_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the call was put in the queue',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    from_: str = Field(
        ...,
        alias='from',
        description='Number or SIP URI placing the call.',
        examples=['+35319605860'],
    )
    queue_id: str = Field(
        ...,
        description='Unique identifier of the queue the call is in.',
        examples=['ae1626cc-6f42-11ea-becd-02420a0f8b69'],
    )
    queue_position: int = Field(
        ..., description='Current position of the call in the queue', examples=[3]
    )
    record_type: RecordType64 = Field(..., examples=['queue_call'])
    to: str = Field(
        ...,
        description='Destination number or SIP URI of the call.',
        examples=['+13129457420'],
    )
    wait_time_secs: int = Field(
        ...,
        description='The time the call has been waiting in the queue, given in seconds',
        examples=[272],
    )


class ReadComment(Comment):
    read_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the comment was read.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class DownloadUrls(BaseModel):
    mp3: Optional[str] = Field(
        None, description='Link to download the recording in mp3 format'
    )
    wav: Optional[str] = Field(
        None, description='Link to download the recording in wav format'
    )


class RecordType65(Enum):
    recording = 'recording'


class Source1(Enum):
    conference = 'conference'
    call = 'call'


class Status42(Enum):
    completed = 'completed'


class Recording(BaseModel):
    call_leg_id: Optional[str] = Field(
        None,
        description='If a call recording, uniquely identifies the recorded call leg',
        examples=['11111111-5717-4562-b3fc-2c963f66afa6'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='If a call recording, uniquely identifies the recorded call session',
        examples=['22222222-5717-4562-b3fc-2c963f66afa6'],
    )
    channels: Channels = Field(
        ...,
        description='When `dual`, final audio file has the first leg on channel A, and the rest on channel B.',
        examples=['single'],
    )
    conference_id: Optional[str] = Field(
        None,
        description='If a conference recording, uniquely identifies the recorded conference',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    created_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the recording was created',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    download_urls: DownloadUrls = Field(
        ..., description='The links to download the recording files'
    )
    duration_millis: int = Field(
        ...,
        description='The duration of the recording in milliseconds',
        examples=[60000],
    )
    id: str = Field(
        ...,
        description='Uniquely identifies the recording',
        examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'],
    )
    record_type: RecordType65 = Field(..., examples=['recording'])
    recording_ended_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the recording ended',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    recording_started_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the recording started',
        examples=['2019-01-23T18:10:02.574Z'],
    )
    source: Source1 = Field(
        ...,
        description='The kind of event that led to this recording being created',
        examples=['conference'],
    )
    status: Status42 = Field(
        ...,
        description='The status of the recording. Only resources for `completed` recordings are currently supported',
        examples=['completed'],
    )
    updated_at: str = Field(
        ...,
        description='ISO 8601 formatted date of when the recording was last updated',
        examples=['2019-01-23T18:10:02.574Z'],
    )


class ReferRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    custom_headers: Optional[List[CustomSipHeader]] = Field(
        None,
        description='Custom headers to be added to the SIP INVITE.',
        examples=[
            [{'name': 'head_1', 'value': 'val_1'}, {'name': 'head_2', 'value': 'val_2'}]
        ],
    )
    sip_address: str = Field(
        ...,
        description='The SIP URI to which the call will be referred to.',
        examples=['sip:username@sip.non-telnyx-address.com'],
    )
    sip_auth_password: Optional[str] = Field(
        None, description='SIP Authentication password used for SIP challenges.'
    )
    sip_auth_username: Optional[str] = Field(
        None, description='SIP Authentication username used for SIP challenges.'
    )


class RefreshRoomClientTokenRequest(BaseModel):
    refresh_token: str = Field(
        ...,
        examples=[
            'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ'
        ],
    )
    token_ttl_secs: Optional[conint(ge=10, le=3600)] = Field(
        600,
        description="The time to live in seconds of the Client Token, after that time the Client Token is invalid and can't be used to join a Room.",
        examples=[600],
    )


class RegionType(Enum):
    country_code = 'country_code'
    rate_center = 'rate_center'
    state = 'state'
    location = 'location'


class RegionInformation(BaseModel):
    region_name: Optional[str] = Field(None, examples=['US'])
    region_type: Optional[RegionType] = Field(None, examples=['country_code'])


class Cause(Enum):
    CALL_REJECTED = 'CALL_REJECTED'
    USER_BUSY = 'USER_BUSY'


class RejectRequest(BaseModel):
    cause: Cause = Field(
        ..., description='Cause for call rejection.', examples=['USER_BUSY']
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class RemainingNumbersAction(Enum):
    keep = 'keep'
    disconnect = 'disconnect'


class ReplacedLinkClick(BaseModel):
    message_id: Optional[UUID] = Field(
        None, description='The message ID associated with the clicked link.'
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['link_clicked'],
    )
    time_clicked: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the message request was received.',
    )
    to: Optional[str] = Field(
        None,
        description='Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).',
    )
    url: Optional[str] = Field(
        None,
        description='The original link that was sent in the message.',
        examples=['link_clicked'],
    )


class ReplacedLinkClickEvent(BaseModel):
    data: Optional[ReplacedLinkClick] = None


class Status43(Enum):
    pending = 'pending'
    success = 'success'
    failure = 'failure'


class ReservedPhoneNumber(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the individual number reservation was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    expired_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the individual number reservation is going to expire',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    phone_number: Optional[str] = Field(None, examples=['+19705555098'])
    record_type: Optional[str] = Field(None, examples=['reserved_phone_number'])
    status: Optional[Status43] = Field(
        None,
        description="The status of the phone number's reservation.",
        examples=['success'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the the individual number reservation was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class ResumeRecordingRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class RoomParticipant(BaseModel):
    context: Optional[str] = Field(
        None,
        description='Context provided to the given participant through the client SDK',
        examples=['Alice'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the room participant.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    joined_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the participant joined the session.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )
    left_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the participant left the session.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )
    record_type: Optional[str] = Field(None, examples=['room_participant'])
    session_id: Optional[UUID] = Field(
        None,
        description='Identify the room session that participant is part of.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777b0'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the participant was updated.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )


class RoomSession(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Shows if the room session is active or not.',
        examples=[False],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the room session was created.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )
    ended_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the room session has ended.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the room session.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    participants: Optional[List[RoomParticipant]] = None
    record_type: Optional[str] = Field(None, examples=['room_session'])
    room_id: Optional[UUID] = Field(
        None,
        description='Identify the room hosting that room session.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777b0'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the room session was updated.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )


class Status44(Enum):
    registering = 'registering'
    enabling = 'enabling'
    enabled = 'enabled'
    disabling = 'disabling'
    disabled = 'disabled'
    data_limit_exceeded = 'data_limit_exceeded'


class SIMCard(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    iccid: Optional[str] = Field(
        None,
        description="The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
        examples=['89310410106543789301'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    imsi: Optional[str] = Field(
        None,
        description='SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n',
        examples=[81932214823362980],
    )
    ipv4: Optional[str] = Field(
        None,
        description="The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
        examples=['192.168.0.0'],
    )
    ipv6: Optional[str] = Field(
        None,
        description="The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
        examples=['2001:cdba:0000:0000:0000:0000:3257:9652'],
    )
    msisdn: Optional[str] = Field(
        None,
        description="Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
        examples=['+13109976224'],
    )
    record_type: Optional[str] = Field(None, examples=['sim_card'])
    sim_card_group_id: Optional[UUID] = Field(
        None,
        description="The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status44] = Field(
        None,
        description='The current status of the SIM card. It will be one of the following: <br/>\n<ul>\n <li><code>registering</code> - the card is being registered</li>\n <li><code>enabling</code> - the card is being enabled</li>\n <li><code>enabled</code> - the card is enabled and ready for use</li>\n <li><code>disabling</code> - the card is being disabled</li>\n <li><code>disabled</code> - the card has been disabled and cannot be used</li>\n <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>\n</ul>\nTransitioning between the enabled and disabled states may take a period of time.\n',
        examples=['enabled'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Searchable tags associated with the SIM card',
        examples=[['personal', 'customers', 'active-customers']],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class SIMCardGroup(BaseModel):
    consumed_data: Optional[ConsumedData] = None
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    data_limit: Optional[int] = Field(
        None,
        description='Upper limit on the amount of data the SIM cards, within the group, can use.',
        examples=[2048],
    )
    default: Optional[bool] = Field(
        None,
        description='Indicates whether the SIM card group is the users default group.<br/>The default group is created for the user and can not be removed.',
        examples=[True],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    name: Optional[str] = Field(
        None,
        description='A user friendly name for the SIM card group.',
        examples=['My Test Group'],
    )
    private_wireless_gateway_id: Optional[UUID] = Field(
        None,
        description='The identification of the related Private Wireless Gateway resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['sim_card_group'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Settings2(BaseModel):
    private_wireless_gateway_id: Optional[UUID] = Field(
        None,
        description='The identification of the related Private Wireless Gateway resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )


class Status45(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class Type13(Enum):
    set_private_wireless_gateway = 'set_private_wireless_gateway'
    remove_private_wireless_gateway = 'remove_private_wireless_gateway'


class SIMCardGroupAction(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(None, examples=['sim_card_group_action'])
    settings: Optional[Settings2] = Field(
        None, description='A JSON object representation of the action params.'
    )
    sim_card_group_id: Optional[UUID] = Field(
        None,
        description='The SIM card group identification.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status45] = Field(None, examples=['in-progress'])
    type: Optional[Type13] = Field(
        None,
        description='Represents the type of the operation requested.',
        examples=['set_private_wireless_gateway'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class SIMCardGroupCreate(BaseModel):
    data_limit: Optional[int] = Field(
        None,
        description='Upper limit on the amount of data the SIM cards, within the group, can use.',
        examples=[2048],
    )
    name: str = Field(
        ...,
        description='A user friendly name for the SIM card group.',
        examples=['My Test Group'],
    )


class SIMCardGroupPatch(BaseModel):
    data_limit: Optional[int] = Field(
        None,
        description='Upper limit on the amount of data the SIM cards, within the group, can use.',
        examples=[2048],
    )
    name: Optional[str] = Field(
        None,
        description='A user friendly name for the SIM card group.',
        examples=['My Test Group'],
    )


class SIMCardNetworkPreference(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    mobile_operator_networks_preferences: Optional[
        MobileOperatorNetworksPreferencesResponse
    ] = None
    record_type: Optional[str] = Field(None, examples=['sim_card_network_preferences'])
    sim_card_id: Optional[UUID] = Field(
        None, examples=['6b14e151-8493-4fa1-8664-1cc4e6d14158']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Cost2(BaseModel):
    amount: Optional[str] = Field(
        None, description='A string representing the cost amount.', examples=['2.32']
    )
    currency: Optional[str] = Field(
        None, description='Filter by ISO 4217 currency string.', examples=['USD']
    )


class OrderAddress(BaseModel):
    administrative_area: Optional[str] = Field(
        None,
        description='State or province where the address is located.',
        examples=['IL'],
    )
    country_code: Optional[str] = Field(
        None,
        description='The mobile operator two-character (ISO 3166-1 alpha-2) origin country code.',
        examples=['US'],
    )
    extended_address: Optional[str] = Field(
        None,
        description='Supplemental field for address information.',
        examples=['Suite 504'],
    )
    id: Optional[str] = Field(
        None,
        description='Uniquely identifies the address for the order.',
        examples=['1293384261075731499'],
    )
    locality: Optional[str] = Field(
        None,
        description='The name of the city where the address is located.',
        examples=['Chicago'],
    )
    postal_code: Optional[str] = Field(
        None, description='Postal code for the address.', examples=['60654']
    )
    street_address: Optional[str] = Field(
        None,
        description='The name of the street where the address is located.',
        examples=['311 W Superior St'],
    )


class Status46(Enum):
    pending = 'pending'
    processing = 'processing'
    ready_to_ship = 'ready_to_ship'
    shipped = 'shipped'
    delivered = 'delivered'


class SIMCardOrder(BaseModel):
    cost: Optional[Cost2] = Field(
        None,
        description='An object representing the total cost of the order.',
        examples=[{'amount': '2.52', 'currency': 'USD'}],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was last created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    order_address: Optional[OrderAddress] = Field(
        None,
        description='An object representing the address information from when the order was submitted.',
        examples=[
            {
                'administrative_area': 'IL',
                'country_code': 'US',
                'extended_address': 'Suite 504',
                'id': '1293384261075731499',
                'locality': 'Chicago',
                'postal_code': '60654',
                'street_address': '311 W Superior St',
            }
        ],
    )
    quantity: Optional[conint(ge=1)] = Field(
        None,
        description='The amount of SIM cards requested in the SIM card order.',
        examples=[21],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['sim_card_order'],
    )
    status: Optional[Status46] = Field(
        None,
        description='The current status of the SIM Card order.<ul> <li><code>pending</code> - the order is waiting to be processed.</li> <li><code>processing</code> - the order is currently being processed.</li> <li><code>ready_to_ship</code> - the order is ready to be shipped to the specified <b>address</b>.</li> <li><code>shipped</code> - the order was shipped and is on its way to be delivered to the specified <b>address</b>.</li> <li><code>delivered</code> - the order was delivered to the specified <b>address</b>.</li> </ul>',
        examples=['pending'],
    )
    tracking_url: Optional[str] = Field(
        None,
        description='The URL used to get tracking information about the order.',
        examples=['http://www.example.com/'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was last updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ShippingCost(BaseModel):
    amount: Optional[str] = Field(
        None, description='A string representing the cost amount.', examples=['2.32']
    )
    currency: Optional[str] = Field(
        None, description='ISO 4217 currency string.', examples=['USD']
    )


class SimCardsCost(BaseModel):
    amount: Optional[str] = Field(
        None, description='A string representing the cost amount.', examples=['2.32']
    )
    currency: Optional[str] = Field(
        None, description='ISO 4217 currency string.', examples=['USD']
    )


class TotalCost(BaseModel):
    amount: Optional[str] = Field(
        None, description='A string representing the cost amount.', examples=['2.32']
    )
    currency: Optional[str] = Field(
        None, description='ISO 4217 currency string.', examples=['USD']
    )


class SIMCardOrderPreview(BaseModel):
    quantity: Optional[int] = Field(
        None,
        description='The amount of SIM cards requested in the SIM card order.',
        examples=[21],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['sim_card_order_preview'],
    )
    shipping_cost: Optional[ShippingCost] = None
    sim_cards_cost: Optional[SimCardsCost] = None
    total_cost: Optional[TotalCost] = None


class Type14(Enum):
    ipv4 = 'ipv4'


class SIMCardPublicIPStatus(BaseModel):
    error_code: Optional[str] = Field(
        None,
        description='This attribute is an <a href="https://developers.telnyx.com/docs/api/v2/overview#errors">error code</a> related to the failure reason.',
        examples=[None],
    )
    error_description: Optional[str] = Field(
        None,
        description='This attribute provides a human-readable explanation of why a failure happened.',
        examples=[None],
    )
    value: Optional[Value1] = Field(
        'provisioning',
        description="The current status or failure details of the SIM card's public IP. <ul>\n <li><code>provisioning</code> - the IP is being provisioned.</li>\n <li><code>provisioned</code> - the IP was provisioned and the SIM is reachable on the public internet.</li>\n <li><code>failed</code> - the provisioning had failed for a reason and it requires an intervention.</li>\n <li><code>decommissioning</code> - the public IP is being removed from the SIM card.</li>\n </ul>\n Transitioning between the provisioning and provisioned states may take some time.",
        examples=['provisioned'],
    )


class Status47(Enum):
    enabled = 'enabled'
    disabled = 'disabled'
    standby = 'standby'


class SIMCardRegistration(BaseModel):
    registration_codes: List[str] = Field(
        ..., examples=[['0000000001', '0000000002', '0000000003']]
    )
    sim_card_group_id: Optional[UUID] = Field(
        None,
        description="The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status47] = Field(
        'enabled',
        description='Status on which the SIM card will be set after being successful registered.',
        examples=['standby'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Searchable tags associated with the SIM card',
        examples=[['personal', 'customers', 'active-customers']],
    )


class SIMCardRegistrationCodeValidation(BaseModel):
    invalid_detail: Optional[str] = Field(
        None,
        description='The validation message',
        examples=['This code has already been used.'],
    )
    record_type: Optional[str] = Field(
        None, examples=['sim_card_registration_code_validation']
    )
    registration_code: Optional[str] = Field(
        None,
        description='The 10-digit SIM card registration code',
        examples=[123456789],
    )
    valid: Optional[bool] = Field(
        None,
        description='The attribute that denotes whether the code is valid or not',
        examples=[False],
    )


class SIMCardRegistrationCodeValidations(BaseModel):
    data: Optional[List[SIMCardRegistrationCodeValidation]] = None


class SendDTMFRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    digits: str = Field(
        ...,
        description='DTMF digits to send. Valid digits are 0-9, A-D, *, and #. Pauses can be added using w (0.5s) and W (1s).',
        examples=['1www2WABCDw9'],
    )
    duration_millis: Optional[int] = Field(
        250,
        description='Specifies for how many milliseconds each digit will be played in the audio stream. Ranges from 100 to 500ms',
        examples=[500],
    )


class SendFaxMultipartRequest(BaseModel):
    connection_id: str = Field(
        ..., description='The connection ID to send the fax with.', examples=['234423']
    )
    contents: bytes = Field(
        ...,
        description='The file you want to upload. The maximum allowed size is 20 MB.',
    )
    from_: str = Field(
        ...,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    quality: Optional[str] = Field(
        'high',
        description='The quality of the fax. Can be normal, high, very_high.',
        examples=['high'],
    )
    store_media: Optional[bool] = Field(
        False, description='Should fax media be stored on temporary URL.'
    )
    to: str = Field(
        ...,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI.',
        examples=['+13127367276'],
    )


class SendFaxRequest(BaseModel):
    connection_id: str = Field(
        ..., description='The connection ID to send the fax with.', examples=['234423']
    )
    from_: str = Field(
        ...,
        alias='from',
        description='The phone number, in E.164 format, the fax will be sent from.',
        examples=['+13125790015'],
    )
    media_name: Optional[str] = Field(
        None,
        description="The media_name of a file to be used for the fax's media. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_url and media_name can't be submitted together.",
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    media_url: Optional[str] = Field(
        None,
        description="The URL to the PDF used for the fax's media. media_url and media_name can't be submitted together.",
        examples=[
            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
        ],
    )
    quality: Optional[str] = Field(
        'high',
        description='The quality of the fax. Can be normal, high, very_high.',
        examples=['high'],
    )
    store_media: Optional[bool] = Field(
        False,
        description="Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.",
    )
    to: str = Field(
        ...,
        description='The phone number, in E.164 format, the fax will be sent to or SIP URI.',
        examples=['+13127367276'],
    )


class ServicePlan(Enum):
    us = 'us'
    international = 'international'
    global_ = 'global'


class RecordType66(Enum):
    short_code = 'short_code'


class ShortCode(BaseModel):
    country_code: Optional[constr(pattern=r'^[A-Z]{2}$')] = Field(
        None, description='ISO 3166-1 alpha-2 country code.', examples=['US']
    )
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    messaging_profile_id: str = Field(
        ..., description='Unique identifier for a messaging profile.'
    )
    record_type: Optional[RecordType66] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['short_code'],
    )
    short_code: Optional[str] = Field(
        None, description='Short digit sequence used to address messages.'
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class SimCardOrderCreate(BaseModel):
    address_id: str = Field(
        ...,
        description='Uniquely identifies the address for the order.',
        examples=['1293384261075731499'],
    )
    quantity: conint(ge=1) = Field(
        ..., description='The amount of SIM cards to order.', examples=[23]
    )


class Status48(Enum):
    registering = 'registering'
    enabling = 'enabling'
    enabled = 'enabled'
    disabling = 'disabling'
    disabled = 'disabled'
    data_limit_exceeded = 'data_limit_exceeded'


class SimpleSIMCard(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    iccid: Optional[str] = Field(
        None,
        description="The ICCID is the identifier of the specific SIM card/chip. Each SIM is internationally identified by its integrated circuit card identifier (ICCID). ICCIDs are stored in the SIM card's memory and are also engraved or printed on the SIM card body during a process called personalization.\n",
        examples=['89310410106543789301'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    imsi: Optional[str] = Field(
        None,
        description='SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n',
        examples=[81932214823362980],
    )
    msisdn: Optional[str] = Field(
        None,
        description="Mobile Station International Subscriber Directory Number (MSISDN) is a number used to identify a mobile phone number internationally. <br/>\nMSISDN is defined by the E.164 numbering plan. It includes a country code and a National Destination Code which identifies the subscriber's operator.\n",
        examples=['+13109976224'],
    )
    record_type: Optional[str] = Field(None, examples=['sim_card'])
    sim_card_group_id: Optional[UUID] = Field(
        None,
        description="The group SIMCardGroup identification. This attribute can be <code>null</code> when it's present in an associated resource.",
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status48] = Field(
        None,
        description='The current status of the SIM card. It will be one of the following: <br/>\n<ul>\n <li><code>registering</code> - the card is being registered</li>\n <li><code>enabling</code> - the card is being enabled</li>\n <li><code>enabled</code> - the card is enabled and ready for use</li>\n <li><code>disabling</code> - the card is being disabled</li>\n <li><code>disabled</code> - the card has been disabled and cannot be used</li>\n <li><code>data_limit_exceeded</code> - the card has exceeded its data consumption limit</li>\n</ul>\nTransitioning between the enabled and disabled states may take a period of time.\n',
        examples=['enabled'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Searchable tags associated with the SIM card',
        examples=[['personal', 'customers', 'active-customers']],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Status49(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class Type15(Enum):
    sim_card_network_preferences = 'sim_card_network_preferences'


class SimplifiedOTAUpdate(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(None, examples=['ota_update'])
    sim_card_id: Optional[UUID] = Field(
        None,
        description='The identification UUID of the related SIM card resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status49] = Field(None, examples=['in-progress'])
    type: Optional[Type15] = Field(
        None,
        description='Represents the type of the operation requested. This will relate directly to the source of the request.',
        examples=['sim_card_network_preferences'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Language2(Enum):
    arb = 'arb'
    cmn_CN = 'cmn-CN'
    cy_GB = 'cy-GB'
    da_DK = 'da-DK'
    de_DE = 'de-DE'
    en_AU = 'en-AU'
    en_GB = 'en-GB'
    en_GB_WLS = 'en-GB-WLS'
    en_IN = 'en-IN'
    en_US = 'en-US'
    es_ES = 'es-ES'
    es_MX = 'es-MX'
    es_US = 'es-US'
    fr_CA = 'fr-CA'
    fr_FR = 'fr-FR'
    hi_IN = 'hi-IN'
    is_IS = 'is-IS'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    nb_NO = 'nb-NO'
    nl_NL = 'nl-NL'
    pl_PL = 'pl-PL'
    pt_BR = 'pt-BR'
    pt_PT = 'pt-PT'
    ro_RO = 'ro-RO'
    ru_RU = 'ru-RU'
    sv_SE = 'sv-SE'
    tr_TR = 'tr-TR'


class SpeakRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    language: Language2 = Field(
        ..., description='The language you want spoken.', examples=['en-US']
    )
    payload: str = Field(
        ...,
        description='The text or SSML to be converted into speech. There is a 5,000 character limit.',
        examples=['Say this on the call'],
    )
    payload_type: Optional[PayloadType] = Field(
        'text',
        description='The type of the provided payload. The payload can either be plain text, or Speech Synthesis Markup Language (SSML).',
        examples=['ssml'],
    )
    service_level: Optional[ServiceLevel] = Field(
        'premium',
        description='This parameter impacts speech quality, language options and payload types. When using `basic`, only the `en-US` language and payload type `text` are allowed.',
        examples=['premium'],
    )
    stop: Optional[str] = Field(
        None,
        description='When specified, it stops the current audio being played.  Specify `current` to stop the current audio being played, and to play the next file in the queue. Specify `all` to stop the current audio file being played and to also clear all audio files from the queue.',
        examples=['current'],
    )
    voice: Voice = Field(
        ...,
        description='The gender of the voice used to speak back the text.',
        examples=['female'],
    )


class StreamType(Enum):
    raw = 'raw'
    decrypted = 'decrypted'


class StartForkingRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    rx: Optional[str] = Field(
        None,
        description="The network target, <udp:ip_address:port>, where the call's incoming RTP media packets should be forwarded.",
        examples=['192.0.2.1:9000'],
    )
    stream_type: Optional[StreamType] = Field(
        'raw',
        description='Optionally specify a media type to stream. If `decrpyted` selected, Telnyx will decrypt incoming SIP media before forking to the target. `rx` and `tx` are required fields if `decrypted` selected.',
        examples=['decrypted'],
    )
    target: Optional[str] = Field(
        None,
        description="The network target, <udp:ip_address:port>, where the call's RTP media packets should be forwarded. Both incoming and outgoing media packets will be delivered to the specified target, and information about the stream will be included in the encapsulation protocol header, including the direction (0 = inbound; 1 = outbound), leg (0 = A-leg; 1 = B-leg), and call_leg_id.",
        examples=['udp:192.0.2.1:9000'],
    )
    tx: Optional[str] = Field(
        None,
        description="The network target, <udp:ip_address:port>, where the call's outgoing RTP media packets should be forwarded.",
        examples=['192.0.2.1:9001'],
    )


class StartRecordingRequest(BaseModel):
    channels: Channels = Field(
        ...,
        description='When `dual`, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.',
        examples=['single'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    format: Format = Field(
        ...,
        description='The audio file format used when storing the call recording. Can be either `mp3` or `wav`.',
        examples=['mp3'],
    )
    max_length: Optional[int] = Field(
        0,
        description='Defines the maximum length for the recording in seconds. Minimum value is 0. Maximum value is 14400. Default is 0 (infinite)',
        examples=[100],
    )
    play_beep: Optional[bool] = Field(
        None,
        description='If enabled, a beep sound will be played at the start of a recording.',
        examples=[True],
    )


class StopForkingRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class StopGatherRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class StopRecordingRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class PhoneNumberType5(Enum):
    local = 'local'
    toll_free = 'toll-free'
    mobile = 'mobile'
    national = 'national'
    shared_cost = 'shared-cost'


class FieldType1(Enum):
    textual = 'textual'
    datetime = 'datetime'
    address = 'address'
    document = 'document'


class SubNumberOrderRegulatoryRequirement(BaseModel):
    field_type: Optional[FieldType1] = Field(None, examples=['address'])
    record_type: Optional[str] = Field(
        None, examples=['phone_number_regulatory_requirement']
    )
    requirement_id: Optional[UUID] = Field(
        None,
        description='Unique id for a requirement.',
        examples=['8ffb3622-7c6b-4ccc-b65f-7a3dc0099576'],
    )


class TelephonyCredential(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    expired: Optional[bool] = Field(None, description='Defaults to false')
    expires_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the resource will expire.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[str] = Field(
        None,
        description='Identifies the resource.',
        examples=['c215ade3-0d39-418e-94be-c5f780760199'],
    )
    name: Optional[str] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['credential'],
    )
    resource_id: Optional[str] = Field(
        None,
        description='Identifies the resource this credential is associated with.',
        examples=['connection:1234567890'],
    )
    sip_password: Optional[str] = Field(
        None,
        description='The randomly generated SIP password for the credential.',
        examples=['a92dbcfb60184a8cb330b0acb2f7617b'],
    )
    sip_username: Optional[str] = Field(
        None,
        description='The randomly generated SIP username for the credential.',
        examples=['gencrednCvHU5IYpSBPPsXI2iQsDX'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class TelephonyCredentialCreateRequest(BaseModel):
    connection_id: str = Field(
        ...,
        description='Identifies the Credential Connection this credential is associated with.',
        examples=['1234567890'],
    )
    expires_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the credential will expire.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    name: Optional[str] = None
    tag: Optional[str] = Field(
        None,
        description='Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.',
        examples=['some_tag'],
    )


class TelephonyCredentialUpdateRequest(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the Credential Connection this credential is associated with.',
        examples=['987654321'],
    )
    expires_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the credential will expire.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    name: Optional[str] = None
    tag: Optional[str] = Field(
        None,
        description='Tags a credential to filter for bulk operations. A single tag can hold at maximum 1000 credentials.',
        examples=['some_tag'],
    )


class Type16(Enum):
    header = 'header'
    body = 'body'
    footer = 'footer'


class Type17(Enum):
    text = 'text'
    currency = 'currency'
    date_time = 'date_time'
    image = 'image'
    document = 'document'
    video = 'video'


class Inbound4(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class Outbound4(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class Text(BaseModel):
    body: str


class ToNumber(RootModel[str]):
    root: str = Field(
        ...,
        description='Receiving address (+E.164 formatted phone number or short code).',
        examples=['+E.164'],
    )


class TrafficType(Enum):
    conversational = 'conversational'
    short_duration = 'short_duration'


class EventType41(Enum):
    call_transcription = 'call.transcription'


class TranscriptionData(BaseModel):
    confidence: Optional[float] = Field(
        None, description='Speech recognition confidence level.', examples=[0.977219]
    )
    transcript: Optional[str] = Field(
        None, description='Recognized text.', examples=['hello this is a test speech']
    )


class Payload39(BaseModel):
    call_control_id: Optional[str] = Field(
        None,
        description='Unique identifier and token for controlling the call.',
        examples=['v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQ'],
    )
    call_leg_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call and can be used to correlate webhook events.',
        examples=['428c31b6-7af4-4bcb-b7f5-5013ef9657c1'],
    )
    call_session_id: Optional[str] = Field(
        None,
        description='ID that is unique to the call session and can be used to correlate webhook events.',
        examples=['428c31b6-abf3-3bc1-b7f4-5013ef9657c1'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Telnyx connection ID used in the call.',
        examples=['7267xxxxxxxxxxxxxx'],
    )
    transcription_data: Optional[TranscriptionData] = None


class RecordType67(Enum):
    event = 'event'


class Transcription(BaseModel):
    event_type: Optional[EventType41] = Field(
        None,
        description='The type of event being delivered.',
        examples=['call.transcription'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Payload39] = None
    record_type: Optional[RecordType67] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class TranscriptionEvent(BaseModel):
    data: Optional[Transcription] = None


class Language3(Enum):
    de = 'de'
    en = 'en'
    es = 'es'
    fr = 'fr'
    it = 'it'
    pl = 'pl'


class TranscriptionStartRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    language: Optional[Language3] = Field(
        'en', description='Language to use for speech recognition', examples=['en']
    )


class TranscriptionStopRequest(BaseModel):
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )


class TransferCallRequest(BaseModel):
    answering_machine_detection: Optional[AnsweringMachineDetection] = Field(
        'disabled',
        description="Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
    )
    answering_machine_detection_config: Optional[AnsweringMachineDetectionConfig] = (
        Field(
            None,
            description="Optional configuration parameters to modify 'answering_machine_detection' performance.",
        )
    )
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    custom_headers: Optional[List[CustomSipHeader]] = Field(
        None,
        description='Custom headers to be added to the SIP INVITE.',
        examples=[
            [{'name': 'head_1', 'value': 'val_1'}, {'name': 'head_2', 'value': 'val_2'}]
        ],
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.',
        examples=['+18005550101'],
    )
    from_display_name: Optional[str] = Field(
        None,
        description='The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.',
        examples=['Company Name'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    sip_auth_password: Optional[str] = Field(
        None,
        description='SIP Authentication password used for SIP challenges.',
        examples=['password'],
    )
    sip_auth_username: Optional[str] = Field(
        None,
        description='SIP Authentication username used for SIP challenges.',
        examples=['username'],
    )
    target_leg_client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    time_limit_secs: Optional[int] = Field(
        14400,
        description='Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.',
        examples=[600],
    )
    timeout_secs: Optional[int] = Field(
        30,
        description='The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.',
        examples=[60],
    )
    to: str = Field(
        ...,
        description='The DID or SIP URI to dial out and bridge to the given call.',
        examples=['+18005550100 or sip:username@sip.telnyx.com'],
    )
    webhook_url: Optional[str] = Field(
        None,
        description='Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.',
        examples=['https://www.example.com/server-b/'],
    )
    webhook_url_method: Optional[WebhookUrlMethod] = Field(
        'POST',
        description='HTTP request type used for `webhook_url`.',
        examples=['GET'],
    )


class Source2(BaseModel):
    parameter: Optional[str] = Field(
        None, description='Indicates which query parameter caused the error.'
    )
    pointer: Optional[str] = Field(
        None, description='JSON pointer (RFC6901) to the offending entity.'
    )


class UnprocessableEntityError(BaseModel):
    code: str
    detail: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[Source2] = None
    title: str


class UpdateBillingGroup(BaseModel):
    name: Optional[str] = Field(None, description='A name for the billing group')


class WebhookApiVersion11(Enum):
    field_1 = '1'
    field_2 = '2'


class UpdateCallControlApplicationRequest(BaseModel):
    active: Optional[bool] = Field(
        True, description='Specifies whether the connection can be used.'
    )
    anchorsite_override: Optional[AnchorsiteOverride1] = Field(
        '"Latency"',
        description="<code>Latency</code> directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
        examples=['"Amsterdam, Netherlands"'],
    )
    application_name: str = Field(
        ...,
        description='A user-assigned name to help manage the application.',
        examples=['call-router'],
    )
    dtmf_type: Optional[DtmfType] = Field(
        'RFC 2833',
        description='Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.',
        examples=['Inband'],
    )
    first_command_timeout: Optional[bool] = Field(
        False,
        description='Specifies whether calls to phone numbers associated with this connection should hangup after timing out.',
        examples=[True],
    )
    first_command_timeout_secs: Optional[int] = Field(
        30,
        description='Specifies how many seconds to wait before timing out a dial command.',
        examples=[10],
    )
    inbound: Optional[CallControlApplicationInbound] = None
    outbound: Optional[CallControlApplicationOutbound] = None
    webhook_api_version: Optional[WebhookApiVersion11] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: str = Field(
        ...,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class UpdateConferenceRequest(BaseModel):
    call_control_id: str = Field(
        ...,
        description='Unique identifier and token for controlling the call',
        examples=[
            'v2:T02llQxIyaRkhfRKxgAP8nY511EhFLizdvdUKJiSw8d6A9BborherQczRrZvZakpWxBlpw48KyZQ=='
        ],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    supervisor_role: SupervisorRole = Field(
        ...,
        description='Sets the participant as a supervisor for the conference. A conference can have multiple supervisors. "barge" means the supervisor enters the conference as a normal participant. This is the same as "none". "monitor" means the supervisor is muted but can hear all participants. "whisper" means that only the specified "whisper_call_control_ids" can hear the supervisor. Defaults to "none".',
        examples=['whisper'],
    )
    whisper_call_control_ids: Optional[List[str]] = Field(
        None,
        description='Array of unique call_control_ids the supervisor can whisper to. If none provided, the supervisor will join the conference as a monitoring participant only.',
        examples=[
            [
                'v2:Sg1xxxQ_U3ixxxyXT_VDNI3xxxazZdg6Vxxxs4-GNYxxxVaJPOhFMRQ',
                'v2:qqpb0mmvd-ovhhBr0BUQQn0fld5jIboaaX3-De0DkqXHzbf8d75xkw',
            ]
        ],
    )


class Inbound5(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class Outbound5(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class UpdateFqdnConnectionRequest(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = None
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[InboundFqdn] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings.",
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[FqdnConnectionTransportProtocol] = 'UDP'
    webhook_api_version: Optional[WebhookApiVersion11] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class UpdateFqdnRequest(BaseModel):
    connection_id: Optional[str] = Field(
        None,
        description='ID of the FQDN connection to which this IP should be attached.',
    )
    dns_record_type: Optional[str] = Field(
        None,
        description="The DNS record type for the FQDN. For cases where a port is not set, the DNS record type must be 'srv'. For cases where a port is set, the DNS record type must be 'a'. If the DNS record type is 'a' and a port is not specified, 5060 will be used.",
        examples=['a'],
    )
    fqdn: Optional[str] = Field(
        None, description='FQDN represented by this resource.', examples=['example.com']
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this FQDN.', examples=[5060]
    )


class UpdateIpRequest(BaseModel):
    connection_id: Optional[str] = Field(
        None, description='ID of the IP Connection to which this IP should be attached.'
    )
    ip_address: str = Field(
        ...,
        description='IP adddress represented by this resource.',
        examples=['192.168.0.0'],
    )
    port: Optional[int] = Field(
        5060, description='Port to use when connecting to this IP.', examples=[5060]
    )


class UpdateMediaMultipartRequest(BaseModel):
    media: Optional[bytes] = Field(
        None,
        description='The file you want to upload. The maximum allowed size is 20 MB.',
    )
    ttl_secs: Optional[int] = Field(
        None,
        description='The number of seconds after which the media resource will be deleted, defaults to 2 days.',
        examples=[86400],
    )


class UpdateMediaRequest(BaseModel):
    media_url: Optional[str] = Field(
        None,
        description='The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.',
        examples=['http://www.example.com/audio.mp3'],
    )
    ttl_secs: Optional[int] = Field(
        None,
        description='The number of seconds after which the media resource will be deleted, defaults to 2 days.',
        examples=[86400],
    )


class RecordType68(Enum):
    messaging_profile = 'messaging_profile'


class WebhookApiVersion15(Enum):
    field_1 = '1'
    field_2 = '2'
    field_2010_04_01 = '2010-04-01'


class UpdateNumberOrderDocumentRequest(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order document was uploaded.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    file_id: Optional[str] = Field(
        None,
        description='The id of the file to associate as a number order document.',
        examples=['1e3c5822-0362-4702-8e46-5a129f0d3976'],
    )
    id: Optional[UUID] = Field(None, examples=['387d1e31-a218-4375-8151-103f2d5e2d2c'])
    record_type: Optional[str] = Field(None, examples=['number_order_document'])
    requirement_type: Optional[RequirementType] = None
    requirements_id: Optional[str] = Field(
        None,
        description='Unique id for a requirement.',
        examples=['36aaf27d-986b-493c-bd1b-de16af2e4292'],
    )


class Status50(Enum):
    pending = 'pending'
    success = 'success'
    failure = 'failure'


class UpdatePhoneNumberMessagingSettingsRequest(BaseModel):
    messaging_product: Optional[str] = Field(
        None,
        description='The requested messaging product the number should be on',
        examples=['P2P'],
    )
    messaging_profile_id: Optional[str] = Field(
        None, description='Unique identifier for a messaging profile.'
    )


class UpdatePhoneNumberRequest(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the billing group associated with the phone number.',
    )
    connection_id: Optional[str] = Field(
        None, description='Identifies the connection associated with the phone number.'
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    external_pin: Optional[str] = Field(
        None,
        description='If someone attempts to port your phone number away from Telnyx and your phone number has an external PIN set, we will attempt to verify that you provided the correct external PIN to the winning carrier. Note that not all carriers cooperate with this security mechanism.',
    )
    id: Optional[str] = Field(None, description='Identifies the type of resource.')
    number_level_routing: Optional[NumberLevelRouting] = Field(
        'enabled',
        description='Specifies whether the number can have overrides to the routing settings on itself (enabled) or if it uses the associated connection for all routing settings (disabled). Defaults to enabled but will be changed to disabled in the future. There are performance advantages to using disabled and setting all routing information at the connection level.',
    )
    tags: Optional[List[str]] = Field(
        None, description='A list of user-assigned tags to help organize phone numbers.'
    )


class UpdatePhoneNumberVoiceSettingsRequest(BaseModel):
    call_forwarding: Optional[CallForwarding] = None
    call_recording: Optional[CallRecording] = None
    cnam_listing: Optional[CnamListing] = None
    media_features: Optional[MediaFeatures] = None
    tech_prefix_enabled: Optional[bool] = Field(
        False,
        description='Controls whether a tech prefix is enabled for this phone number.',
    )
    translated_number: Optional[str] = Field(
        None,
        description='This field allows you to rewrite the destination number of an inbound call before the call is routed to you. The value of this field may be any alphanumeric value, and the value will replace the number originally dialed.',
    )
    usage_payment_method: Optional[UsagePaymentMethod1] = Field(
        'pay-per-minute',
        description='Controls whether a number is billed per minute or uses your concurrent channels.',
    )


class ActivationSettings(BaseModel):
    foc_datetime_requested: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted Date/Time requested for the FOC date',
        examples=['2021-03-19T10:07:15.527Z'],
    )


class UpdatePortingOrderRequirement(BaseModel):
    field_value: str = Field(
        ...,
        description='identifies the document that satisfies this requirement',
        examples=['9787fb5f-cbe5-4de4-b765-3303774ee9fe'],
    )
    requirement_type_id: str = Field(
        ...,
        description='Identifies the requirement type that meets this requirement',
        examples=['59b0762a-b274-4f76-ac32-4d5cf0272e66'],
    )


class UpdateRegulatoryRequirement(BaseModel):
    field_value: Optional[str] = Field(
        None,
        description='The value of the requirement, this could be an id to a resource or a string value.',
        examples=['45f45a04-b4be-4592-95b1-9306b9db2b21'],
    )
    requirement_id: Optional[UUID] = Field(
        None,
        description='Unique id for a requirement.',
        examples=['8ffb3622-7c6b-4ccc-b65f-7a3dc0099576'],
    )


class UpdateShortCodeRequest(BaseModel):
    messaging_profile_id: str = Field(
        ..., description='Unique identifier for a messaging profile.'
    )


class UpdateSubNumberOrderRequest(BaseModel):
    regulatory_requirements: Optional[List[UpdateRegulatoryRequirement]] = None


class Inbound6(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of inbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    sip_subdomain: Optional[str] = Field(
        None,
        description='Specifies a subdomain that can be used to receive Inbound calls to a Connection, in the same way a phone number is used, from a SIP endpoint. Example: the subdomain "example.sip.telnyx.com" can be called from any SIP endpoint by using the SIP URI "sip:@example.sip.telnyx.com" where the user part can be any alphanumeric value. Please note TLS encrypted calls are not allowed for subdomain calls.',
        examples=['example'],
    )
    sip_subdomain_receive_settings: Optional[SipSubdomainReceiveSettings] = Field(
        'from_anyone',
        description='This option can be enabled to receive calls from: "Anyone" (any SIP endpoint in the public Internet) or "Only my connections" (any connection assigned to the same Telnyx user).',
        examples=['only_my_connections'],
    )


class Outbound6(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class UpdateTexmlApplicationRequest(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    first_command_timeout: Optional[FirstCommandTimeout] = False
    first_command_timeout_secs: Optional[FirstCommandTimeoutSecs] = Field(
        default_factory=lambda: FirstCommandTimeoutSecs.model_validate(30)
    )
    friendly_name: ApplicationName
    inbound: Optional[Inbound6] = None
    outbound: Optional[Outbound6] = None
    status_callback: Optional[str] = Field(
        None,
        description='URL for Telnyx to send requests to containing information about call progress events.',
        examples=['https://example.com'],
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        'post',
        description='HTTP request method Telnyx should use when requesting the status_callback URL.',
        examples=['get'],
    )
    voice_fallback_url: Optional[str] = Field(
        None,
        description='URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.',
        examples=['https://fallback.example.com'],
    )
    voice_method: Optional[VoiceMethod] = Field(
        'post',
        description="HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
        examples=['get'],
    )
    voice_url: str = Field(
        ...,
        description='URL to which Telnyx will deliver your XML Translator webhooks.',
        examples=['https://example.com'],
    )


class UpdateUserRequest(BaseModel):
    webhook_url: str = Field(
        ...,
        description='The desired URL to set for your WhatsApp webhook endpoint.',
        examples=['https://mywebhook.com/example/endpoint'],
        title='Webhook Url',
    )


class UpdateVerifyProfileCallRequest(BaseModel):
    default_call_timeout_secs: Optional[int] = Field(
        45,
        description='Must be less than default_verification_timeout_secs',
        examples=[30],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    speech_template: Optional[str] = Field(
        None,
        description='Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )


class UpdateVerifyProfileFlashcallRequest(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class UpdateVerifyProfilePSD2Request(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class UpdateVerifyProfileSMSRequest(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    messaging_enabled: Optional[bool] = Field(
        None,
        description='Enables SMS text messaging for the Verify profile.',
        examples=[True],
    )
    messaging_template: Optional[str] = Field(
        None,
        description='Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )
    rcs_enabled: Optional[bool] = Field(
        None,
        description='Enables RCS messaging for the Verify profile.',
        examples=[True],
    )
    vsms_enabled: Optional[bool] = Field(
        None, description='Enables VSMS for the Verify profile.', examples=[True]
    )


class UpdateVerifyProfileWhatsappRequest(BaseModel):
    app_name: Optional[str] = Field(
        None,
        description='The name that identifies the application requesting 2fa in the verification message.',
        examples=['Example Secure App'],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class UpdatedAt(RootModel[str]):
    root: str = Field(
        ...,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2020-02-03T22:25:27.521Z'],
        title='Updated At',
    )


class UplinkData(BaseModel):
    amount: Optional[float] = Field(None, description='Uplink data', examples=[1])
    unit: Optional[Unit] = Field('MB', description='Transmission unit')


class UploadFileMessagingHostedNumberOrderRequest(BaseModel):
    bill: Optional[bytes] = Field(
        None,
        description="Must be the last month's bill with proof of ownership of all of the numbers in the order in PDF format.",
    )
    loa: Optional[bytes] = Field(
        None,
        description='Must be a signed LOA for the numbers in the order in PDF format.',
    )


class RecordType69(Enum):
    whatsapp_media_id = 'whatsapp_media_id'


class UploadMedia(BaseModel):
    id: Optional[str] = None
    record_type: Optional[RecordType69] = Field(
        None, description='Identifies the type of the resource.'
    )


class UploadMediaMultipartRequest(BaseModel):
    media: bytes = Field(
        ...,
        description='The file you want to upload. The maximum allowed size is 20 MB.',
    )
    media_name: Optional[str] = Field(
        None, description='The unique identifier of a file.', examples=['my_file']
    )
    ttl_secs: Optional[int] = Field(
        None,
        description='The number of seconds after which the media resource will be deleted, defaults to 2 days.',
        examples=[86400],
    )


class UploadMediaRequest(BaseModel):
    media_name: Optional[str] = Field(
        None, description='The unique identifier of a file.', examples=['my_file']
    )
    media_url: str = Field(
        ...,
        description='The URL where the media to be stored in Telnyx network is currently hosted. The maximum allowed size is 20 MB.',
        examples=['http://www.example.com/audio.mp3'],
    )
    ttl_secs: Optional[int] = Field(
        None,
        description='The number of seconds after which the media resource will be deleted, defaults to 2 days.',
        examples=[86400],
    )


class Url(BaseModel):
    type: Optional[str] = Field(None, description='Standard Values: HOME, WORK')
    url: Optional[str] = Field(None, description='URL')


class UrlShortenerSettings(BaseModel):
    domain: str = Field(
        ...,
        description='One of the domains provided by the Telnyx URL shortener service.\n',
        examples=['acct.fyi'],
    )
    prefix: Optional[str] = Field(
        None,
        description='Optional prefix that can be used to identify your brand, and will appear in the Telnyx generated URLs after the domain name.\n',
        examples=[''],
    )
    replace_blacklist_only: Optional[bool] = Field(
        None,
        description='Use the link replacement tool only for links that are specifically blacklisted by Telnyx.\n',
        examples=[True],
    )
    send_webhooks: Optional[bool] = Field(
        None,
        description='Receive webhooks for when your replaced links are clicked. Webhooks are sent to the webhooks on the messaging profile.\n',
        examples=[False],
    )


class UsagePaymentMethod(Enum):
    tariff = 'tariff'
    rate_deck = 'rate-deck'


class RecordType70(Enum):
    balance = 'balance'


class UserBalance(BaseModel):
    available_credit: Optional[Decimal] = Field(
        None,
        description='Available amount to spend (balance + credit limit)',
        examples=['400.00'],
    )
    balance: Optional[Decimal] = Field(
        None, description="The account's current balance.", examples=['300.00']
    )
    credit_limit: Optional[Decimal] = Field(
        None, description="The account's credit limit.", examples=['100.00']
    )
    currency: Optional[str] = Field(
        None, description='The ISO 4217 currency identifier.', examples=['USD']
    )
    record_type: Optional[RecordType70] = Field(
        None, description='Identifies the type of the resource.', examples=['balance']
    )


class Result2(Enum):
    valid = 'valid'
    invalid = 'invalid'


class VerificationProfileRecordType(Enum):
    verification_profile = 'verification_profile'


class VerificationRecordType(Enum):
    verification = 'verification'


class VerificationStatus(Enum):
    pending = 'pending'
    sms_delivery_failed = 'sms_delivery_failed'
    accepted = 'accepted'
    expired = 'expired'
    not_enough_credit = 'not_enough_credit'
    network_error = 'network_error'
    number_unreachable = 'number_unreachable'
    internal_error = 'internal_error'
    invalid_destination = 'invalid_destination'
    timed_out = 'timed_out'


class VerificationType(Enum):
    sms_verification = 'sms_verification'
    psd2_verification = 'psd2_verification'
    whatsapp_verification = 'whatsapp_verification'
    call_verification = 'call_verification'
    flashcall_verification = 'flashcall_verification'


class VerifyProfileCallResponse(BaseModel):
    default_call_timeout_secs: Optional[int] = Field(
        45,
        description='Must be less than default_verification_timeout_secs',
        examples=[30],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    speech_template: Optional[str] = Field(
        None,
        description='Optionally sets a speech text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )


class VerifyProfileFlashcallResponse(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class VerifyProfilePSD2Response(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class VerifyProfileSMSResponse(BaseModel):
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )
    messaging_enabled: Optional[bool] = Field(
        None,
        description='Enables SMS text messaging for the Verify profile.',
        examples=[True],
    )
    messaging_template: Optional[str] = Field(
        None,
        description='Optionally sets a messaging text template when sending the verification code. Uses `{code}` to template in the actual verification code.',
        examples=[
            'Hello, this is the Acme Inc verification code you requested: {code}.'
        ],
    )
    rcs_enabled: Optional[bool] = Field(
        None,
        description='Enables RCS messaging for the Verify profile.',
        examples=[True],
    )
    vsms_enabled: Optional[bool] = Field(
        None, description='Enables VSMS for the Verify profile.', examples=[True]
    )


class VerifyProfileWhatsappResponse(BaseModel):
    app_name: Optional[str] = Field(
        None,
        description='The name that identifies the application requesting 2fa in the verification message.',
        examples=['Example Secure App'],
    )
    default_verification_timeout_secs: Optional[int] = Field(
        None,
        description='For every request that is initiated via this Verify profile, this sets the number of seconds before a verification request code expires. Once the verification request expires, the user cannot use the code to verify their identity.',
        examples=[300],
    )


class VerifyVerificationCodeRequest(BaseModel):
    code: str = Field(
        ...,
        description='This is the code the user submits for verification.',
        examples=['17686'],
    )


class ResponseCode(Enum):
    accepted = 'accepted'
    rejected = 'rejected'


class Data(BaseModel):
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    response_code: ResponseCode = Field(
        ...,
        description='Identifies if the verification code has been accepted or rejected.',
        examples=['accepted'],
    )


class VerifyVerificationCodeResponse(BaseModel):
    data: Data


class Video(BaseModel):
    caption: Optional[str] = Field(
        None, description='Describes the specified media.', examples=['My cool media!']
    )
    id: Optional[str] = Field(
        None,
        description='The media object ID returned when the media is successfully uploaded to the media endpoint.',
        examples=['f043afd0-f0ae-4b9c-ab3d-696fb4c8cd68'],
    )
    link: Optional[str] = Field(
        None,
        description='The protocol and URL of the media to be sent. Use only with HTTP/HTTPS URLs. Either id or link must be provided, not both.',
        examples=['http://www.example.com/file'],
    )


class Status51(Enum):
    pending = 'pending'
    complete = 'complete'
    failed = 'failed'
    deleted = 'deleted'


class WdrReport(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    end_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating the end time.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(None, examples=['detail_records_report'])
    report_url: Optional[str] = Field(
        None,
        description='The URL where the report content, when generated, will be published to.',
        examples=['http://example.com'],
    )
    start_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating the start time.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    status: Optional[Status51] = Field(
        None,
        description='Indicates the status of the report, which is updated asynchronously.',
        examples=['pending'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class WdrReportRequest(BaseModel):
    end_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating the end time.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    start_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating the start time.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class WebhookApiVersion16(Enum):
    field_1 = '1'
    field_2 = '2'


class WebhookEventFailoverUrl(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
        title='Webhook Event Failover URL',
    )


class WebhookEventUrl(RootModel[str]):
    root: str = Field(
        ...,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
        title='Webhook Event URL',
    )


class WebhookTimeoutSecs(RootModel[Optional[conint(ge=0, le=30)]]):
    root: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
        title='Webhook Timeout Secs',
    )


class WhatsAppContactAddress(BaseModel):
    city: str = Field(..., description='City name')
    country: str = Field(..., description='Full country name')
    country_code: str = Field(..., description='Two-letter country abbreviation')
    state: str = Field(..., description='State abbreviation')
    street: str = Field(..., description='Street number and name')
    type: str = Field(..., description='Standard Values: HOME, WORK')
    zip: str = Field(..., description='ZIP code')


class Status52(Enum):
    PENDING = 'PENDING'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    EXPIRED = 'EXPIRED'


class WhatsAppDetailRecordReport(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None, examples=['2020-05-01T00:00:00-06:00']
    )
    download_link: Optional[str] = Field(
        None, examples=['https://portal-cdrs-usage.s3.amazonaws.com']
    )
    end_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-05-01T00:00:00-06:00']
    )
    id: Optional[str] = Field(None, examples=['ab76c3b6-80cd-11eb-9439-0242ac130002'])
    record_type: Optional[str] = Field(None, examples=['whatsapp_detail_record_report'])
    start_date: Optional[datetime_aliased] = Field(
        None, examples=['2020-05-01T00:00:00-06:00']
    )
    status: Optional[Status52] = None


class WhatsAppDetailReportResponse(BaseModel):
    data: Optional[WhatsAppDetailRecordReport] = None


class WhatsAppGetAllDetailReportResponse(BaseModel):
    data: Optional[List[WhatsAppDetailRecordReport]] = None
    meta: Optional[PaginationMeta] = None


class WhatsAppReportsReq(BaseModel):
    end_date: datetime_aliased = Field(..., examples=['2021-05-01T00:00:00-06:00'])
    start_date: datetime_aliased = Field(..., examples=['2021-05-01T00:00:00-06:00'])


class WhatsAppUsageAggregation(BaseModel):
    cost: Optional[Money] = None
    count: Optional[str] = Field(None, examples=['3'])
    direction: Optional[str] = Field(None, examples=['inbound'])
    message_type: Optional[str] = Field(None, examples=['template'])
    recipient_country_code: Optional[str] = Field(None, examples=['1'])
    record_type: Optional[str] = Field(None, examples=['whatsapp_usage_aggregation'])
    status: Optional[str] = Field(None, examples=['delivered'])
    telnyx_fee: Optional[Money] = None
    whatsapp_fee: Optional[Money] = None


class WhatsAppUsageAggregationsResponseContainer(BaseModel):
    data: Optional[List[WhatsAppUsageAggregation]] = None


class RecordType71(Enum):
    whatsapp_user = 'whatsapp_user'


class WhatsAppUser(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The WhatsApp User ID, usually a phone number.',
        examples=['15125551212'],
    )
    record_type: Optional[RecordType71] = Field(
        None, description='Identifies the type of the resource.'
    )
    webhook_url: Optional[str] = Field(
        None,
        description='The URL that WhatsApp webhooks are sent to.',
        examples=['https://mywebhook.com/example/endpoint'],
        title='Webhook Url',
    )


class LogType(Enum):
    registration = 'registration'
    data = 'data'


class WirelessConnectivityLog(BaseModel):
    apn: Optional[str] = Field(
        None,
        description='The Access Point Name (APN) identifies the packet data network that a mobile data user wants to communicate with.',
        examples=['data00.telnyx'],
    )
    id: Optional[int] = Field(
        None, description='Uniquely identifies the session.', examples=[137509451]
    )
    imei: Optional[str] = Field(
        None,
        description='The International Mobile Equipment Identity (or IMEI) is a number, usually unique, that identifies the device currently being used connect to the network.',
        examples=['490154203237518'],
    )
    imsi: Optional[str] = Field(
        None,
        description='SIM cards are identified on their individual operator networks by a unique International Mobile Subscriber Identity (IMSI). <br/>\nMobile network operators connect mobile phone calls and communicate with their market SIM cards using their IMSIs. The IMSI is stored in the Subscriber  Identity Module (SIM) inside the device and is sent by the device to the appropriate network. It is used to acquire the details of the device in the Home  Location Register (HLR) or the Visitor Location Register (VLR).\n',
        examples=[81932214823362980],
    )
    ipv4: Optional[str] = Field(
        None,
        description="The SIM's address in the currently connected network. This IPv4 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
        examples=['192.168.0.0'],
    )
    ipv6: Optional[str] = Field(
        None,
        description="The SIM's address in the currently connected network. This IPv6 address is usually obtained dynamically, so it may vary according to the location or new connections.\n",
        examples=['2001:cdba:0000:0000:0000:0000:3257:9652'],
    )
    log_type: Optional[LogType] = Field(
        None,
        description="The type of the session, 'registration' being the initial authentication session and 'data' the actual data transfer sessions.",
        examples=['registration'],
    )
    mobile_country_code: Optional[str] = Field(
        None,
        description="It's a three decimal digit that identifies a country.<br/><br/>\nThis code is commonly seen joined with a Mobile Network Code (MNC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
        examples=['310'],
    )
    mobile_network_code: Optional[str] = Field(
        None,
        description="It's a two to three decimal digits that identify a network.<br/><br/>\n This code is commonly seen joined with a Mobile Country Code (MCC) in a tuple that allows identifying a carrier known as PLMN (Public Land Mobile Network) code.",
        examples=['410'],
    )
    radio_access_technology: Optional[str] = Field(
        None,
        description='The radio technology the SIM card used during the session.',
        examples=['LTE'],
    )
    record_type: Optional[str] = Field(None, examples=['wireless_connectivity_log'])
    sim_card_id: Optional[UUID] = Field(
        None,
        description='The identification UUID of the related SIM card resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    start_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the session started.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    state: Optional[str] = Field(
        None,
        description='The state of the SIM card after when the session happened.',
        examples=['provisioned'],
    )
    stop_time: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the session ended.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class WirelessCost(BaseModel):
    amount: Optional[str] = Field(
        None,
        description='Final cost. Cost is calculated as rate * unit',
        examples=[0.1],
    )
    currency: Optional[Currency1] = Field(
        None, description='Currency of the rate and cost', examples=['USD']
    )


class WirelessRate(BaseModel):
    amount: Optional[str] = Field(
        None, description='Rate from which cost is calculated', examples=[0.1]
    )
    currency: Optional[Currency1] = Field(
        None, description='Currency of the rate and cost', examples=['USD']
    )


class Active(RootModel[bool]):
    root: bool = Field(
        ...,
        description='The active status of the authentication provider',
        examples=[True],
    )


class AddressBook(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Indicates whether or not the address should be considered part of your list of addresses that appear for regular use.',
        examples=[False],
    )


class AdministrativeArea(RootModel[str]):
    root: str = Field(
        ...,
        description='The locality of the address. For US addresses, this corresponds to the state of the address.',
        examples=['IL'],
    )


class Status53(Enum):
    delivered = 'delivered'
    failed = 'failed'


class Borough(RootModel[str]):
    root: str = Field(
        ...,
        description='The borough of the address. This field is not used for addresses in the US but is used for some international addresses.',
        examples=['Guadalajara'],
    )


class BusinessName(RootModel[str]):
    root: str = Field(
        ...,
        description='The business name associated with the address. An address must have either a first last name or a business name.',
        examples=["Toy-O'Kon"],
    )


class CountryCode(RootModel[str]):
    root: str = Field(
        ...,
        description='The two-character (ISO 3166-1 alpha-2) country code of the address.',
        examples=['US'],
    )


class CustomerReference(RootModel[str]):
    root: str = Field(
        ...,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )


class ErrorModel(BaseModel):
    code: Optional[str] = None
    detail: Optional[str] = None
    title: Optional[str] = None


class ExtendedAddress(RootModel[str]):
    root: str = Field(
        ...,
        description='Additional street address information about the address such as, but not limited to, unit number or apartment number.',
        examples=['#504'],
    )


class FirstName(RootModel[str]):
    root: str = Field(
        ...,
        description='The first name associated with the address. An address must have either a first last name or a business name.',
        examples=['Alfred'],
    )


class HttpHeaders(RootModel[List[str]]):
    root: List[str] = Field(..., description='List of headers, limited to 10kB.')


class LastName(RootModel[str]):
    root: str = Field(
        ...,
        description='The last name associated with the address. An address must have either a first last name or a business name.',
        examples=['Foster'],
    )


class Locality(RootModel[str]):
    root: str = Field(
        ...,
        description='The locality of the address. For US addresses, this corresponds to the city of the address.',
        examples=['Chicago'],
    )


class NameModel(RootModel[str]):
    root: str = Field(
        ...,
        description='The name associated with the authentication provider.',
        examples=['Okta'],
    )


class Neighborhood(RootModel[str]):
    root: str = Field(
        ...,
        description='The neighborhood of the address. This field is not used for addresses in the US but is used for some international addresses.',
        examples=['Ciudad de los deportes'],
    )


class OrganizationId(RootModel[UUID]):
    root: UUID = Field(
        ...,
        description='The id from the Organization the authentication provider belongs to.',
        examples=['24b4a4bb-c4df-46ad-bbcb-23fc741c5ad7'],
    )


class PhoneNumber(RootModel[str]):
    root: str = Field(
        ...,
        description='The phone number associated with the address.',
        examples=['+12125559000'],
    )


class PostalCode(RootModel[str]):
    root: str = Field(
        ..., description='The postal code of the address.', examples=['60654']
    )


class SettingsModel(BaseModel):
    idp_cert_fingerprint: str = Field(
        ...,
        description='The certificate fingerprint for the identity provider (IdP)',
        examples=['13:38:C7:BB:C9:FF:4A:70:38:3A:E3:D9:5C:CD:DB:2E:50:1E:80:A7'],
    )
    idp_cert_fingerprint_algorithm: Optional[IdpCertFingerprintAlgorithm] = Field(
        'sha1',
        description="The algorithm used to generate the identity provider's (IdP) certificate fingerprint",
        examples=['sha256'],
    )
    idp_entity_id: str = Field(
        ...,
        description='The Entity ID for the identity provider (IdP).',
        examples=['https://myorg.myidp.com/saml/metadata'],
    )
    idp_sso_target_url: str = Field(
        ...,
        description='The SSO target url for the identity provider (IdP).',
        examples=['https://myorg.myidp.com/trust/saml2/http-post/sso'],
    )


class SettingsUrl(RootModel[str]):
    root: str = Field(
        ...,
        description='The URL for the identity provider metadata file to populate the settings automatically. If the settings attribute is provided, that will be used instead.',
        examples=['https://myorg.myidp.com/saml/metadata'],
    )


class ShortName(RootModel[str]):
    root: str = Field(
        ...,
        description="The short name associated with the authentication provider. This must be unique and URL-friendly, as it's going to be part of the login URL.",
        examples=['myorg'],
    )


class StreetAddress(RootModel[str]):
    root: str = Field(
        ...,
        description='The primary street address information about the address.',
        examples=['311 W Superior Street'],
    )


class ValidateAddress(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Indicates whether or not the address should be validated for emergency use upon creation or not. This should be left with the default value of `true` unless you have used the `/addresses/actions/validate` endpoint to validate the address separately prior to creation. If an address is not validated for emergency use upon creation and it is not valid, it will not be able to be used for emergency services.',
        examples=[True],
    )


class EventType42(Enum):
    webhook_command = 'webhook.command'


class RecordType72(Enum):
    event = 'event'


class Webhook(BaseModel):
    event_type: Optional[EventType42] = Field(
        None,
        description='The type of event being delivered.',
        examples=['webhook.command'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 datetime of when the event occurred.',
        examples=['2018-02-02T22:25:27.521992Z'],
    )
    payload: Optional[Dict[str, Any]] = None
    record_type: Optional[RecordType72] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class Data1(BaseModel):
    credentials: Optional[int] = Field(
        None, description='Amount of credentials affected', examples=[0]
    )


class ActionsBulkTelephonyCredentialsDeleteResponse(BaseModel):
    data: Optional[Data1] = None


class ActionsBulkTelephonyCredentialsPatchResponse(BaseModel):
    data: Optional[Data1] = None


class ActionsBulkTelephonyCredentialsPostResponse(BaseModel):
    data: Optional[Data1] = None


class ActionsNetworkPreferencesSimCardsPutRequest(BaseModel):
    mobile_operator_networks_preferences: Optional[
        MobileOperatorNetworksPreferencesRequest
    ] = None
    sim_card_ids: Optional[List[UUID]] = Field(
        None,
        examples=[
            [
                '6b14e151-8493-4fa1-8664-1cc4e6d14158',
                '6b14e151-8493-4fa1-8664-1cc4e6d14158',
            ]
        ],
    )


class ActionsRegisterSimCardsPostResponse(BaseModel):
    data: Optional[List[SimpleSIMCard]] = Field(
        None, description='Successfully registered SIM cards.'
    )
    errors: Optional[List[Error]] = None


class ActionsActionTelephonyCredentialsPostResponse(BaseModel):
    data: Optional[Data1] = None


class Action1(Enum):
    activate = 'activate'
    deactivate = 'deactivate'


class Sort(Enum):
    created_at = 'created_at'
    first_name = 'first_name'
    last_name = 'last_name'
    business_name = 'business_name'
    street_address = 'street_address'


class Sort2(Enum):
    name = 'name'
    field_name = '-name'
    short_name = 'short_name'
    field_short_name = '-short_name'
    active = 'active'
    field_active = '-active'
    created_at = 'created_at'
    field_created_at = '-created_at'
    updated_at = 'updated_at'
    field_updated_at = '-updated_at'


class FilterNumberType(Enum):
    toll_free = 'toll-free'


class FilterFeature(Enum):
    sms = 'sms'
    mms = 'mms'
    voice = 'voice'
    fax = 'fax'
    emergency = 'emergency'


class FilterFeatures(RootModel[List[FilterFeature]]):
    root: List[FilterFeature] = Field(..., examples=['voice,sms'])


class FilterNumberType2(Enum):
    toll_free = 'toll-free'
    national = 'national'
    mobile = 'mobile'
    local = 'local'


class FilterFeatures1(RootModel[List[FilterFeature]]):
    root: List[FilterFeature] = Field(..., examples=['voice,sms'])


class BalanceGetResponse(BaseModel):
    data: Optional[UserBalance] = None


class BillingGroupsGetResponse(BaseModel):
    data: Optional[List[BillingGroup]] = None
    meta: Optional[PaginationMeta] = None


class BillingGroupsPostResponse(BaseModel):
    data: Optional[BillingGroup] = None


class BillingGroupsIdDeleteResponse(BaseModel):
    data: Optional[BillingGroup] = None


class BillingGroupsIdGetResponse(BaseModel):
    data: Optional[BillingGroup] = None


class BillingGroupsIdPatchResponse(BaseModel):
    data: Optional[BillingGroup] = None


class Sort4(Enum):
    created_at = 'created_at'
    connection_name = 'connection_name'
    active = 'active'


class FilterStatus(Enum):
    delivered = 'delivered'
    failed = 'failed'


class FilterType1(Enum):
    command = 'command'
    webhook = 'webhook'


class CallEventsGetResponse(BaseModel):
    data: Optional[List[CallEvent]] = None
    meta: Optional[PaginationMeta] = None


class CallsPostResponse(BaseModel):
    data: Optional[Call] = None


class CallsCallControlIdGetResponse(BaseModel):
    data: Optional[Call] = None


class CallsCallControlIdActionsAnswerPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsBridgePostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsEnqueuePostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsForkStartPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsForkStopPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsGatherStopPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsGatherUsingAudioPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsGatherUsingSpeakPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsHangupPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsLeaveQueuePostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsPlaybackStartPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsPlaybackStopPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsRecordPausePostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsRecordResumePostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsRecordStartPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsRecordStopPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsReferPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsRejectPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsSendDtmfPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsSpeakPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsTranscriptionStartPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsTranscriptionStopPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CallsCallControlIdActionsTransferPostResponse(BaseModel):
    data: Optional[CallControlCommandResult] = None


class CommentsGetResponse(BaseModel):
    data: Optional[List[Comment]] = None
    meta: Optional[PaginationMeta] = None


class CommentsPostResponse(BaseModel):
    data: Optional[Comment] = None


class CommentsIdGetResponse(BaseModel):
    data: Optional[Comment] = None


class CommentsIdReadPatchResponse(BaseModel):
    data: Optional[ReadComment] = None


class ConferencesGetResponse(BaseModel):
    data: Optional[List[Conference]] = None
    meta: Optional[PaginationMeta] = None


class ConferencesPostResponse(BaseModel):
    data: Optional[Conference] = None


class ConferencesConferenceIdParticipantsGetResponse(BaseModel):
    data: Optional[List[Participant]] = None
    meta: Optional[PaginationMeta] = None


class ConferencesIdGetResponse(BaseModel):
    data: Optional[Conference] = None


class ConferencesIdActionsDialParticipantPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsHoldPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsJoinPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsLeavePostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsMutePostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsPlayPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsRecordStartPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsRecordStopPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsSpeakPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsStopPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsUnholdPostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsUnmutePostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class ConferencesIdActionsUpdatePostResponse(BaseModel):
    data: Optional[ConferenceCommandResult] = None


class Filter1(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Sort10(RootModel[List[str]]):
    root: List[str]


class Sort11(Enum):
    created_at = 'created_at'
    connection_name = 'connection_name'
    active = 'active'


class FaxesGetResponse(BaseModel):
    data: Optional[List[Fax]] = None
    meta: Optional[Dict[str, Any]] = Field(
        None,
        examples=[
            {'page_number': 2, 'page_size': 1, 'total_pages': 3, 'total_results': 3}
        ],
    )


class FaxesPostResponse(BaseModel):
    data: Optional[Fax] = None


class FaxesIdGetResponse(BaseModel):
    data: Optional[Fax] = None


class FaxesIdActionsRefreshPostResponse(BaseModel):
    result: Optional[str] = Field(None, examples=['ok'])


class FqdnsGetResponse(BaseModel):
    data: Optional[List[Fqdn]] = None
    meta: Optional[PaginationMeta] = None


class FqdnsPostResponse(BaseModel):
    data: Optional[Fqdn] = None


class FqdnsIdDeleteResponse(BaseModel):
    data: Optional[Fqdn] = None


class FqdnsIdGetResponse(BaseModel):
    data: Optional[Fqdn] = None


class FqdnsIdPatchResponse(BaseModel):
    data: Optional[Fqdn] = None


class FilterNumberType4(Enum):
    did = 'did'
    toll_free = 'toll-free'


class FilterPhoneNumberType(Enum):
    local = 'local'
    toll_free = 'toll_free'
    national = 'national'
    mobile = 'mobile'
    landline = 'landline'
    shared_cost = 'shared_cost'


class FilterCountryCode(Enum):
    US = 'US'
    CA = 'CA'
    GB = 'GB'


class FilterGroupBy(Enum):
    rate_center = 'rate_center'
    locality = 'locality'
    npa = 'npa'
    national_destination_code = 'national_destination_code'
    nxx = 'nxx'


class InventoryCoverageGetResponse(BaseModel):
    data: Optional[List[InventoryCoverage]] = None
    meta: Optional[InventoryCoverageMetadata] = None


class IpsGetResponse(BaseModel):
    data: Optional[List[Ip]] = None


class IpsPostResponse(BaseModel):
    data: Optional[Ip] = None


class IpsIdDeleteResponse(BaseModel):
    data: Optional[Ip] = None


class IpsIdGetResponse(BaseModel):
    data: Optional[Ip] = None


class IpsIdPatchResponse(BaseModel):
    data: Optional[Ip] = None


class LedgerBillingGroupReportsPostResponse(BaseModel):
    data: Optional[LedgerBillingGroupReport] = None


class LedgerBillingGroupReportsIdGetResponse(BaseModel):
    data: Optional[LedgerBillingGroupReport] = None


class Sort17(Enum):
    created_at = 'created_at'
    email = 'email'


class ManagedAccountsPostResponse1(BaseModel):
    errors: Optional[List[UnprocessableEntityError]] = None


class ManagedAccountsIdActionsDisablePostResponse1(BaseModel):
    errors: Optional[List[UnprocessableEntityError]] = None


class ManagedAccountsIdActionsEnablePostResponse1(BaseModel):
    errors: Optional[List[UnprocessableEntityError]] = None


class MediaGetResponse(BaseModel):
    data: Optional[List[MediaResource]] = None
    meta: Optional[PaginationMeta] = None


class MediaPostResponse(BaseModel):
    data: Optional[MediaResource] = None


class MediaMediaNameGetResponse(BaseModel):
    data: Optional[MediaResource] = None


class MediaMediaNamePutResponse(BaseModel):
    data: Optional[MediaResource] = None


class Sort19(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description="Field used to order the data. If no field is specified, default value is 'created_at'",
        examples=['created_at'],
    )


class MessagesPostResponse(BaseModel):
    data: Optional[OutboundMessagePayload] = None


class MessagesLongCodePostResponse(BaseModel):
    data: Optional[OutboundMessagePayload] = None


class MessagesNumberPoolPostResponse(BaseModel):
    data: Optional[OutboundMessagePayload] = None


class MessagesShortCodePostResponse(BaseModel):
    data: Optional[OutboundMessagePayload] = None


class MessagesIdGetResponse(BaseModel):
    data: Optional[OutboundMessagePayload] = None


class MessagingHostedNumberOrdersGetResponse(BaseModel):
    data: Optional[List[MessagingHostedNumberOrder]] = None
    meta: Optional[PaginationMeta] = None


class MessagingHostedNumberOrdersPostResponse(BaseModel):
    data: Optional[MessagingHostedNumberOrder] = None


class MessagingHostedNumberOrdersIdGetResponse(BaseModel):
    data: Optional[MessagingHostedNumberOrder] = None


class MessagingHostedNumberOrdersIdActionsFileUploadPostResponse(BaseModel):
    data: Optional[MessagingHostedNumberOrder] = None


class MessagingHostedNumbersIdDeleteResponse(BaseModel):
    data: Optional[HostedNumber] = None


class TimeFrame(Enum):
    field_1h = '1h'
    field_3h = '3h'
    field_24h = '24h'
    field_3d = '3d'
    field_7d = '7d'
    field_30d = '30d'


class MessagingProfileMetricsGetResponse(BaseModel):
    data: Optional[List[MessagingProfileHighLevelMetrics]] = None
    meta: Optional[PaginationMeta] = None


class MessagingProfilesIdPhoneNumbersGetResponse(BaseModel):
    data: Optional[List[PhoneNumberWithMessagingSettings]] = None
    meta: Optional[PaginationMeta] = None


class MessagingProfilesIdShortCodesGetResponse(BaseModel):
    data: Optional[List[ShortCode]] = None
    meta: Optional[PaginationMeta] = None


class MessagingUrlDomainsGetResponse(BaseModel):
    data: Optional[List[MessagingUrlDomain]] = None
    meta: Optional[PaginationMeta] = None


class MobileOperatorNetworksGetResponse(BaseModel):
    data: Optional[List[MobileOperatorNetwork]] = None
    meta: Optional[PaginationMeta] = None


class FilterChannelTypeIdEq(Enum):
    webhook = 'webhook'
    sms = 'sms'
    email = 'email'
    voice = 'voice'


class NotificationChannelsGetResponse(BaseModel):
    data: Optional[List[NotificationChannel]] = None
    meta: Optional[PaginationMeta] = None


class NotificationChannelsPostResponse(BaseModel):
    data: Optional[NotificationChannel] = None


class NotificationChannelsIdDeleteResponse(BaseModel):
    data: Optional[NotificationChannel] = None


class NotificationChannelsIdGetResponse(BaseModel):
    data: Optional[NotificationChannel] = None


class NotificationChannelsIdPatchResponse(BaseModel):
    data: Optional[NotificationChannel] = None


class FilterAssociatedRecordTypeEq(Enum):
    account = 'account'
    phone_number = 'phone_number'


class NotificationEventConditionsGetResponse(BaseModel):
    data: Optional[List[NotificationEventCondition]] = None
    meta: Optional[PaginationMeta] = None


class NotificationEventsGetResponse(BaseModel):
    data: Optional[List[NotificationEvent]] = None
    meta: Optional[PaginationMeta] = None


class NotificationProfilesGetResponse(BaseModel):
    data: Optional[List[NotificationProfile]] = None
    meta: Optional[PaginationMeta] = None


class NotificationProfilesPostResponse(BaseModel):
    data: Optional[NotificationProfile] = None


class NotificationProfilesIdDeleteResponse(BaseModel):
    data: Optional[NotificationProfile] = None


class NotificationProfilesIdGetResponse(BaseModel):
    data: Optional[NotificationProfile] = None


class NotificationProfilesIdPatchResponse(BaseModel):
    data: Optional[NotificationProfile] = None


class FilterStatusEq(Enum):
    enabled = 'enabled'
    enable_received = 'enable-received'
    enable_pending = 'enable-pending'
    enable_submtited = 'enable-submtited'
    delete_received = 'delete-received'
    delete_pending = 'delete-pending'
    delete_submitted = 'delete-submitted'
    deleted = 'deleted'


class NotificationSettingsGetResponse(BaseModel):
    data: Optional[List[NotificationSetting]] = None
    meta: Optional[PaginationMeta] = None


class NotificationSettingsPostResponse(BaseModel):
    data: Optional[NotificationSetting] = None


class NotificationSettingsIdDeleteResponse(BaseModel):
    data: Optional[NotificationSetting] = None


class NotificationSettingsIdGetResponse(BaseModel):
    data: Optional[NotificationSetting] = None


class NumberBlockOrdersGetResponse(BaseModel):
    data: Optional[List[NumberBlockOrder]] = None
    meta: Optional[PaginationMeta] = None


class NumberBlockOrdersPostResponse(BaseModel):
    data: Optional[NumberBlockOrder] = None


class NumberBlockOrdersNumberBlockOrderIdGetResponse(BaseModel):
    data: Optional[NumberBlockOrder] = None


class Type18(Enum):
    carrier = 'carrier'
    caller_name = 'caller-name'


class NumberOrderDocumentsGetResponse(BaseModel):
    data: Optional[List[NumberOrderDocument]] = None
    meta: Optional[PaginationMeta] = None


class NumberOrderDocumentsPostResponse(BaseModel):
    data: Optional[NumberOrderDocument] = None


class NumberOrderDocumentsNumberOrderDocumentIdGetResponse(BaseModel):
    data: Optional[NumberOrderDocument] = None


class NumberOrderDocumentsNumberOrderDocumentIdPatchResponse(BaseModel):
    data: Optional[NumberOrderDocument] = None


class NumberOrdersGetResponse(BaseModel):
    data: Optional[List[NumberOrder]] = None
    meta: Optional[PaginationMeta] = None


class FilterStatus2(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class FilterType3(Enum):
    sim_card_network_preferences = 'sim_card_network_preferences'


class OtaUpdatesGetResponse(BaseModel):
    data: Optional[List[SimplifiedOTAUpdate]] = None
    meta: Optional[PaginationMeta] = None


class Sort20(Enum):
    enabled = 'enabled'
    field_enabled = '-enabled'
    created_at = 'created_at'
    field_created_at = '-created_at'
    name = 'name'
    field_name = '-name'
    service_plan = 'service_plan'
    field_service_plan = '-service_plan'
    traffic_type = 'traffic_type'
    field_traffic_type = '-traffic_type'
    usage_payment_method = 'usage_payment_method'
    field_usage_payment_method = '-usage_payment_method'


class FilterType5(Enum):
    delete_phone_number_block = 'delete_phone_number_block'


class FilterStatus4(Enum):
    pending = 'pending'
    in_progress = 'in_progress'
    completed = 'completed'
    failed = 'failed'


class Sort22(Enum):
    created_at = 'created_at'


class FilterStatus6(Enum):
    purchase_pending = 'purchase_pending'
    purchase_failed = 'purchase_failed'
    port_pending = 'port_pending'
    active = 'active'
    deleted = 'deleted'
    port_failed = 'port_failed'
    emergency_only = 'emergency_only'
    ported_out = 'ported_out'
    port_out_pending = 'port_out_pending'


class FilterUsagePaymentMethod(Enum):
    pay_per_minute = 'pay-per-minute'
    channel = 'channel'


class Sort24(Enum):
    purchased_at = 'purchased_at'
    phone_number = 'phone_number'
    connection_name = 'connection_name'
    usage_payment_method = 'usage_payment_method'


class PhoneNumbersGetResponse(BaseModel):
    data: Optional[List[PhoneNumberDetailed]] = None
    meta: Optional[PaginationMeta] = None


class PhoneNumbersCsvDownloadsGetResponse(BaseModel):
    data: Optional[List[CsvDownload]] = None
    meta: Optional[PaginationMeta] = None


class PhoneNumbersCsvDownloadsPostResponse(BaseModel):
    data: Optional[List[CsvDownload]] = None


class PhoneNumbersCsvDownloadsIdGetResponse(BaseModel):
    data: Optional[List[CsvDownload]] = None


class Data5(BaseModel):
    channels: Optional[int] = Field(
        None,
        description='The current number of concurrent channels set for the account',
        examples=[7],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the response',
        examples=['inbound_channels'],
    )


class PhoneNumbersInboundChannelsGetResponse(BaseModel):
    data: Optional[Data5] = None


class PhoneNumbersInboundChannelsPatchRequest(BaseModel):
    channels: int = Field(
        ...,
        description='The new number of concurrent channels for the account',
        examples=[7],
    )


class Data6(BaseModel):
    channels: Optional[int] = Field(
        None, description='The number of channels set for the account', examples=[7]
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the response',
        examples=['inbound_channels'],
    )


class PhoneNumbersInboundChannelsPatchResponse(BaseModel):
    data: Optional[Data6] = None


class Error1(BaseModel):
    code: str
    detail: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[Source2] = None
    title: str


class PhoneNumbersInboundChannelsPatchResponse1(BaseModel):
    errors: Optional[List[Error1]] = None


class FilterType7(Enum):
    update_emergency_settings = 'update_emergency_settings'
    delete_phone_numbers = 'delete_phone_numbers'
    update_phone_numbers = 'update_phone_numbers'


class Sort26(Enum):
    created_at = 'created_at'


class PhoneNumbersMessagingGetResponse(BaseModel):
    data: Optional[List[PhoneNumberWithMessagingSettings]] = None
    meta: Optional[PaginationMeta] = None


class Sort28(Enum):
    purchased_at = 'purchased_at'
    phone_number = 'phone_number'
    connection_name = 'connection_name'
    usage_payment_method = 'usage_payment_method'


class PhoneNumbersVoiceGetResponse(BaseModel):
    data: Optional[List[PhoneNumberWithVoiceSettings]] = None
    meta: Optional[PaginationMeta] = None


class PhoneNumbersIdDeleteResponse(BaseModel):
    data: Optional[PhoneNumberDeletedDetailed] = None


class PhoneNumbersIdGetResponse(BaseModel):
    data: Optional[PhoneNumberDetailed] = None


class PhoneNumbersIdPatchResponse(BaseModel):
    data: Optional[PhoneNumberDetailed] = None


class PhoneNumbersIdActionsEnableEmergencyPostResponse(BaseModel):
    data: Optional[PhoneNumberWithVoiceSettings] = None


class PhoneNumbersIdMessagingGetResponse(BaseModel):
    data: Optional[PhoneNumberWithMessagingSettings] = None


class PhoneNumbersIdMessagingPatchResponse(BaseModel):
    data: Optional[PhoneNumberWithMessagingSettings] = None


class PhoneNumbersIdVoiceGetResponse(BaseModel):
    data: Optional[PhoneNumberWithVoiceSettings] = None


class PhoneNumbersIdVoicePatchResponse(BaseModel):
    data: Optional[PhoneNumberWithVoiceSettings] = None


class PortabilityChecksPostRequest(BaseModel):
    phone_numbers: Optional[List[str]] = Field(
        None,
        description='The list of +E.164 formatted phone numbers to check for portability',
        examples=[['+13035550000', '+13035550001', '+13035550002']],
    )


class PortabilityChecksPostResponse(BaseModel):
    data: Optional[List[PortabilityCheckDetails]] = None


class Sort30(Enum):
    created_at = 'created_at'
    field_created_at = '-created_at'
    activation_settings_foc_datetime_requested = (
        'activation_settings.foc_datetime_requested'
    )
    field_activation_settings_foc_datetime_requested = (
        '-activation_settings.foc_datetime_requested'
    )


class PortingOrdersExceptionTypesGetResponse(BaseModel):
    data: Optional[List[PortingOrdersExceptionType]] = None


class Meta2(BaseModel):
    phone_numbers_url: Optional[str] = Field(
        None,
        description='Link to list all phone numbers',
        examples=[
            '/porting_phone_numbers?filter[porting_order_id]=a700d03c-4062-4091-8189-1b75216cf7a2'
        ],
    )


class PortingOrdersIdActionsActivatePostResponse(BaseModel):
    data: Optional[PortingOrdersActivationJob] = None


class PortingOrdersIdActivationJobsGetResponse(BaseModel):
    data: Optional[List[PortingOrdersActivationJob]] = None
    meta: Optional[PaginationMeta] = None


class PortingOrdersIdActivationJobsActivationJobIdGetResponse(BaseModel):
    data: Optional[PortingOrdersActivationJob] = None


class PortingOrdersIdCommentsGetResponse(BaseModel):
    data: Optional[List[PortingOrdersComment]] = None
    meta: Optional[PaginationMeta] = None


class PortingOrdersIdCommentsPostResponse(BaseModel):
    data: Optional[PortingOrdersComment] = None


class FilterStatus8(Enum):
    pending = 'pending'
    authorized = 'authorized'
    ported = 'ported'
    rejected = 'rejected'
    rejected_pending = 'rejected-pending'
    canceled = 'canceled'


class PortoutsGetResponse(BaseModel):
    data: Optional[List[PortoutDetails]] = None
    meta: Optional[Metadata] = None


class PortoutsIdGetResponse(BaseModel):
    data: Optional[PortoutDetails] = None


class PortoutsIdCommentsGetResponse(BaseModel):
    data: Optional[List[PortoutComment]] = None
    meta: Optional[Metadata] = None


class PortoutsIdCommentsPostRequest(BaseModel):
    body: Optional[str] = Field(
        None, description='Comment to post on this portout request'
    )


class PortoutsIdCommentsPostResponse(BaseModel):
    data: Optional[PortoutComment] = None


class PortoutsIdStatusPatchResponse(BaseModel):
    data: Optional[PortoutDetails] = None


class Status55(Enum):
    authorized = 'authorized'
    rejected = 'rejected'


class PrivateWirelessGatewaysPostRequest(BaseModel):
    name: str = Field(
        ...,
        description='The private wireless gateway name.',
        examples=['My private wireless gateway'],
    )
    network_id: UUID = Field(
        ...,
        description='The identification of the related network resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )


class QueuesQueueNameGetResponse(BaseModel):
    data: Optional[Queue] = None


class QueuesQueueNameCallsGetResponse(BaseModel):
    data: Optional[List[QueueCall]] = None
    meta: Optional[PaginationMeta] = None


class QueuesQueueNameCallsCallControlIdGetResponse(BaseModel):
    data: Optional[QueueCall] = None


class RecordingsGetResponse(BaseModel):
    data: Optional[List[Recording]] = None
    meta: Optional[PaginationMeta] = None


class RecordingsIdGetResponse(BaseModel):
    data: Optional[Recording] = None


class AggregationType3(Enum):
    NO_AGGREGATION = 'NO_AGGREGATION'
    CONNECTION = 'CONNECTION'
    TAG = 'TAG'
    BILLING_GROUP = 'BILLING_GROUP'


class Connections1(RootModel[List[float]]):
    root: List[float] = Field(..., examples=[1234567890123])


class AggregationType5(Enum):
    NO_AGGREGATION = 'NO_AGGREGATION'
    PROFILE = 'PROFILE'
    TAGS = 'TAGS'


class Profiles(RootModel[List[str]]):
    root: List[str] = Field(..., examples=['My profile'])


class Direction13(Enum):
    INBOUND = 'INBOUND'
    OUTBOUND = 'OUTBOUND'


class Status56(Enum):
    GW_TIMEOUT = 'GW_TIMEOUT'
    DELIVERED = 'DELIVERED'
    DLR_UNCONFIRMED = 'DLR_UNCONFIRMED'
    DLR_TIMEOUT = 'DLR_TIMEOUT'
    RECEIVED = 'RECEIVED'
    GW_REJECT = 'GW_REJECT'
    FAILED = 'FAILED'


class MessageType3(Enum):
    SMS = 'SMS'
    MMS = 'MMS'


class Sort32(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        description="Field used to order the data. If no field is specified, default value is 'created_at'",
        examples=['created_at'],
    )


class Sort33(Enum):
    created_at = 'created_at'
    name = 'name'
    updated_at = 'updated_at'


class RequirementTypesGetResponse(BaseModel):
    data: Optional[DocReqsRequirementTypeList] = None
    meta: Optional[PaginationMeta] = None


class RequirementTypesIdGetResponse(BaseModel):
    data: Optional[DocReqsRequirementType] = None


class FilterPhoneNumberType2(Enum):
    local = 'local'
    national = 'national'
    toll_free = 'toll-free'


class FilterAction(Enum):
    ordering = 'ordering'
    porting = 'porting'


class Sort35(Enum):
    action = 'action'
    country_code = 'country_code'
    locality = 'locality'
    phone_number_type = 'phone_number_type'


class RoomParticipantsGetResponse(BaseModel):
    data: Optional[List[RoomParticipant]] = None
    meta: Optional[PaginationMeta] = None


class RoomParticipantsRoomParticipantIdGetResponse(BaseModel):
    data: Optional[RoomParticipant] = None


class RoomSessionsGetResponse(BaseModel):
    data: Optional[List[RoomSession]] = None
    meta: Optional[PaginationMeta] = None


class RoomSessionsRoomSessionIdGetResponse(BaseModel):
    data: Optional[RoomSession] = None


class RoomSessionsRoomSessionIdParticipantsGetResponse(BaseModel):
    data: Optional[List[RoomParticipant]] = None
    meta: Optional[PaginationMeta] = None


class Data7(BaseModel):
    refresh_token: Optional[str] = Field(
        None,
        examples=[
            'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ'
        ],
    )
    refresh_token_expires_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the refresh token expires.',
        examples=['2021-03-26T17:51:59Z'],
    )
    token: Optional[str] = Field(
        None,
        examples=[
            'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ'
        ],
    )
    token_expires_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the token expires.',
        examples=['2021-03-26T17:51:59Z'],
    )


class RoomsRoomIdActionsGenerateJoinClientTokenPostResponse(BaseModel):
    data: Optional[Data7] = Field(
        None,
        examples=[
            {
                'refresh_token': 'eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDkzNzA1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6ImQ3OWJlMzhjLWFkNTQtNGQ5ZC1hODc4LWExNjVjNTk0MGQwNyIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6InJlZnJlc2gifQ.FHsp7KlVXn1E5tTUiKZzmQ4of39gi57AakeQeqI0oAa8hzjFMVb0RGj-mxWTvHVen4GpgsUW_epqqaxK16viCA',
                'refresh_token_expires_at': '2021-04-22T12:15:05Z',
                'token': 'eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA',
                'token_expires_at': '2021-04-22T12:24:55Z',
            }
        ],
    )


class Data8(BaseModel):
    token: Optional[str] = Field(
        None,
        examples=[
            'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ0ZWxueXhfdGVsZXBob255IiwiZXhwIjoxNTkwMDEwMTQzLCJpYXQiOjE1ODc1OTA5NDMsImlzcyI6InRlbG55eF90ZWxlcGhvbnkiLCJqdGkiOiJiOGM3NDgzNy1kODllLTRhNjUtOWNmMi0zNGM3YTZmYTYwYzgiLCJuYmYiOjE1ODc1OTA5NDIsInN1YiI6IjVjN2FjN2QwLWRiNjUtNGYxMS05OGUxLWVlYzBkMWQ1YzZhZSIsInRlbF90b2tlbiI6InJqX1pra1pVT1pNeFpPZk9tTHBFVUIzc2lVN3U2UmpaRmVNOXMtZ2JfeENSNTZXRktGQUppTXlGMlQ2Q0JSbWxoX1N5MGlfbGZ5VDlBSThzRWlmOE1USUlzenl6U2xfYURuRzQ4YU81MHlhSEd1UlNZYlViU1ltOVdJaVEwZz09IiwidHlwIjoiYWNjZXNzIn0.gNEwzTow5MLLPLQENytca7pUN79PmPj6FyqZWW06ZeEmesxYpwKh0xRtA0TzLh6CDYIRHrI8seofOO0YFGDhpQ'
        ],
    )
    token_expires_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the token expires.',
        examples=['2021-03-26T17:51:59Z'],
    )


class RoomsRoomIdActionsRefreshClientTokenPostResponse(BaseModel):
    data: Optional[Data8] = Field(
        None,
        examples=[
            {
                'token': 'eyJhbGciOiJFZDI1NTE5IiwidHlwIjoiSldUIn0.eyJhdWQiOiJ0ZWxueXhfYWNjZXNzX3Rva2VuIiwiZXhwIjoxNjE5MDk0Mjk1LCJncmFudHMiOlt7ImFjdGlvbnMiOlsiam9pbiJdLCJyZXNvdXJjZXMiOlsidGVsbnl4OnZpZGVvOnJvb21zOjllMmEwY2JlLWNlNjYtNDExZS1hMWFjLTQ2OGYwYjEwM2M5YSJdLCJzdWJqZWN0cyI6WyJ0ZWxueXg6dXNlcnM6NzgyYjJjYmUtODQ2Ni00ZTNmLWE0ZDMtOTc4MWViNTc3ZTUwIl19XSwiZ3JhbnRzX3ZlcnNpb24iOiIxLjAuMCIsImlhdCI6MTYxOTA5MzY5NSwiaXNzIjoidGVsbnl4X2FjY2Vzc190b2tlbiIsImp0aSI6IjllNjIyOTA2LTc1ZTctNDBiNi1iOTAwLTc1NGIxZjNlZDMyZiIsIm5iZiI6MTYxOTA5MzY5NCwic3ViIjoibnVsbCIsInR5cCI6ImFjY2VzcyJ9.1JGK9PyHkTtoP_iMu-8TzXH_fhmnsDtZZOAJLDzLW6DDtAb80wZ93l1VH5yNx5tFqwIFG0t48dRiBKWlW-nzDA',
                'token_expires_at': '2021-04-22T12:24:55Z',
            }
        ],
    )


class RoomsRoomIdSessionsGetResponse(BaseModel):
    data: Optional[List[RoomSession]] = None
    meta: Optional[PaginationMeta] = None


class ShortCodesGetResponse(BaseModel):
    data: Optional[List[ShortCode]] = None
    meta: Optional[PaginationMeta] = None


class ShortCodesIdGetResponse(BaseModel):
    data: Optional[ShortCode] = None


class ShortCodesIdPatchResponse(BaseModel):
    data: Optional[ShortCode] = None


class FilterStatus10(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class FilterType9(Enum):
    set_private_wireless_gateway = 'set_private_wireless_gateway'
    remove_private_wireless_gateway = 'remove_private_wireless_gateway'


class SimCardGroupActionsGetResponse(BaseModel):
    data: Optional[List[SIMCardGroupAction]] = None
    meta: Optional[PaginationMeta] = None


class SimCardGroupActionsIdGetResponse(BaseModel):
    data: Optional[SIMCardGroupAction] = None


class SimCardGroupsGetResponse(BaseModel):
    data: Optional[List[SIMCardGroup]] = None
    meta: Optional[PaginationMeta] = None


class SimCardGroupsPostResponse(BaseModel):
    data: Optional[SIMCardGroup] = None


class SimCardGroupsIdDeleteResponse(BaseModel):
    data: Optional[SIMCardGroup] = None


class SimCardGroupsIdGetResponse(BaseModel):
    data: Optional[SIMCardGroup] = None


class SimCardGroupsIdPatchResponse(BaseModel):
    data: Optional[SIMCardGroup] = None


class SimCardGroupsIdActionsRemovePrivateWirelessGatewayPostResponse(BaseModel):
    data: Optional[SIMCardGroupAction] = None


class SimCardGroupsIdActionsSetPrivateWirelessGatewayPostRequest(BaseModel):
    private_wireless_gateway_id: UUID = Field(
        ...,
        description='The identification of the related Private Wireless Gateway resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )


class SimCardGroupsIdActionsSetPrivateWirelessGatewayPostResponse(BaseModel):
    data: Optional[SIMCardGroupAction] = None


class SimCardOrderPreviewPostRequest(BaseModel):
    address_id: str = Field(
        ...,
        description='Uniquely identifies the address for the order.',
        examples=['1293384261075731499'],
    )
    quantity: conint(ge=1) = Field(
        ...,
        description='The amount of SIM cards that the user would like to purchase in the SIM card order.',
        examples=[21],
    )


class SimCardOrderPreviewPostResponse(BaseModel):
    data: Optional[SIMCardOrderPreview] = None


class SimCardOrdersGetResponse(BaseModel):
    data: Optional[List[SIMCardOrder]] = None
    meta: Optional[PaginationMeta] = None


class SimCardOrdersPostResponse(BaseModel):
    data: Optional[SIMCardOrder] = None


class SimCardOrdersIdGetResponse(BaseModel):
    data: Optional[SIMCardOrder] = None


class SimCardsGetResponse(BaseModel):
    data: Optional[List[SimpleSIMCard]] = None
    meta: Optional[PaginationMeta] = None


class FilterTags(RootModel[List[str]]):
    root: List[str] = Field(
        ..., examples=[['personal', 'customers', 'active-customers']]
    )


class SimCardsActionsValidateRegistrationCodesPostRequest(BaseModel):
    registration_codes: Optional[List[str]] = None


class SimCardsIdDeleteResponse(BaseModel):
    data: Optional[SIMCard] = None


class SimCardsIdGetResponse(BaseModel):
    data: Optional[SIMCard] = None


class SimCardsIdPatchResponse(BaseModel):
    data: Optional[SIMCard] = None


class SimCardsIdActionsDisablePostResponse(BaseModel):
    data: Optional[SimpleSIMCard] = None


class SimCardsIdActionsEnablePostResponse(BaseModel):
    data: Optional[SimpleSIMCard] = None


class SimCardsIdActionsSetStandbyPostResponse(BaseModel):
    data: Optional[SimpleSIMCard] = None


class SimCardsSimCardIdNetworkPreferencesPutRequest(BaseModel):
    mobile_operator_networks_preferences: Optional[
        List[MobileOperatorNetworkPreferencesRequest]
    ] = Field(
        None,
        description='A list of mobile operator networks and the priority that should be applied when the SIM is connecting to the network.',
    )


class SimCardsSimCardIdWirelessConnectivityLogsGetResponse(BaseModel):
    data: Optional[List[WirelessConnectivityLog]] = None
    meta: Optional[PaginationMeta] = None


class TelephonyCredentialsGetResponse(BaseModel):
    data: Optional[List[TelephonyCredential]] = None
    meta: Optional[PaginationMeta] = None


class TelephonyCredentialsPostResponse(BaseModel):
    data: Optional[TelephonyCredential] = None


class Datum(BaseModel):
    amount: Optional[int] = Field(None, examples=[1])
    tag: Optional[str] = Field(None, examples=['a_tag'])


class TelephonyCredentialsTagsGetResponse(BaseModel):
    data: Optional[List[Datum]] = None
    meta: Optional[PaginationMeta] = None


class TelephonyCredentialsIdDeleteResponse(BaseModel):
    data: Optional[TelephonyCredential] = None


class TelephonyCredentialsIdGetResponse(BaseModel):
    data: Optional[TelephonyCredential] = None


class TelephonyCredentialsIdPatchResponse(BaseModel):
    data: Optional[TelephonyCredential] = None


class TelephonyCredentialsIdActionsActionPostResponse(BaseModel):
    data: Optional[TelephonyCredential] = None


class Sort37(Enum):
    created_at = 'created_at'
    connection_name = 'connection_name'
    active = 'active'


class VerifyProfilesPostRequest(BaseModel):
    call: Optional[CreateVerifyProfileCallRequest] = None
    flashcall: Optional[CreateVerifyProfileFlashcallRequest] = None
    language: Optional[str] = Field(None, examples=['en-US'])
    name: str = Field(..., examples=['Test Profile'])
    psd2: Optional[CreateVerifyProfilePSD2Request] = None
    sms: Optional[CreateVerifyProfileSMSRequest] = None
    webhook_failover_url: Optional[str] = Field(
        None, examples=['http://example.com/webhook/failover']
    )
    webhook_url: Optional[str] = Field(None, examples=['http://example.com/webhook'])
    whatsapp: Optional[CreateVerifyProfileWhatsappRequest] = None


class VerifyProfilesVerifyProfileIdPatchRequest(BaseModel):
    call: Optional[UpdateVerifyProfileCallRequest] = None
    flashcall: Optional[UpdateVerifyProfileFlashcallRequest] = None
    language: Optional[str] = Field(None, examples=['en-US'])
    name: Optional[str] = Field(None, examples=['Test Profile'])
    psd2: Optional[UpdateVerifyProfilePSD2Request] = None
    sms: Optional[UpdateVerifyProfileSMSRequest] = None
    webhook_failover_url: Optional[str] = Field(
        None, examples=['http://example.com/webhook/failover']
    )
    webhook_url: Optional[str] = Field(None, examples=['http://example.com/webhook'])
    whatsapp: Optional[UpdateVerifyProfileWhatsappRequest] = None


class FilterStatusEq2(Enum):
    delivered = 'delivered'
    failed = 'failed'


class WhatsappContactsPostResponse(BaseModel):
    data: Optional[List[CheckContact]] = None


class WhatsappMediaPostResponse(BaseModel):
    data: Optional[List[UploadMedia]] = None


class WhatsappMessagesPostResponse(BaseModel):
    data: Optional[Message] = None


class WhatsappUsersWhatsappUserIdGetResponse(BaseModel):
    data: Optional[WhatsAppUser] = None


class WirelessDetailRecordsReportsGetResponse(BaseModel):
    data: Optional[List[WdrReport]] = None


class WirelessDetailRecordsReportsPostResponse(BaseModel):
    data: Optional[WdrReport] = None


class WirelessDetailRecordsReportsIdDeleteResponse(BaseModel):
    data: Optional[WdrReport] = None


class WirelessDetailRecordsReportsIdGetResponse(BaseModel):
    data: Optional[WdrReport] = None


class Address(BaseModel):
    address_book: Optional[AddressBook] = Field(
        default_factory=lambda: AddressBook.model_validate(True)
    )
    administrative_area: Optional[AdministrativeArea] = None
    borough: Optional[Borough] = None
    business_name: Optional[BusinessName] = None
    country_code: Optional[CountryCode] = None
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    customer_reference: Optional[CustomerReference] = None
    extended_address: Optional[ExtendedAddress] = None
    first_name: Optional[FirstName] = None
    id: Optional[str] = Field(
        None,
        description='Uniquely identifies the address.',
        examples=['1293384261075731499'],
    )
    last_name: Optional[LastName] = None
    locality: Optional[Locality] = None
    neighborhood: Optional[Neighborhood] = None
    phone_number: Optional[PhoneNumber] = None
    postal_code: Optional[PostalCode] = None
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['address']
    )
    street_address: Optional[StreetAddress] = None
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    validate_address: Optional[ValidateAddress] = Field(
        default_factory=lambda: ValidateAddress.model_validate(True)
    )


class AddressCreate(BaseModel):
    address_book: Optional[AddressBook] = Field(
        default_factory=lambda: AddressBook.model_validate(True)
    )
    administrative_area: Optional[AdministrativeArea] = None
    borough: Optional[Borough] = None
    business_name: BusinessName
    country_code: CountryCode
    customer_reference: Optional[CustomerReference] = None
    extended_address: Optional[ExtendedAddress] = None
    first_name: FirstName
    last_name: LastName
    locality: Locality
    neighborhood: Optional[Neighborhood] = None
    phone_number: Optional[PhoneNumber] = None
    postal_code: Optional[PostalCode] = None
    street_address: StreetAddress
    validate_address: Optional[ValidateAddress] = Field(
        default_factory=lambda: ValidateAddress.model_validate(True)
    )


class AuthenticationProvider(BaseModel):
    active: Optional[Active] = Field(
        default_factory=lambda: Active.model_validate(True)
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Uniquely identifies the authentication provider.',
        examples=['35146afd-df93-4963-b1e9-1a085e2ae874'],
    )
    name: Optional[NameModel] = None
    organization_id: Optional[OrganizationId] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['authentication_provider'],
    )
    settings: Optional[Settings] = Field(
        None, description='The settings associated with the authentication provider.'
    )
    short_name: Optional[ShortName] = None
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class AuthenticationProviderCreate(BaseModel):
    active: Optional[Active] = Field(
        default_factory=lambda: Active.model_validate(True)
    )
    name: NameModel
    settings: SettingsModel
    settings_url: Optional[SettingsUrl] = None
    short_name: ShortName


class AvailablePhoneNumber(BaseModel):
    best_effort: Optional[bool] = Field(
        None,
        description='Specifies whether the phone number is an exact match based on the search criteria or not.',
        examples=[False],
    )
    cost_information: Optional[CostInformation] = None
    features: Optional[List[Feature]] = None
    phone_number: Optional[str] = Field(None, examples=['+19705555098'])
    quickship: Optional[bool] = Field(
        None,
        description='Specifies whether the phone number can receive calls immediately after purchase or not.',
        examples=[True],
    )
    record_type: Optional[RecordType] = Field(None, examples=['available_phone_number'])
    region_information: Optional[List[RegionInformation]] = None
    reservable: Optional[bool] = Field(
        None,
        description='Specifies whether the phone number can be reserved before purchase or not.',
        examples=[True],
    )
    vanity_format: Optional[str] = None


class AvailablePhoneNumberBlock(BaseModel):
    cost_information: Optional[CostInformation] = None
    features: Optional[List[Feature]] = None
    range: Optional[int] = Field(None, examples=[10])
    record_type: Optional[RecordType1] = Field(
        None, examples=['available_phone_number_block']
    )
    region_information: Optional[List[RegionInformation]] = None
    starting_number: Optional[str] = Field(None, examples=['+19705555000'])


class CallControlApplication(BaseModel):
    active: Optional[bool] = Field(
        True, description='Specifies whether the connection can be used.'
    )
    anchorsite_override: Optional[AnchorsiteOverride1] = Field(
        '"Latency"',
        description="`Latency` directs Telnyx to route media through the site with the lowest round-trip time to the user's connection. Telnyx calculates this time using ICMP ping messages. This can be disabled by specifying a site to handle all media.\n",
        examples=['"Amsterdam, Netherlands"'],
    )
    application_name: Optional[str] = Field(
        None,
        description='A user-assigned name to help manage the application.',
        examples=['call-router'],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the resource was created',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    dtmf_type: Optional[DtmfType] = Field(
        'RFC 2833',
        description='Sets the type of DTMF digits sent from Telnyx to this Connection. Note that DTMF digits sent to Telnyx will be accepted in all formats.',
        examples=['Inband'],
    )
    first_command_timeout: Optional[bool] = Field(
        False,
        description='Specifies whether calls to phone numbers associated with this connection should hangup after timing out.',
        examples=[True],
    )
    first_command_timeout_secs: Optional[int] = Field(
        30,
        description='Specifies how many seconds to wait before timing out a dial command.',
        examples=[10],
    )
    id: Optional[str] = Field(None, examples=['1293384261075731499'])
    inbound: Optional[CallControlApplicationInbound] = None
    outbound: Optional[CallControlApplicationOutbound] = None
    record_type: Optional[RecordType6] = 'call_control_application'
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date of when the resource was last updated',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description='The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as `https`.',
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description='The URL where webhooks related to this connection will be sent. Must include a scheme, such as `https`.',
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(None, examples=[25])


class CallRequest(BaseModel):
    answering_machine_detection: Optional[AnsweringMachineDetection] = Field(
        'disabled',
        description="Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.",
    )
    answering_machine_detection_config: Optional[AnsweringMachineDetectionConfig] = (
        Field(
            None,
            description="Optional configuration parameters to modify 'answering_machine_detection' performance.",
        )
    )
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played back to the callee when the call is answered. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    billing_group_id: Optional[UUID] = Field(
        None,
        description='Use this field to set the Billing Group ID for the call. Must be a valid and existing Billing Group ID.',
        examples=['f5586561-8ff0-4291-a0ac-84fe544797bd'],
    )
    client_state: Optional[str] = Field(
        None,
        description='Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.',
        examples=['aGF2ZSBhIG5pY2UgZGF5ID1d'],
    )
    command_id: Optional[str] = Field(
        None,
        description='Use this field to avoid duplicate commands. Telnyx will ignore commands with the same `command_id`.',
        examples=['891510ac-f3e4-11e8-af5b-de00688a4901'],
    )
    connection_id: str = Field(
        ...,
        description='The ID of the Call Control App (formerly ID of the connection) to be used when dialing the destination.',
    )
    custom_headers: Optional[List[CustomSipHeader]] = Field(
        None,
        description='Custom headers to be added to the SIP INVITE.',
        examples=[
            [{'name': 'head_1', 'value': 'val_1'}, {'name': 'head_2', 'value': 'val_2'}]
        ],
    )
    from_: str = Field(
        ...,
        alias='from',
        description='The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.',
        examples=['+18005550101'],
    )
    from_display_name: Optional[str] = Field(
        None,
        description='The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.',
        examples=['Company Name'],
    )
    link_to: Optional[str] = Field(
        None,
        description="Use another call's control id for sharing the same call session id",
        examples=['ilditnZK_eVysupV21KzmzN_sM29ygfauQojpm4BgFtfX5hXAcjotg=='],
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played back to the callee when the call is answered. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )
    sip_auth_password: Optional[str] = Field(
        None, description='SIP Authentication password used for SIP challenges.'
    )
    sip_auth_username: Optional[str] = Field(
        None, description='SIP Authentication username used for SIP challenges.'
    )
    time_limit_secs: Optional[int] = Field(
        14400,
        description='Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.',
        examples=[600],
    )
    timeout_secs: Optional[int] = Field(
        30,
        description='The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being called. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.',
        examples=[60],
    )
    to: str = Field(
        ...,
        description='The DID or SIP URI to dial out to.',
        examples=['+18005550100 or sip:username@sip.telnyx.com'],
    )
    webhook_url: Optional[str] = Field(
        None,
        description='Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.',
        examples=['https://www.example.com/server-b/'],
    )
    webhook_url_method: Optional[WebhookUrlMethod] = Field(
        'POST',
        description='HTTP request type used for `webhook_url`.',
        examples=['GET'],
    )


class CdrGetSyncUsageReportResponse(BaseModel):
    data: Optional[CdrUsageReportResponse] = None


class Settings1(BaseModel):
    mobile_operator_networks_preferences: Optional[
        MobileOperatorNetworksPreferencesResponse
    ] = None


class CompleteOTAUpdate(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(None, examples=['ota_update'])
    settings: Optional[Settings1] = Field(
        None,
        description='A JSON object representation of the operation. The information present here will relate directly to the source of the OTA request.',
    )
    sim_card_id: Optional[UUID] = Field(
        None,
        description='The identification UUID of the related SIM card resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    status: Optional[Status5] = Field(None, examples=['in-progress'])
    type: Optional[Type2] = Field(
        None,
        description='Represents the type of the operation requested. This will relate directly to the source of the request.',
        examples=['sim_card_network_preferences'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class ConferencePlayRequest(BaseModel):
    audio_url: Optional[str] = Field(
        None,
        description='The URL of a file to be played back in the conference. media_name and audio_url cannot be used together in one request.',
        examples=['http://example.com/message.wav'],
    )
    call_control_ids: Optional[List[str]] = Field(
        None,
        description='List of call control ids identifying participants the audio file should be played to. If not given, the audio file will be played to the entire conference.',
    )
    loop: Optional[Loopcount] = Field(
        default_factory=lambda: Loopcount.model_validate(1),
        description='The number of times the audio file should be played. If supplied, the value must be an integer between 1 and 100, or the special string `infinity` for an endless loop.',
        examples=['infinity'],
    )
    media_name: Optional[str] = Field(
        None,
        description='The media_name of a file to be played back in the conference. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.',
        examples=['my_media_uploaded_to_media_storage_api'],
    )


class Connection(BaseModel):
    active: Optional[bool] = Field(
        None, description='Defaults to true', examples=[True]
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = Field(None, examples=['string'])
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[str] = Field(
        None,
        description='Identifies the specific resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['ip_connection'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description='The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails.',
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description='The URL where webhooks related to this connection will be sent.',
        examples=['https://example.com'],
    )


class Contact(BaseModel):
    addresses: Optional[List[WhatsAppContactAddress]] = Field(
        None, description='Full contact address(es)'
    )
    birthday: Optional[str] = Field(None, description='YYYY-MM-DD formatted string')
    emails: Optional[List[Email]] = Field(None, description='Contact email address(es)')
    ims: Optional[List[str]] = Field(None, description='')
    name: Optional[Name] = None
    org: Optional[Organization] = None
    phones: Optional[List[Phone]] = Field(None, description='Contact phone number(s)')
    urls: Optional[List[Url]] = Field(None, description='Contact URL(s)')


class CreateDocServiceDocumentRequest(
    RootModel[Union[DocServiceDocumentUploadURL, DocServiceDocumentUploadInline]]
):
    root: Union[DocServiceDocumentUploadURL, DocServiceDocumentUploadInline]


class Outbound(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class CreateFaxApplicationRequest(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    application_name: ApplicationName
    inbound: Optional[Inbound] = None
    outbound: Optional[Outbound] = None
    webhook_event_failover_url: Optional[WebhookEventFailoverUrl] = ''
    webhook_event_url: WebhookEventUrl
    webhook_timeout_secs: Optional[WebhookTimeoutSecs] = None


class CreateFqdnConnectionRequest(BaseModel):
    active: Optional[bool] = Field(True, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: str
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[InboundFqdn] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[FqdnConnectionTransportProtocol] = 'UDP'
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class CreateLongCodeMessageRequest(BaseModel):
    auto_detect: Optional[bool] = Field(
        False,
        description='Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.',
    )
    from_: str = Field(
        ...,
        alias='from',
        description='Phone number, in +E.164 format, used to send the message.',
    )
    media_urls: Optional[List[str]] = Field(
        None,
        description='A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**',
    )
    subject: Optional[str] = Field(None, description='Subject of multimedia message')
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: ToNumber
    type: Optional[Type3] = Field(
        None, description='The protocol for sending the message, either SMS or MMS.'
    )
    use_profile_webhooks: Optional[bool] = Field(
        True,
        description='If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class CreateMessageRequest(BaseModel):
    auto_detect: Optional[bool] = Field(
        False,
        description='Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.',
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Sending address (+E.164 formatted phone number, alphanumeric sender ID, or short code).\n\n**Required if sending with a phone number, short code, or alphanumeric sender ID.**\n',
    )
    media_urls: Optional[List[str]] = Field(
        None,
        description='A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**',
    )
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Unique identifier for a messaging profile.\n\n**Required if sending via number pool or with an alphanumeric sender ID.**\n',
    )
    subject: Optional[str] = Field(None, description='Subject of multimedia message')
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: ToNumber
    type: Optional[Type3] = Field(
        None, description='The protocol for sending the message, either SMS or MMS.'
    )
    use_profile_webhooks: Optional[bool] = Field(
        True,
        description='If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class CreateMessagingProfileRequest(BaseModel):
    enabled: Optional[bool] = Field(
        True, description='Specifies whether the messaging profile is enabled or not.'
    )
    name: str = Field(
        ..., description='A user friendly name for the messaging profile.'
    )
    number_pool_settings: Optional[NumberPoolSettings] = None
    url_shortener_settings: Optional[UrlShortenerSettings] = None
    webhook_api_version: Optional[WebhookApiVersion6] = Field(
        '2',
        description='Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.',
    )
    webhook_failover_url: Optional[str] = Field(
        '',
        description='The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        '',
        description='The URL where webhooks related to this messaging profile will be sent.',
    )


class CreateNumberPoolMessageRequest(BaseModel):
    auto_detect: Optional[bool] = Field(
        False,
        description='Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.',
    )
    media_urls: Optional[List[str]] = Field(
        None,
        description='A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**',
    )
    messaging_profile_id: str = Field(
        ..., description='Unique identifier for a messaging profile.'
    )
    subject: Optional[str] = Field(None, description='Subject of multimedia message')
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: ToNumber
    type: Optional[Type3] = Field(
        None, description='The protocol for sending the message, either SMS or MMS.'
    )
    use_profile_webhooks: Optional[bool] = Field(
        True,
        description='If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class CreateNumberReservationRequest(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the numbers reservation was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    phone_numbers: Optional[List[ReservedPhoneNumber]] = None
    record_type: Optional[str] = Field(None, examples=['number_reservation'])
    status: Optional[Status7] = Field(
        None, description='The status of the entire reservation.'
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number reservation was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class CreateOutboundVoiceProfileRequest(BaseModel):
    billing_group_id: Optional[UUID] = Field(
        None,
        description='The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    call_recording: Optional[OutboundCallRecording] = None
    concurrent_call_limit: Optional[int] = Field(
        None,
        description='Must be no more than your global concurrent call limit. Null means no limit.',
        examples=[10],
    )
    daily_spend_limit: Optional[str] = Field(
        None,
        description='The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.',
        examples=['100.00'],
    )
    daily_spend_limit_enabled: Optional[bool] = Field(
        False,
        description='Specifies whether to enforce the daily_spend_limit on this outbound voice profile.',
        examples=[True],
    )
    enabled: Optional[bool] = Field(
        True,
        description='Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.',
        examples=[True],
    )
    max_destination_rate: Optional[float] = Field(
        None,
        description='Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.',
    )
    name: constr(min_length=3) = Field(
        ...,
        description='A user-supplied name to help with organization.',
        examples=['office'],
    )
    service_plan: Optional[ServicePlan] = 'global'
    tags: Optional[List[str]] = Field(None, examples=[['office-profile']])
    traffic_type: Optional[TrafficType] = 'conversational'
    usage_payment_method: Optional[UsagePaymentMethod] = 'rate-deck'
    whitelisted_destinations: Optional[List[str]] = Field(
        ['US', 'CA'],
        description='The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.',
        examples=[['US', 'BR', 'AU']],
    )


class CreateShortCodeMessageRequest(BaseModel):
    auto_detect: Optional[bool] = Field(
        False,
        description='Automatically detect if an SMS message is unusually long and exceeds a recommended limit of message parts.',
    )
    from_: str = Field(
        ...,
        alias='from',
        description='Phone number, in +E.164 format, used to send the message.',
    )
    media_urls: Optional[List[str]] = Field(
        None,
        description='A list of media URLs. The total media size must be less than 1 MB.\n\n**Required for MMS**',
    )
    subject: Optional[str] = Field(None, description='Subject of multimedia message')
    text: Optional[str] = Field(
        None,
        description='Message body (i.e., content) as a non-empty string.\n\n**Required for SMS**',
    )
    to: ToNumber
    type: Optional[Type3] = Field(
        None, description='The protocol for sending the message, either SMS or MMS.'
    )
    use_profile_webhooks: Optional[bool] = Field(
        True,
        description='If the profile this number is associated with has webhooks, use them for delivery notifications. If webhooks are also specified on the message itself, they will be attempted first, then those on the profile.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this message will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None, description='The URL where webhooks related to this message will be sent.'
    )


class Outbound1(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class CreateTexmlApplicationRequest(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    first_command_timeout: Optional[FirstCommandTimeout] = False
    first_command_timeout_secs: Optional[FirstCommandTimeoutSecs] = Field(
        default_factory=lambda: FirstCommandTimeoutSecs.model_validate(30)
    )
    friendly_name: ApplicationName
    inbound: Optional[Inbound1] = None
    outbound: Optional[Outbound1] = None
    status_callback: Optional[str] = Field(
        None,
        description='URL for Telnyx to send requests to containing information about call progress events.',
        examples=['https://example.com'],
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        'post',
        description='HTTP request method Telnyx should use when requesting the status_callback URL.',
        examples=['get'],
    )
    voice_fallback_url: Optional[str] = Field(
        None,
        description='URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.',
        examples=['https://fallback.example.com'],
    )
    voice_method: Optional[VoiceMethod] = Field(
        'post',
        description="HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
        examples=['get'],
    )
    voice_url: str = Field(
        ...,
        description='URL to which Telnyx will deliver your XML Translator webhooks.',
        examples=['https://example.com'],
    )


class CreateVerificationRequestPSD2(BaseModel):
    amount: str = Field(..., examples=['99.99'])
    currency: Currencies
    payee: str = Field(..., examples=['Acme Corp Inc. LTD'])
    phone_number: str = Field(
        ..., description='+E164 formatted phone number.', examples=['+13035551234']
    )
    timeout_secs: Optional[int] = Field(
        None,
        description='The number of seconds the verification code is valid for.',
        examples=[300],
    )
    verify_profile_id: UUID = Field(
        ...,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class CredentialOutbound(BaseModel):
    ani_override: Optional[str] = Field(
        '',
        description='Set a phone number as the ani_override value to override caller id number on outbound calls.',
    )
    ani_override_type: Optional[AniOverrideType] = Field(
        'always',
        description='Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.',
    )
    call_parking_enabled: Optional[bool] = Field(
        False,
        description='Forces all SIP calls originated on this connection to be "parked" instead of "bridged" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next.',
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
    )
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    instant_ringback_enabled: Optional[bool] = Field(
        True,
        description='When set, ringback will not wait for indication before sending ringback tone to calling party.',
    )
    localization: Optional[str] = Field(
        'US',
        description='A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.',
        examples=['US'],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None
    t38_reinvite_source: Optional[T38ReinviteSource] = Field(
        'telnyx',
        description='This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.',
    )


class DateTimeObject(BaseModel):
    component: Optional[DateTimeComponent] = None
    unix_epoch: Optional[DateTimeUnixEpoch] = None


class DetailRecord(
    RootModel[
        Union[
            MessageDetailRecord,
            ConferenceDetailRecord,
            ConferenceParticipantDetailRecord,
        ]
    ]
):
    root: Union[
        MessageDetailRecord, ConferenceDetailRecord, ConferenceParticipantDetailRecord
    ] = Field(
        ...,
        description='An object following one of the schemas published in https://developers.telnyx.com/docs/api/v2/detail-records',
        discriminator='record_type',
    )


class DetailRecordsSearchResponse(BaseModel):
    data: Optional[List[DetailRecord]] = None
    meta: Optional[PaginationMeta] = None


class DocReqsRequirement(BaseModel):
    action: Optional[Action] = Field(
        None,
        description='Indicates whether this requirement applies to ordering, porting, or both',
        examples=['ordering'],
    )
    country_code: Optional[str] = Field(
        None,
        description='The 2-character (ISO 3166-1 alpha-2) country code where this requirement applies',
        examples=['FR'],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2021-04-09T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the associated document',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    locality: Optional[str] = Field(
        None,
        description='The locality where this requirement applies',
        examples=['Nice'],
    )
    phone_number_type: Optional[PhoneNumberType] = Field(
        None,
        description='Indicates the phone_number_type this requirement applies to. Leave blank if this requirement applies to all number_types.',
        examples=['local'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['requirement'],
    )
    requirements_types: Optional[List[DocReqsRequirementType]] = Field(
        None,
        description='Lists the requirement types necessary to fulfill this requirement',
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was last updated.',
        examples=['2021-04-12T20:20:20.020Z'],
    )


class DocReqsRequirementList(RootModel[List[DocReqsRequirement]]):
    root: List[DocReqsRequirement]


class DocServiceDocument(DocServiceRecord):
    content_type: Optional[str] = Field(
        None, description="The document's content_type.", examples=['application/pdf']
    )
    filename: Optional[str] = Field(
        None,
        description='The filename of the document.',
        examples=['test-document.pdf'],
    )
    record_type: Optional[str] = Field(
        None, description='Identifies the type of the resource.', examples=['document']
    )
    sha256: Optional[str] = Field(
        None,
        description="The document's SHA256 hash provided for optional verification purposes.",
        examples=['08a96c641c3a74e44eb59afb61a24f2cb9f4d7188748e76ba4bb5edfa3cb7d1c'],
    )
    size: Optional[Size] = Field(None, description="Indicates the document's filesize")
    status: Optional[Status11] = Field(
        None,
        description='Indicates the current document reviewing status',
        examples=['pending'],
    )


class DocServiceDocumentLink(DocServiceRecord):
    document_id: Optional[UUID] = Field(
        None,
        description='Identifies the associated document.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    linked_record_type: Optional[str] = Field(
        None,
        description="The linked resource's record type.",
        examples=['porting_order'],
    )
    linked_resource_id: Optional[str] = Field(
        None,
        description='Identifies the linked resource.',
        examples=['132091b4-442b-4a2a-b87f-61e707e46d54'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['document_link'],
    )


class ExternalMessageDetailRecordDto(BaseModel):
    cld: Optional[str] = Field(
        None,
        description='The destination number for a call, or the callee',
        examples=['+1555123456'],
    )
    cli: Optional[str] = Field(
        None,
        description='The number associated with the person initiating the call, or the caller',
        examples=['+1555123456'],
    )
    cost: Optional[MessageCost] = None
    country_iso: Optional[str] = Field(
        None, description='Cld number ISO country code.', examples=['US']
    )
    created_at: Optional[datetime_aliased] = Field(
        None, description='Message sent time', examples=['2020-07-01T00:00:00-06:00']
    )
    direction: Optional[Direction1] = None
    errors: Optional[Union[List[str], Errors1]] = Field(
        None,
        description='Error returned by the gateway in case sending of message failed.',
        examples=['US'],
    )
    id: Optional[str] = Field(
        None,
        description='Message id',
        examples=['3ca7bd3d-7d82-4e07-9df4-009123068320'],
    )
    mcc: Optional[str] = Field(
        None, description='Mobile country code.', examples=['204']
    )
    message_type: Optional[MessageType] = 'text'
    mnc: Optional[str] = Field(
        None, description='Mobile network code.', examples=['01']
    )
    normalized_carrier: Optional[str] = Field(
        None, description='Cld carrier.', examples=['T-Mobile']
    )
    outbound_profile_id: Optional[str] = Field(
        None,
        description='Configured profile id. New profiles can be created and configured on Telnyx portal',
        examples=['30ef55db-c4a2-4c4a-9804-a68077973d07'],
    )
    outbound_profile_name: Optional[str] = Field(
        None,
        description='Configured profile name. New profiles can be created and configured on Telnyx portal',
        examples=['configured-profile-name'],
    )
    parts: Optional[int] = Field(
        None,
        description='Number of parts this message has. Max number of character is 160. If message contains more characters then that it will be broken down in multiple parts',
        examples=[2],
    )
    pass_through_fee: Optional[PassThroughFee] = None
    product: Optional[Product] = None
    rate: Optional[MessageRate] = None
    record_type: Optional[str] = Field(
        'message_detail_record', examples=['message_detail_record']
    )
    status: Optional[MessageStatus] = None
    tags: Optional[str] = Field(None, description='User tag.', examples=['tag1'])


class ExternalWdrDetailRecordDto(BaseModel):
    cost: Optional[WirelessCost] = None
    created_at: Optional[datetime_aliased] = Field(
        None, description='Record created time', examples=['2020-07-01T00:00:00-06:00']
    )
    downlink_data: Optional[DownlinkData] = None
    duration_seconds: Optional[float] = Field(
        None, description='Session duration in seconds.', examples=[1]
    )
    id: Optional[str] = Field(
        None, description='WDR id', examples=['3ca7bd3d-7d82-4e07-9df4-009123068320']
    )
    imsi: Optional[str] = Field(
        None, description='International mobile subscriber identity', examples=['123']
    )
    mcc: Optional[str] = Field(
        None, description='Mobile country code.', examples=['204']
    )
    mnc: Optional[str] = Field(
        None, description='Mobile network code.', examples=['01']
    )
    phone_number: Optional[str] = Field(
        None, description='Phone number', examples=['+12345678910']
    )
    rate: Optional[WirelessRate] = None
    record_type: Optional[str] = Field(None, examples=['wdr'])
    sim_card_id: Optional[str] = Field(
        None,
        description='Sim card unique identifier',
        examples=['877f80a6-e5b2-4687-9a04-88076265720f'],
    )
    sim_group_id: Optional[str] = Field(
        None,
        description='Sim group unique identifier',
        examples=['f05a189f-7c46-4531-ac56-1460dc465a42'],
    )
    sim_group_name: Optional[str] = Field(
        None, description='Defined sim group name', examples=['sim name']
    )
    uplink_data: Optional[UplinkData] = None


class ExternalWdrGetDetailResponse(BaseModel):
    data: Optional[List[ExternalWdrDetailRecordDto]] = None
    meta: Optional[PaginationMeta] = None


class Outbound2(BaseModel):
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the number of concurrent outbound calls to phone numbers associated with this connection.',
        examples=[10],
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None


class FaxApplication(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    application_name: Optional[ApplicationName] = None
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[IntId] = None
    inbound: Optional[Inbound2] = None
    outbound: Optional[Outbound2] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['fax_application'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    webhook_event_failover_url: Optional[WebhookEventFailoverUrl] = ''
    webhook_event_url: Optional[WebhookEventUrl] = None
    webhook_timeout_secs: Optional[WebhookTimeoutSecs] = None


class FqdnConnection(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: str
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    id: Optional[str] = Field(
        None, description='Identifies the resource.', examples=['1293384261075731499']
    )
    inbound: Optional[InboundFqdn] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings.",
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['fqdn_connection'],
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[FqdnConnectionTransportProtocol] = 'UDP'
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    webhook_api_version: Optional[WebhookApiVersion7] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class InboundMessage(BaseModel):
    event_type: Optional[EventType39] = Field(
        None,
        description='The type of event being delivered.',
        examples=['message.received'],
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    payload: Optional[InboundMessagePayload] = None
    record_type: Optional[RecordType43] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class InboundMessageEvent(BaseModel):
    data: Optional[InboundMessage] = None


class LocalizableParam(BaseModel):
    currency: Optional[Currency] = None
    date_time: Optional[DateTimeObject] = None
    default: str = Field(..., description='Default text if localization fails')


class ManagedAccount(BaseModel):
    api_key: str = Field(
        ...,
        description="The managed account's V2 API access key",
        examples=['KEY0174227C1D16D1B180A8FF742AD37F70_1bA4vlJKHpZcJGaSXaadFu'],
    )
    api_token: str = Field(
        ...,
        description="The managed account's V1 API token",
        examples=['x6oexQNHTs-fZ7-QsDMOeg'],
    )
    api_user: str = Field(
        ...,
        description="The manager account's email, which serves as the V1 API user identifier",
        examples=['managed_account@example.com'],
    )
    balance: Optional[ManagedAccountBalance] = None
    created_at: str = Field(
        ...,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    email: EmailStr = Field(
        ..., description="The managed account's email.", examples=['user@example.com']
    )
    id: str = Field(
        ...,
        description='Uniquely identifies the managed account.',
        examples=['f65ceda4-6522-4ad6-aede-98de83385123'],
    )
    manager_account_id: str = Field(
        ...,
        description='The ID of the manager account associated with the managed account.',
        examples=['f65ceda4-6522-4ad6-aede-98de83385123'],
    )
    organization_name: Optional[str] = Field(
        None,
        description='The organization the managed account is associated with.',
        examples=['Example Company LLC'],
    )
    record_type: RecordType51 = Field(
        ...,
        description='Identifies the type of the resource.',
        examples=['managed_account'],
    )
    updated_at: str = Field(
        ...,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class MdrDeleteDetailReportResponse(BaseModel):
    data: Optional[MdrDetailReportResponse] = None


class MdrDeleteUsageReportsResponse(BaseModel):
    data: Optional[MdrUsageReportResponse] = None


class MdrGetDetailReportResponse(BaseModel):
    data: Optional[List[MdrDetailReportResponse]] = None
    meta: Optional[PaginationMeta] = None


class MdrGetDetailResponse(BaseModel):
    data: Optional[List[MdrDetailResponse]] = None
    meta: Optional[PaginationMeta] = None


class MdrGetSyncUsageReportResponse(BaseModel):
    data: Optional[MdrUsageReportResponse] = None


class MdrGetUsageReportsByIdResponse(BaseModel):
    data: Optional[MdrUsageReportResponse] = None


class MdrGetUsageReportsResponse(BaseModel):
    data: Optional[List[MdrUsageReportResponse]] = None
    meta: Optional[PaginationMeta] = None


class MdrMessageBodyResponse(BaseModel):
    data: Optional[MessageBody] = None


class MdrPostUsageReportsResponse(BaseModel):
    data: Optional[MdrUsageReportResponse] = None


class MessagingProfile(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    enabled: Optional[bool] = Field(
        None, description='Specifies whether the messaging profile is enabled or not.'
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    name: Optional[str] = Field(
        None, description='A user friendly name for the messaging profile.'
    )
    number_pool_settings: Optional[NumberPoolSettings] = None
    record_type: Optional[RecordType56] = Field(
        None, description='Identifies the type of the resource.'
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )
    url_shortener_settings: Optional[UrlShortenerSettings] = None
    v1_secret: Optional[str] = Field(
        None, description='Secret used to authenticate with v1 endpoints.'
    )
    webhook_api_version: Optional[WebhookApiVersion10] = Field(
        None,
        description='Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None,
        description='The URL where webhooks related to this messaging profile will be sent.',
    )
    whitelisted_destinations: Optional[List[constr(pattern=r'^[A-Z]{2}$')]] = Field(
        None,
        description='Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `["*"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.',
    )


class MessagingProfileDetailedMetric(BaseModel):
    metrics: Optional[List[MessagingProfileMessageTypeMetrics]] = None
    timestamp: Optional[str] = Field(
        None,
        description='The timestamp of the aggregated data.',
        examples=['2019-01-23T18:10:02.574Z'],
    )


class MessagingProfileDetailedMetrics(BaseModel):
    detailed: Optional[List[MessagingProfileDetailedMetric]] = None
    overview: Optional[MessagingProfileHighLevelMetrics] = None


class NumberLookupRecord(BaseModel):
    caller_name: Optional[CallerName] = None
    carrier: Optional[Carrier] = None
    country_code: Optional[str] = Field(
        None,
        description='Region code that matches the specific country calling code',
        examples=['US'],
    )
    fraud: Optional[str] = Field(None, description='Unused', examples=[None])
    national_format: Optional[str] = Field(
        None,
        description='Hyphen-separated national number, preceded by the national destination code (NDC), with a 0 prefix, if an NDC is found',
        examples=['(0312) 945-7420'],
    )
    phone_number: Optional[str] = Field(
        None, description='E164-formatted phone number', examples=['+13129457420']
    )
    portability: Optional[Portability] = None
    record_type: Optional[str] = Field(
        None, description='Identifies the type of record', examples=['number_lookup']
    )


class NumberReservation(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the numbers reservation was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    phone_numbers: Optional[List[ReservedPhoneNumber]] = None
    record_type: Optional[str] = Field(None, examples=['number_reservation'])
    status: Optional[Status29] = Field(
        None, description='The status of the entire reservation.'
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number reservation was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class OutboundIp(BaseModel):
    ani_override: Optional[str] = Field(
        '',
        description='Set a phone number as the ani_override value to override caller id number on outbound calls.',
    )
    ani_override_type: Optional[AniOverrideType] = Field(
        'always',
        description='Specifies when we apply your ani_override setting. Only applies when ani_override is not blank.',
    )
    call_parking_enabled: Optional[bool] = Field(
        False,
        description='Forces all SIP calls originated on this connection to be "parked" instead of "bridged" to the destination specified on the URI. Parked calls will return ringback to the caller and will await for a Call Control command to define which action will be taken next.',
    )
    channel_limit: Optional[int] = Field(
        None,
        description='When set, this will limit the total number of outbound calls to phone numbers associated with this connection.',
    )
    generate_ringback_tone: Optional[bool] = Field(
        False,
        description='Generate ringback tone through 183 session progress message with early media.',
    )
    instant_ringback_enabled: Optional[bool] = Field(
        True,
        description='When set, ringback will not wait for indication before sending ringback tone to calling party.',
    )
    ip_authentication_method: Optional[IpAuthenticationMethod] = Field(
        'tech-prefixp-charge-info', examples=['tech-prefixp-charge-info']
    )
    ip_authentication_token: Optional[str] = None
    localization: Optional[str] = Field(
        None,
        description='A 2-character country code specifying the country whose national dialing rules should be used. For example, if set to `US` then any US number can be dialed without preprending +1 to the number. When left blank, Telnyx will try US and GB dialing rules, in that order, by default.',
    )
    outbound_voice_profile_id: Optional[OutboundVoiceProfileId] = None
    t38_reinvite_source: Optional[T38ReinviteSource] = Field(
        'telnyx',
        description='This setting only affects connections with Fax-type Outbound Voice Profiles. The setting dictates whether or not Telnyx sends a t.38 reinvite.<br/><br/> By default, Telnyx will send the re-invite. If set to `customer`, the caller is expected to send the t.38 reinvite.',
    )
    tech_prefix: Optional[str] = Field(
        '', description='Numerical chars only, exactly 4 characters.'
    )


class OutboundMessage(BaseModel):
    event_type: Optional[EventType40] = Field(
        None,
        description='The type of event being delivered.',
        examples=['message.sent'],
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    occurred_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    payload: Optional[OutboundMessagePayload] = None
    record_type: Optional[RecordType58] = Field(
        None, description='Identifies the type of the resource.', examples=['event']
    )


class OutboundMessageEvent(BaseModel):
    data: Optional[OutboundMessage] = None
    meta: Optional[Meta1] = None


class OutboundVoiceProfile(BaseModel):
    billing_group_id: Optional[UUID] = Field(
        None,
        description='The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    call_recording: Optional[OutboundCallRecording] = None
    concurrent_call_limit: Optional[int] = Field(
        None,
        description='Must be no more than your global concurrent call limit. Null means no limit.',
        examples=[10],
    )
    connections_count: Optional[int] = Field(
        None,
        description='Amount of connections associated with this outbound voice profile.',
        examples=[12],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    daily_spend_limit: Optional[str] = Field(
        None,
        description='The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.',
        examples=['100.00'],
    )
    daily_spend_limit_enabled: Optional[bool] = Field(
        False,
        description='Specifies whether to enforce the daily_spend_limit on this outbound voice profile.',
        examples=[True],
    )
    enabled: Optional[bool] = Field(
        True,
        description='Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.',
        examples=[True],
    )
    id: Optional[str] = Field(
        None, description='Identifies the resource.', examples=['1293384261075731499']
    )
    max_destination_rate: Optional[float] = Field(
        None,
        description='Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.',
    )
    name: constr(min_length=3) = Field(
        ...,
        description='A user-supplied name to help with organization.',
        examples=['office'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['outbound_voice_profile'],
    )
    service_plan: Optional[ServicePlan] = 'global'
    tags: Optional[List[str]] = Field(None, examples=[['office-profile']])
    traffic_type: Optional[TrafficType] = 'conversational'
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    usage_payment_method: Optional[UsagePaymentMethod] = 'rate-deck'
    whitelisted_destinations: Optional[List[str]] = Field(
        ['US', 'CA'],
        description='The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.',
        examples=[['US', 'BR', 'AU']],
    )


class PhoneNumberBlocksJob(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    etc: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the estimated time of completion of the background job.',
    )
    failed_operations: Optional[List[PhoneNumberBlocksJobFailedOperation]] = None
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['42587e44-3a3e-46de-9255-0c9a7a1d1ec7'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['phone_number_block_job'],
    )
    status: Optional[Status36] = Field(
        'pending',
        description='Indicates the completion status of the background operation.',
        examples=['pending'],
    )
    successful_operations: Optional[List[PhoneNumberBlocksJobSuccessfulOperation]] = (
        None
    )
    type: Optional[Type10] = Field(
        None,
        description='Identifies the type of the background job.',
        examples=['delete_phone_number_block'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class PhoneNumberRegulatoryRequirement(SubNumberOrderRegulatoryRequirement):
    field_value: Optional[str] = Field(
        None,
        description='The value of the requirement, this could be an id to a resource or a string value.',
        examples=['45f45a04-b4be-4592-95b1-9306b9db2b21'],
    )


class PhoneNumbersJob(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    etc: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the estimated time of completion of the background job.',
    )
    failed_operations: Optional[List[PhoneNumbersJobFailedOperation]] = None
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['42587e44-3a3e-46de-9255-0c9a7a1d1ec7'],
    )
    pending_operations: Optional[List[PhoneNumbersJobPendingOperation]] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['phone_numbers_job'],
    )
    status: Optional[Status39] = Field(
        'pending',
        description='Indicates the completion status of the background update.',
        examples=['pending'],
    )
    successful_operations: Optional[List[PhoneNumbersJobSuccessfulOperation]] = None
    type: Optional[Type12] = Field(
        None,
        description='Identifies the type of the background job.',
        examples=['update_emergency_settings'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )


class PortingEndUser(BaseModel):
    admin: Optional[PortingOrderEndUserAdmin] = None
    location: Optional[PortingOrderEndUserLocation] = None


class PortingOrderMisc(BaseModel):
    new_billing_phone_number: Optional[str] = Field(
        None,
        description='New billing phone number for the remaining numbers. Used in case the current billing phone number is being ported to Telnyx. This will be set on your account with your current service provider and should be one of the numbers remaining on that account.',
    )
    remaining_numbers_action: Optional[RemainingNumbersAction] = None
    type: Optional[PortingOrderType] = None


class PortingOrderStatus(BaseModel):
    details: Optional[List[PortingOrdersExceptionType]] = Field(
        None,
        description="A list of 0 or more details about this porting order's status",
    )
    value: Optional[Value] = Field(
        None, description='The current status of the porting order', examples=['ported']
    )


class PrivateWirelessGateway(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    ip_range: Optional[str] = Field(
        None,
        description='IP block used to assign IPs to the SIM cards in the Private Wireless Gateway.',
        examples=['100.64.1.0/24'],
    )
    name: Optional[str] = Field(
        None,
        description='The private wireless gateway name.',
        examples=['My private wireless gateway'],
    )
    network_id: Optional[UUID] = Field(
        None,
        description='The identification of the related network resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    record_type: Optional[str] = Field(None, examples=['private_wireless_gateway'])
    region_code: Optional[str] = Field(
        'ashburn-va',
        description='The geographical region where the Private Wireless Gateway is deployed to.',
        examples=['ashburn-va'],
    )
    status: Optional[PrivateWirelessGatewayStatus] = None
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class Room(BaseModel):
    active_session_id: Optional[UUID] = Field(
        None,
        description='The identifier of the active room session if any.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the room was created.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Identifies the room.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    max_participants: Optional[int] = Field(
        None, description='Maximum participants allowed in the room.', examples=[50]
    )
    record_type: Optional[str] = Field(None, examples=['room'])
    sessions: Optional[List[RoomSession]] = None
    unique_name: Optional[str] = Field(
        None,
        description='The unique (within the Telnyx account scope) name of the room.',
        examples=['My room'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 timestamp when the room was updated.',
        examples=['2021-03-26T17:51:59.588408Z'],
    )


class SIMCardNetworkPreferenceWithOTAUpdates(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    mobile_operator_networks_preferences: Optional[
        MobileOperatorNetworksPreferencesResponse
    ] = None
    ota_updates: Optional[List[CompleteOTAUpdate]] = None
    record_type: Optional[str] = Field(None, examples=['sim_card_network_preferences'])
    sim_card_id: Optional[UUID] = Field(
        None, examples=['6b14e151-8493-4fa1-8664-1cc4e6d14158']
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class SIMCardPublicIP(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    ip: Optional[str] = Field(
        None,
        description='The provisioned IP address. This attribute will only be available when underlying resource status is in a "provisioned" status.',
        examples=['192.168.0.0'],
    )
    record_type: Optional[str] = Field(None, examples=['sim_card_public_ip'])
    sim_card_id: Optional[UUID] = Field(
        None, examples=['6b14e151-8493-4fa1-8664-1cc4e6d14158']
    )
    status: Optional[SIMCardPublicIPStatus] = None
    type: Optional[Type14] = Field('ipv4', examples=['ipv4'])
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date-time indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )


class SubNumberOrder(BaseModel):
    country_code: Optional[str] = Field(None, examples=['US'])
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    order_request_id: Optional[UUID] = Field(
        None, examples=['12ade33a-21c0-473b-b055-b3c836e1c293']
    )
    phone_number_type: Optional[PhoneNumberType5] = Field(None, examples=['local'])
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[1],
    )
    record_type: Optional[str] = Field(None, examples=['sub_number_order'])
    regulatory_requirements: Optional[List[SubNumberOrderRegulatoryRequirement]] = None
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    user_id: Optional[UUID] = Field(
        None, examples=['d70873cd-7c98-401a-81b6-b1ae08246995']
    )


class TemplateParameter(BaseModel):
    currency: Optional[Currency] = None
    date_time: Optional[DateTimeObject] = None
    document: Optional[Document] = None
    image: Optional[Image] = None
    text: Optional[str] = None
    type: Type17 = Field(..., description='Describes the parameter type.')
    video: Optional[Video] = None


class TemplateParameters(RootModel[List[TemplateParameter]]):
    root: List[TemplateParameter] = Field(..., title='Template Component Parameters')


class TexmlApplication(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    created_at: Optional[CreatedAt] = None
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    first_command_timeout: Optional[FirstCommandTimeout] = False
    first_command_timeout_secs: Optional[FirstCommandTimeoutSecs] = Field(
        default_factory=lambda: FirstCommandTimeoutSecs.model_validate(30)
    )
    friendly_name: Optional[ApplicationName] = None
    id: Optional[IntId] = None
    inbound: Optional[Inbound4] = None
    outbound: Optional[Outbound4] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['texml_application'],
    )
    status_callback: Optional[str] = Field(
        None,
        description='URL for Telnyx to send requests to containing information about call progress events.',
        examples=['https://example.com'],
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        'post',
        description='HTTP request method Telnyx should use when requesting the status_callback URL.',
        examples=['get'],
    )
    updated_at: Optional[UpdatedAt] = None
    voice_fallback_url: Optional[str] = Field(
        None,
        description='URL to which Telnyx will deliver your XML Translator webhooks if we get an error response from your voice_url.',
        examples=['https://fallback.example.com'],
    )
    voice_method: Optional[VoiceMethod] = Field(
        'post',
        description="HTTP request method Telnyx will use to interact with your XML Translator webhooks. Either 'get' or 'post'.",
        examples=['get'],
    )
    voice_url: Optional[str] = Field(
        None,
        description='URL to which Telnyx will deliver your XML Translator webhooks.',
        examples=['https://example.com'],
    )


class UpdateAuthenticationProviderRequest(BaseModel):
    active: Optional[Active] = Field(
        default_factory=lambda: Active.model_validate(True)
    )
    name: Optional[NameModel] = None
    settings: Optional[SettingsModel] = None
    settings_url: Optional[SettingsUrl] = None
    short_name: Optional[ShortName] = None


class UpdateCredentialConnectionRequest(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = None
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        False,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[CredentialInbound] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
    )
    outbound: Optional[CredentialOutbound] = None
    password: Optional[str] = Field(
        None,
        description='The password to be used as part of the credentials. Must be 8 to 128 characters long.',
        examples=['my123secure456password789'],
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    sip_uri_calling_preference: Optional[SipUriCallingPreference] = Field(
        'disabled',
        description='This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).',
    )
    user_name: Optional[str] = Field(
        None,
        description='The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).',
        examples=['myusername123'],
    )
    webhook_api_version: Optional[WebhookApiVersion11] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class UpdateFaxApplicationRequest(BaseModel):
    active: Optional[ConnectionActive] = Field(
        default_factory=lambda: ConnectionActive.model_validate(True)
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    application_name: ApplicationName
    inbound: Optional[Inbound5] = None
    outbound: Optional[Outbound5] = None
    webhook_event_failover_url: Optional[WebhookEventFailoverUrl] = ''
    webhook_event_url: WebhookEventUrl
    webhook_timeout_secs: Optional[WebhookTimeoutSecs] = None


class UpdateIpConnectionRequest(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = None
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[InboundIp] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
    )
    outbound: Optional[OutboundIp] = None
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[TransportProtocol] = Field(
        'UDP',
        description='One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.',
    )
    webhook_api_version: Optional[WebhookApiVersion11] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class UpdateMessagingProfileRequest(BaseModel):
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
    )
    enabled: Optional[bool] = Field(
        None, description='Specifies whether the messaging profile is enabled or not.'
    )
    id: Optional[UUID] = Field(None, description='Identifies the type of resource.')
    name: Optional[str] = Field(
        None, description='A user friendly name for the messaging profile.'
    )
    number_pool_settings: Optional[NumberPoolSettings] = None
    record_type: Optional[RecordType68] = Field(
        None, description='Identifies the type of the resource.'
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
    )
    url_shortener_settings: Optional[UrlShortenerSettings] = None
    v1_secret: Optional[str] = Field(
        None, description='Secret used to authenticate with v1 endpoints.'
    )
    webhook_api_version: Optional[WebhookApiVersion15] = Field(
        None,
        description='Determines which webhook format will be used, Telnyx API v1, v2, or a legacy 2010-04-01 format.',
    )
    webhook_failover_url: Optional[str] = Field(
        None,
        description='The failover URL where webhooks related to this messaging profile will be sent if sending to the primary URL fails.',
    )
    webhook_url: Optional[str] = Field(
        None,
        description='The URL where webhooks related to this messaging profile will be sent.',
    )
    whitelisted_destinations: Optional[List[constr(pattern=r'^[A-Z]{2}$')]] = Field(
        None,
        description='Destinations to which the messaging profile is allowed to send. If set to `null`, all destinations will be allowed. Setting a value of `["*"]` has the equivalent effect. The elements in the list must be valid ISO 3166-1 alpha-2 country codes.',
    )


class UpdateNumberOrderPhoneNumberRequest(BaseModel):
    regulatory_requirements: Optional[List[UpdateRegulatoryRequirement]] = None


class UpdateOutboundVoiceProfileRequest(BaseModel):
    billing_group_id: Optional[UUID] = Field(
        None,
        description='The ID of the billing group associated with the outbound proflile. Defaults to null (for no group assigned).',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    call_recording: Optional[OutboundCallRecording] = None
    concurrent_call_limit: Optional[int] = Field(
        None,
        description='Must be no more than your global concurrent call limit. Null means no limit.',
        examples=[10],
    )
    daily_spend_limit: Optional[str] = Field(
        None,
        description='The maximum amount of usage charges, in USD, you want Telnyx to allow on this outbound voice profile in a day before disallowing new calls.',
        examples=['100.00'],
    )
    daily_spend_limit_enabled: Optional[bool] = Field(
        False,
        description='Specifies whether to enforce the daily_spend_limit on this outbound voice profile.',
        examples=[True],
    )
    enabled: Optional[bool] = Field(
        True,
        description='Specifies whether the outbound voice profile can be used. Disabled profiles will result in outbound calls being blocked for the associated Connections.',
        examples=[True],
    )
    max_destination_rate: Optional[float] = Field(
        None,
        description='Maximum rate (price per minute) for a Destination to be allowed when making outbound calls.',
    )
    name: constr(min_length=3) = Field(
        ...,
        description='A user-supplied name to help with organization.',
        examples=['office'],
    )
    service_plan: Optional[ServicePlan] = 'global'
    tags: Optional[List[str]] = Field(None, examples=[['office-profile']])
    traffic_type: Optional[TrafficType] = 'conversational'
    usage_payment_method: Optional[UsagePaymentMethod] = 'rate-deck'
    whitelisted_destinations: Optional[List[str]] = Field(
        ['US', 'CA'],
        description='The list of destinations you want to be able to call using this outbound voice profile formatted in alpha2.',
        examples=[['US', 'BR', 'AU']],
    )


class UpdatePortingOrder(BaseModel):
    activation_settings: Optional[ActivationSettings] = None
    customer_reference: Optional[str] = None
    end_user: Optional[PortingEndUser] = None
    misc: Optional[PortingOrderMisc] = None
    phone_number_configuration: Optional[PortingOrderPhoneNumberConfiguration] = None
    requirements: Optional[List[UpdatePortingOrderRequirement]] = Field(
        None, description='List of requirements for porting numbers.'
    )
    user_feedback: Optional[PortingOrderUserFeedback] = None
    webhook_url: Optional[AnyUrl] = None


class ValidateAddress1(BaseModel):
    administrative_area: Optional[AdministrativeArea] = None
    country_code: Optional[CountryCode] = None
    extended_address: Optional[ExtendedAddress] = None
    locality: Optional[Locality] = None
    postal_code: Optional[PostalCode] = None
    street_address: Optional[StreetAddress] = None


class ValidateAddressRequest(BaseModel):
    administrative_area: Optional[AdministrativeArea] = None
    country_code: CountryCode
    extended_address: Optional[ExtendedAddress] = None
    locality: Optional[Locality] = None
    postal_code: PostalCode
    street_address: StreetAddress


class ValidateAddressResult(BaseModel):
    errors: Optional[List[Error]] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['address_validation'],
    )
    result: Result2 = Field(
        ...,
        description='Indicates whether an address is valid or invalid.',
        examples=['valid'],
    )
    suggested: ValidateAddress1 = Field(
        ..., description='Provides normalized address when available.'
    )


class Verification(BaseModel):
    call_timeout_secs: Optional[int] = Field(
        None,
        description='This is the number of seconds before the call ends, if the verification makes a call. Note: this will override the `default_call_timeout_secs` on the Verify profile.',
        examples=[299],
    )
    created_at: Optional[str] = Field(None, examples=['2020-09-14T17:03:32.965812'])
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    phone_number: Optional[str] = Field(
        None, description='+E164 formatted phone number.', examples=['+13035551234']
    )
    record_type: Optional[VerificationRecordType] = None
    status: Optional[VerificationStatus] = None
    timeout_secs: Optional[int] = Field(
        None,
        description='This is the number of seconds before the code of the request is expired. Once this request has expired, the code will no longer verify the user. Note: this will override the `default_verification_timeout_secs` on the Verify profile.',
        examples=[300],
    )
    updated_at: Optional[str] = Field(None, examples=['2020-09-14T17:03:32.965812'])
    verification_type: Optional[VerificationType] = None
    verify_profile_id: Optional[UUID] = Field(
        None,
        description='The identifier of the associated Verify profile.',
        examples=['12ade33a-21c0-473b-b055-b3c836e1c292'],
    )


class VerifyProfileResponse(BaseModel):
    call: Optional[VerifyProfileCallResponse] = None
    created_at: Optional[str] = Field(None, examples=['2020-09-14T17:03:32.965812'])
    flashcall: Optional[VerifyProfileFlashcallResponse] = None
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    language: Optional[str] = Field(None, examples=['en-US'])
    name: Optional[str] = Field(None, examples=['Test Profile'])
    psd2: Optional[VerifyProfilePSD2Response] = None
    record_type: Optional[VerificationProfileRecordType] = None
    sms: Optional[VerifyProfileSMSResponse] = None
    updated_at: Optional[str] = Field(None, examples=['2020-09-14T17:03:32.965812'])
    webhook_failover_url: Optional[str] = Field(
        None, examples=['http://example.com/webhook/failover']
    )
    webhook_url: Optional[str] = Field(None, examples=['http://example.com/webhook'])
    whatsapp: Optional[VerifyProfileWhatsappResponse] = None


class VerifyProfileResponseDataWrapper(BaseModel):
    data: Optional[VerifyProfileResponse] = None


class Request(BaseModel):
    headers: Optional[HttpHeaders] = None
    url: Optional[str] = Field(None, examples=['https://example.com/webhooks'])


class Response(BaseModel):
    body: Optional[str] = Field(None, description='Raw response body, limited to 10kB.')
    headers: Optional[HttpHeaders] = None
    status: Optional[int] = Field(None, examples=[200])


class Http(BaseModel):
    request: Optional[Request] = Field(None, description='Request details.')
    response: Optional[Response] = Field(
        None, description='Response details, optional.'
    )


class ActionsNetworkPreferencesSimCardsPutResponse(BaseModel):
    data: Optional[List[SIMCardNetworkPreferenceWithOTAUpdates]] = Field(
        None, description='Multi requested SIM cards network preferences.'
    )
    errors: Optional[List[Error]] = None


class AddressesGetResponse(BaseModel):
    data: Optional[List[Address]] = None
    meta: Optional[PaginationMeta] = None


class AddressesPostResponse(BaseModel):
    data: Optional[Address] = None


class AddressesActionsValidatePostResponse(BaseModel):
    data: Optional[ValidateAddressResult] = None


class AddressesIdDeleteResponse(BaseModel):
    data: Optional[Address] = None


class AddressesIdGetResponse(BaseModel):
    data: Optional[Address] = None


class AuthenticationProvidersGetResponse(BaseModel):
    data: Optional[List[AuthenticationProvider]] = None
    meta: Optional[PaginationMeta] = None


class AuthenticationProvidersPostResponse(BaseModel):
    data: Optional[AuthenticationProvider] = None


class AuthenticationProvidersIdDeleteResponse(BaseModel):
    data: Optional[AuthenticationProvider] = None


class AuthenticationProvidersIdGetResponse(BaseModel):
    data: Optional[AuthenticationProvider] = None


class AuthenticationProvidersIdPatchResponse(BaseModel):
    data: Optional[AuthenticationProvider] = None


class AvailablePhoneNumberBlocksGetResponse(BaseModel):
    data: Optional[List[AvailablePhoneNumberBlock]] = None
    meta: Optional[AvailablePhoneNumbersMetadata] = None


class AvailablePhoneNumbersGetResponse(BaseModel):
    data: Optional[List[AvailablePhoneNumber]] = None
    meta: Optional[AvailablePhoneNumbersMetadata] = None


class CallControlApplicationsGetResponse(BaseModel):
    data: Optional[List[CallControlApplication]] = None
    meta: Optional[PaginationMeta] = None


class CallControlApplicationsPostResponse(BaseModel):
    data: Optional[CallControlApplication] = None


class CallControlApplicationsIdDeleteResponse(BaseModel):
    data: Optional[CallControlApplication] = None


class CallControlApplicationsIdGetResponse(BaseModel):
    data: Optional[CallControlApplication] = None


class CallControlApplicationsIdPatchResponse(BaseModel):
    data: Optional[CallControlApplication] = None


class ConnectionsGetResponse(BaseModel):
    data: Optional[List[Connection]] = None
    meta: Optional[PaginationMeta] = None


class ConnectionsIdGetResponse(BaseModel):
    data: Optional[Connection] = None


class DocumentLinksGetResponse(BaseModel):
    data: Optional[List[DocServiceDocumentLink]] = None
    meta: Optional[PaginationMeta] = None


class DocumentsGetResponse(BaseModel):
    data: Optional[List[DocServiceDocument]] = None
    meta: Optional[PaginationMeta] = None


class DocumentsPostResponse(BaseModel):
    data: Optional[DocServiceDocument] = None


class DocumentsIdDeleteResponse(BaseModel):
    data: Optional[DocServiceDocument] = None


class DocumentsIdGetResponse(BaseModel):
    data: Optional[DocServiceDocument] = None


class DocumentsIdPatchResponse(BaseModel):
    data: Optional[DocServiceDocument] = None


class FaxApplicationsGetResponse(BaseModel):
    data: Optional[List[FaxApplication]] = None
    meta: Optional[PaginationMeta] = None


class FaxApplicationsPostResponse(BaseModel):
    data: Optional[FaxApplication] = None


class FaxApplicationsIdDeleteResponse(BaseModel):
    data: Optional[FaxApplication] = None


class FaxApplicationsIdGetResponse(BaseModel):
    data: Optional[FaxApplication] = None


class FaxApplicationsIdPatchResponse(BaseModel):
    data: Optional[FaxApplication] = None


class FqdnConnectionsGetResponse(BaseModel):
    data: Optional[List[FqdnConnection]] = None
    meta: Optional[PaginationMeta] = None


class FqdnConnectionsPostResponse(BaseModel):
    data: Optional[FqdnConnection] = None


class FqdnConnectionsIdDeleteResponse(BaseModel):
    data: Optional[FqdnConnection] = None


class FqdnConnectionsIdGetResponse(BaseModel):
    data: Optional[FqdnConnection] = None


class FqdnConnectionsIdPatchResponse(BaseModel):
    data: Optional[FqdnConnection] = None


class ManagedAccountsGetResponse(BaseModel):
    data: Optional[List[ManagedAccount]] = None
    meta: Optional[PaginationMeta] = None


class ManagedAccountsPostResponse(BaseModel):
    data: Optional[ManagedAccount] = None


class ManagedAccountsIdGetResponse(BaseModel):
    data: Optional[ManagedAccount] = None


class ManagedAccountsIdActionsDisablePostResponse(BaseModel):
    data: Optional[ManagedAccount] = None


class ManagedAccountsIdActionsEnablePostResponse(BaseModel):
    data: Optional[ManagedAccount] = None


class MessagingProfilesGetResponse(BaseModel):
    data: Optional[List[MessagingProfile]] = None
    meta: Optional[PaginationMeta] = None


class MessagingProfilesPostResponse(BaseModel):
    data: Optional[MessagingProfile] = None


class MessagingProfilesIdDeleteResponse(BaseModel):
    data: Optional[MessagingProfile] = None


class MessagingProfilesIdGetResponse(BaseModel):
    data: Optional[MessagingProfile] = None


class MessagingProfilesIdPatchResponse(BaseModel):
    data: Optional[MessagingProfile] = None


class MessagingProfilesIdMetricsGetResponse(BaseModel):
    data: Optional[MessagingProfileDetailedMetrics] = None


class NumberLookupPhoneNumberGetResponse(BaseModel):
    data: Optional[NumberLookupRecord] = None


class NumberReservationsGetResponse(BaseModel):
    data: Optional[List[NumberReservation]] = None
    meta: Optional[PaginationMeta] = None


class NumberReservationsPostResponse(BaseModel):
    data: Optional[NumberReservation] = None


class NumberReservationsNumberReservationIdGetResponse(BaseModel):
    data: Optional[NumberReservation] = None


class NumberReservationsNumberReservationIdActionsExtendPostResponse(BaseModel):
    data: Optional[NumberReservation] = None


class OtaUpdatesIdGetResponse(BaseModel):
    data: Optional[CompleteOTAUpdate] = None


class OutboundVoiceProfilesGetResponse(BaseModel):
    data: Optional[List[OutboundVoiceProfile]] = None
    meta: Optional[PaginationMeta] = None


class OutboundVoiceProfilesPostResponse(BaseModel):
    data: Optional[OutboundVoiceProfile] = None


class OutboundVoiceProfilesIdDeleteResponse(BaseModel):
    data: Optional[OutboundVoiceProfile] = None


class OutboundVoiceProfilesIdGetResponse(BaseModel):
    data: Optional[OutboundVoiceProfile] = None


class OutboundVoiceProfilesIdPatchResponse(BaseModel):
    data: Optional[OutboundVoiceProfile] = None


class PhoneNumberBlocksJobsGetResponse(BaseModel):
    data: Optional[List[PhoneNumberBlocksJob]] = None
    meta: Optional[PaginationMeta] = None


class PhoneNumberBlocksJobsDeletePhoneNumberBlockPostResponse(BaseModel):
    data: Optional[PhoneNumberBlocksJob] = None


class PhoneNumberBlocksJobsIdGetResponse(BaseModel):
    data: Optional[PhoneNumberBlocksJob] = None


class PhoneNumbersJobsGetResponse(BaseModel):
    data: Optional[List[PhoneNumbersJob]] = None
    meta: Optional[PaginationMeta] = None


class PhoneNumbersJobsDeletePhoneNumbersPostResponse(BaseModel):
    data: Optional[PhoneNumbersJob] = None


class PhoneNumbersJobsUpdateEmergencySettingsPostResponse(BaseModel):
    data: Optional[PhoneNumbersJob] = None


class PhoneNumbersJobsUpdatePhoneNumbersPostResponse(BaseModel):
    data: Optional[PhoneNumbersJob] = None


class PhoneNumbersJobsIdGetResponse(BaseModel):
    data: Optional[PhoneNumbersJob] = None


class PrivateWirelessGatewaysGetResponse(BaseModel):
    data: Optional[List[PrivateWirelessGateway]] = None
    meta: Optional[PaginationMeta] = None


class PrivateWirelessGatewaysPostResponse(BaseModel):
    data: Optional[PrivateWirelessGateway] = None


class PrivateWirelessGatewaysIdDeleteResponse(BaseModel):
    data: Optional[PrivateWirelessGateway] = None


class PrivateWirelessGatewaysIdGetResponse(BaseModel):
    data: Optional[PrivateWirelessGateway] = None


class RequirementsGetResponse(BaseModel):
    data: Optional[DocReqsRequirementList] = None
    meta: Optional[PaginationMeta] = None


class RequirementsIdGetResponse(BaseModel):
    data: Optional[DocReqsRequirement] = None


class RoomsGetResponse(BaseModel):
    data: Optional[List[Room]] = None
    meta: Optional[PaginationMeta] = None


class RoomsPostResponse(BaseModel):
    data: Optional[Room] = None


class RoomsRoomIdGetResponse(BaseModel):
    data: Optional[Room] = None


class SimCardsSimCardIdNetworkPreferencesDeleteResponse(BaseModel):
    data: Optional[SIMCardNetworkPreferenceWithOTAUpdates] = None


class SimCardsSimCardIdNetworkPreferencesGetResponse(BaseModel):
    data: Optional[SIMCardNetworkPreferenceWithOTAUpdates] = None


class SimCardsSimCardIdNetworkPreferencesPutResponse(BaseModel):
    data: Optional[SIMCardNetworkPreferenceWithOTAUpdates] = None


class SimCardsSimCardIdPublicIpDeleteResponse(BaseModel):
    data: Optional[SIMCardPublicIP] = None


class SimCardsSimCardIdPublicIpGetResponse(BaseModel):
    data: Optional[SIMCardPublicIP] = None


class SimCardsSimCardIdPublicIpPostResponse(BaseModel):
    data: Optional[SIMCardPublicIP] = None


class SubNumberOrdersGetResponse(BaseModel):
    data: Optional[List[SubNumberOrder]] = None
    meta: Optional[PaginationMeta] = None


class SubNumberOrdersSubNumberOrderIdGetResponse(BaseModel):
    data: Optional[SubNumberOrder] = None


class SubNumberOrdersSubNumberOrderIdPatchResponse(BaseModel):
    data: Optional[SubNumberOrder] = None


class TexmlApplicationsGetResponse(BaseModel):
    data: Optional[List[TexmlApplication]] = None
    meta: Optional[PaginationMeta] = None


class TexmlApplicationsPostResponse(BaseModel):
    data: Optional[TexmlApplication] = None


class TexmlApplicationsIdDeleteResponse(BaseModel):
    data: Optional[TexmlApplication] = None


class TexmlApplicationsIdGetResponse(BaseModel):
    data: Optional[TexmlApplication] = None


class TexmlApplicationsIdPatchResponse(BaseModel):
    data: Optional[TexmlApplication] = None


class CreateCredentialConnectionRequest(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: str
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        False,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[CredentialInbound] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
    )
    outbound: Optional[CredentialOutbound] = None
    password: str = Field(
        ...,
        description='The password to be used as part of the credentials. Must be 8 to 128 characters long.',
        examples=['my123secure456password789'],
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    sip_uri_calling_preference: Optional[SipUriCallingPreference] = Field(
        'disabled',
        description='This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).',
    )
    user_name: str = Field(
        ...,
        description='The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).',
        examples=['myusername123'],
    )
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class CreateIpConnectionRequest(BaseModel):
    active: Optional[bool] = Field(
        None, description='Defaults to true', examples=[True]
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = Field(None, examples=['string'])
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
        examples=[True],
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
        examples=[True],
    )
    encrypted_media: Optional[EncryptedMedia] = None
    inbound: Optional[CreateInboundIpRequest] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
        examples=[False],
    )
    outbound: Optional[OutboundIp] = None
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[TransportProtocol] = Field(
        'UDP',
        description='One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.',
        examples=['UDP'],
    )
    webhook_api_version: Optional[WebhookApiVersion] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class CreateVerificationResponse(BaseModel):
    data: Verification


class CredentialConnection(BaseModel):
    active: Optional[bool] = Field(None, description='Defaults to true')
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = None
    created_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
    )
    encrypted_media: Optional[EncryptedMedia] = None
    id: Optional[str] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['1293384261075731499'],
    )
    inbound: Optional[CredentialInbound] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
    )
    outbound: Optional[CredentialOutbound] = None
    password: Optional[str] = Field(
        None,
        description='The password to be used as part of the credentials. Must be 8 to 128 characters long.',
        examples=['my123secure456password789'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['credential_connection'],
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    sip_uri_calling_preference: Optional[SipUriCallingPreference] = Field(
        None,
        description='This feature enables inbound SIP URI calls to your Credential Auth Connection. If enabled for all (unrestricted) then anyone who calls the SIP URI <your-username>@telnyx.com will be connected to your Connection. You can also choose to allow only calls that are originated on any Connections under your account (internal).',
        examples=['disabled'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO-8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    user_name: Optional[str] = Field(
        None,
        description='The user name to be used as part of the credentials. Must be 4-32 characters long and alphanumeric values only (no spaces or special characters).',
        examples=['myusername123'],
    )
    webhook_api_version: Optional[WebhookApiVersion7] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class Hsm(BaseModel):
    element_name: str = Field(
        ...,
        description='The element name that indicates which template to use within the namespace',
    )
    language: LanguageModel
    localizable_params: List[LocalizableParam] = Field(
        ...,
        description='This field is an array of values to apply to variables in the template',
    )
    namespace: str = Field(..., description='The namespace that will be used')


class IpConnection(BaseModel):
    active: Optional[bool] = Field(
        None, description='Defaults to true', examples=[True]
    )
    anchorsite_override: Optional[AnchorsiteOverride] = 'Latency'
    connection_name: Optional[str] = Field(None, examples=['string'])
    created_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    default_on_hold_comfort_noise_enabled: Optional[bool] = Field(
        True,
        description='When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.',
        examples=[True],
    )
    dtmf_type: Optional[DtmfType] = 'RFC 2833'
    encode_contact_header_enabled: Optional[bool] = Field(
        False,
        description='Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.',
        examples=[True],
    )
    encrypted_media: Optional[EncryptedMedia] = None
    id: Optional[str] = Field(
        None,
        description='Identifies the type of resource.',
        examples=['6a09cdc3-8948-47f0-aa62-74ac943d6c58'],
    )
    inbound: Optional[InboundIp] = None
    onnet_t38_passthrough_enabled: Optional[bool] = Field(
        False,
        description="Enable on-net T38 if you prefer the sender and receiver negotiating T38 directly if both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call depending on each leg's settings.",
        examples=[False],
    )
    outbound: Optional[OutboundIp] = None
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['ip_connection'],
    )
    rtcp_settings: Optional[ConnectionRtcpSettings] = None
    transport_protocol: Optional[TransportProtocol] = Field(
        'UDP',
        description='One of UDP, TLS, or TCP. Applies only to connections with IP authentication or FQDN authentication.',
        examples=['UDP'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was updated.',
        examples=['2018-02-02T22:25:27.521Z'],
    )
    webhook_api_version: Optional[WebhookApiVersion7] = Field(
        '1',
        description='Determines which webhook format will be used, Telnyx API v1 or v2.',
        examples=['1'],
    )
    webhook_event_failover_url: Optional[str] = Field(
        '',
        description="The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'.",
        examples=['https://failover.example.com'],
    )
    webhook_event_url: Optional[str] = Field(
        None,
        description="The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'.",
        examples=['https://example.com'],
    )
    webhook_timeout_secs: Optional[conint(ge=0, le=30)] = Field(
        None,
        description='Specifies how many seconds to wait before timing out a webhook.',
        examples=[25],
    )


class ListVerificationsResponse(BaseModel):
    data: List[Verification]
    meta: Meta


class ListVerifyProfilesResponse(BaseModel):
    data: List[VerifyProfileResponse]
    meta: Meta


class NumberOrderPhoneNumber(BaseModel):
    country_code: Optional[str] = Field(None, examples=['US'])
    id: Optional[UUID] = Field(None, examples=['dc8e4d67-33a0-4cbb-af74-7b58f05bd494'])
    order_request_id: Optional[UUID] = Field(
        None, examples=['dc8e4d67-33a0-4cbb-af74-7b58f05bd495']
    )
    phone_number: Optional[str] = Field(None, examples=['+19705555098'])
    phone_number_type: Optional[PhoneNumberType2] = Field(None, examples=['local'])
    record_type: Optional[str] = Field(None, examples=['number_order_phone_number'])
    regulatory_requirements: Optional[List[PhoneNumberRegulatoryRequirement]] = None
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for a phone number, false otherwise.',
        examples=[True],
    )
    status: Optional[Status29] = Field(
        None, description='The status of the phone number in the order.'
    )
    sub_number_order_id: Optional[UUID] = Field(
        None, examples=['dc8e4d67-33a0-4cbb-af74-7b58f05bd496']
    )


class PhoneNumberModel(BaseModel):
    id: Optional[UUID] = Field(None, examples=['dc8e4d67-33a0-4cbb-af74-7b58f05bd494'])
    phone_number: Optional[str] = Field(None, examples=['+19705555098'])
    record_type: Optional[str] = Field(None, examples=['number_order_phone_number'])
    regulatory_group_id: Optional[str] = Field(
        None, examples=['dc8e4d67-33a0-4cbb-af74-7b58f05bd494']
    )
    regulatory_requirements: Optional[List[PhoneNumberRegulatoryRequirement]] = None
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for a phone number, false otherwise.',
        examples=[True],
    )
    status: Optional[Status35] = Field(
        None, description='The status of the phone number in the order.'
    )


class PortingOrder(BaseModel):
    activation_settings: Optional[PortingOrderActivationSettings] = None
    created_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2021-03-19T10:07:15.527Z'],
    )
    end_user: Optional[PortingEndUser] = None
    id: Optional[UUID] = Field(
        None,
        description='Uniquely identifies this porting order',
        examples=['f1486bae-f067-460c-ad43-73a92848f902'],
    )
    misc: Optional[PortingOrderMisc] = None
    old_service_provider_ocn: Optional[str] = Field(
        None,
        description='Identifies the old service provider',
        examples=['Unreal Communications'],
    )
    phone_number_configuration: Optional[PortingOrderPhoneNumberConfiguration] = None
    porting_phone_numbers_count: Optional[int] = Field(
        None,
        description='Count of phone numbers associated with this porting order',
        examples=[1],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['porting_order'],
    )
    requirements: Optional[List[PortingOrderRequirement]] = Field(
        None, description='List of documentation requirements for porting numbers.'
    )
    status: Optional[PortingOrderStatus] = None
    support_key: Optional[str] = Field(
        None,
        description='A key to reference this porting order when contacting Telnyx customer support',
        examples=['123abc'],
    )
    updated_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 formatted date indicating when the resource was created.',
        examples=['2021-03-19T10:07:15.527Z'],
    )
    user_feedback: Optional[PortingOrderUserFeedback] = None
    user_reference: Optional[str] = Field(
        None,
        description='A customer-specified reference number for customer bookkeeping purposes',
        examples=['Acct 123abc'],
    )
    webhook_url: Optional[AnyUrl] = Field(
        None, examples=['https://example.com/porting_webhooks']
    )


class RetrieveVerificationResponse(BaseModel):
    data: Verification


class TemplateComponent(BaseModel):
    parameters: Optional[TemplateParameters] = None
    type: Type16 = Field(..., description='Describes the component type.')


class TemplateComponents(RootModel[List[TemplateComponent]]):
    root: List[TemplateComponent] = Field(..., title='Template Components')


class UpdateNumberOrderRequest(BaseModel):
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    phone_numbers: Optional[List[PhoneNumberModel]] = None
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[1],
    )
    record_type: Optional[str] = Field(None, examples=['number_order'])
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    status: Optional[Status50] = Field(None, description='The status of the order.')
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class Attempt(BaseModel):
    errors: Optional[List[ErrorModel]] = Field(
        None, description='Webhook delivery errors.'
    )
    finished_at: Optional[datetime_aliased] = Field(
        None, description='ISO 8601 timestamp indicating when the attempt has finished.'
    )
    http: Optional[Http] = None
    started_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 timestamp indicating when the attempt was initiated.',
    )
    status: Optional[Status53] = None


class WebhookDelivery(BaseModel):
    attempts: Optional[List[Attempt]] = Field(
        None,
        description='Detailed delivery attempts, ordered by most recent.',
        examples=[
            [
                {
                    'finished_at': '2020-08-10T14:00:05.595Z',
                    'http': {
                        'request': {
                            'headers': ['Accept: */*'],
                            'url': 'https://fallback.example.com/webhooks',
                        },
                        'response': {
                            'body': 'All good.',
                            'headers': ['Content-Type: text/html'],
                            'status': 200,
                        },
                    },
                    'started_at': '2020-08-10T14:00:05.364Z',
                    'status': 'delivered',
                },
                {
                    'errors': [
                        {
                            'code': '75499',
                            'detail': 'The server returned another HTTP 4XX error',
                            'title': 'Webhook host returned HTTP 4XX',
                        }
                    ],
                    'finished_at': '2020-08-10T14:00:05.360Z',
                    'http': {
                        'request': {
                            'headers': ['Accept: */*'],
                            'url': 'https://typo.example.com/webhooks',
                        },
                        'response': {
                            'body': 'Oops. Not found.',
                            'headers': ['Content-Type: text/html', 'Pragma: no-cache'],
                            'status': 404,
                        },
                    },
                    'started_at': '2020-08-10T14:00:05.004Z',
                    'status': 'failed',
                },
            ]
        ],
    )
    finished_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 timestamp indicating when the last webhook response has been received.',
        examples=['2020-08-10T14:00:05.595Z'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Uniquely identifies the webhook_delivery record.',
        examples=['f5586561-8ff0-4291-a0ac-84fe544797bd'],
    )
    record_type: Optional[str] = Field(
        None,
        description='Identifies the type of the resource.',
        examples=['webhook_delivery'],
    )
    started_at: Optional[datetime_aliased] = Field(
        None,
        description='ISO 8601 timestamp indicating when the first request attempt was initiated.',
        examples=['2020-08-10T14:00:00.000Z'],
    )
    status: Optional[Status53] = Field(
        None,
        description="Delivery status: 'delivered' when successfuly delivered or 'failed' if all attempts have failed.",
    )
    user_id: Optional[UUID] = Field(
        None,
        description='Uniquely identifies the user that owns the webhook_delivery record.',
        examples=['0ccc7b54-4df3-4bca-a65a-3da1ecc777f0'],
    )
    webhook: Optional[Webhook] = Field(
        None,
        description='Original webhook JSON data. Payload fields vary according to event type.',
        examples=[
            {
                'event_type': 'call_initiated',
                'id': 'C9C0797E-901D-4349-A33C-C2C8F31A92C2',
                'occurred_at': '2020-08-10T13:02:01.000Z',
                'payload': {'useful': 'information'},
                'record_type': 'event',
            }
        ],
    )


class CredentialConnectionsGetResponse(BaseModel):
    data: Optional[List[CredentialConnection]] = None
    meta: Optional[PaginationMeta] = None


class CredentialConnectionsPostResponse(BaseModel):
    data: Optional[CredentialConnection] = None


class CredentialConnectionsIdDeleteResponse(BaseModel):
    data: Optional[CredentialConnection] = None


class CredentialConnectionsIdGetResponse(BaseModel):
    data: Optional[CredentialConnection] = None


class CredentialConnectionsIdPatchResponse(BaseModel):
    data: Optional[CredentialConnection] = None


class IpConnectionsGetResponse(BaseModel):
    data: Optional[List[IpConnection]] = None
    meta: Optional[PaginationMeta] = None


class IpConnectionsPostResponse(BaseModel):
    data: Optional[IpConnection] = None


class IpConnectionsIdDeleteResponse(BaseModel):
    data: Optional[IpConnection] = None


class IpConnectionsIdGetResponse(BaseModel):
    data: Optional[IpConnection] = None


class IpConnectionsIdPatchResponse(BaseModel):
    data: Optional[IpConnection] = None


class NumberOrderPhoneNumbersGetResponse(BaseModel):
    data: Optional[List[NumberOrderPhoneNumber]] = None
    meta: Optional[PaginationMeta] = None


class NumberOrderPhoneNumbersNumberOrderPhoneNumberIdGetResponse(BaseModel):
    data: Optional[NumberOrderPhoneNumber] = None


class NumberOrderPhoneNumbersNumberOrderPhoneNumberIdPatchResponse(BaseModel):
    data: Optional[NumberOrderPhoneNumber] = None


class PortingOrdersGetResponse(BaseModel):
    data: Optional[List[PortingOrder]] = None
    meta: Optional[PaginationMeta] = None


class PortingOrdersPostResponse(BaseModel):
    data: Optional[List[PortingOrder]] = None


class PortingOrdersIdDeleteResponse(BaseModel):
    data: Optional[PortingOrder] = None
    meta: Optional[Meta2] = None


class PortingOrdersIdGetResponse(BaseModel):
    data: Optional[PortingOrder] = None
    meta: Optional[Meta2] = None


class PortingOrdersIdPatchResponse(BaseModel):
    data: Optional[PortingOrder] = None
    meta: Optional[Meta2] = None


class PortingOrdersIdActionsCancelPostResponse(BaseModel):
    data: Optional[PortingOrder] = None
    meta: Optional[Meta2] = None


class PortingOrdersIdActionsConfirmPostResponse(BaseModel):
    data: Optional[PortingOrder] = None
    meta: Optional[Meta2] = None


class PortingPhoneNumbersGetResponse(BaseModel):
    data: Optional[List[PhoneNumberModel]] = None
    meta: Optional[PaginationMeta] = None


class WebhookDeliveriesGetResponse(BaseModel):
    data: Optional[List[WebhookDelivery]] = None
    meta: Optional[PaginationMetaSimple] = None


class WebhookDeliveriesIdGetResponse(BaseModel):
    data: Optional[WebhookDelivery] = None


class CreateNumberOrderRequest(BaseModel):
    billing_group_id: Optional[str] = Field(
        None,
        description='Identifies the billing group associated with the phone number.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    connection_id: Optional[str] = Field(
        None,
        description='Identifies the connection associated with this phone number.',
        examples=['346789098765567'],
    )
    created_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string denoting when the number order was created.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )
    customer_reference: Optional[str] = Field(
        None,
        description='A customer reference string for customer look ups.',
        examples=['MY REF 001'],
    )
    id: Optional[UUID] = Field(None, examples=['12ade33a-21c0-473b-b055-b3c836e1c292'])
    messaging_profile_id: Optional[str] = Field(
        None,
        description='Identifies the messaging profile associated with the phone number.',
        examples=['abc85f64-5717-4562-b3fc-2c9600'],
    )
    phone_numbers: Optional[List[PhoneNumberModel]] = None
    phone_numbers_count: Optional[int] = Field(
        None,
        description='The count of phone numbers in the number order.',
        examples=[1],
    )
    record_type: Optional[str] = Field(None, examples=['number_order'])
    requirements_met: Optional[bool] = Field(
        None,
        description='True if all requirements are met for every phone number, false otherwise.',
        examples=[True],
    )
    status: Optional[Status7] = Field(
        None, description='The status of the order.', examples=['success']
    )
    updated_at: Optional[str] = Field(
        None,
        description='An ISO 8901 datetime string for when the number order was updated.',
        examples=['2018-01-01T00:00:00.000000Z'],
    )


class NumberOrderWithPhoneNumbers(NumberOrder):
    phone_numbers: Optional[List[PhoneNumberModel]] = None


class Template(BaseModel):
    components: Optional[TemplateComponents] = None
    language: LanguageModel
    name: str = Field(..., description='Name of the template.')
    namespace: str = Field(
        ...,
        description='Namespace of the template. This must be the namespace associated with the WhatsApp business account that owns the phone number associated with the current WhatsApp Business API client or the message fails to send.',
    )


class NumberOrdersPostResponse(BaseModel):
    data: Optional[NumberOrderWithPhoneNumbers] = None


class NumberOrdersNumberOrderIdGetResponse(BaseModel):
    data: Optional[NumberOrderWithPhoneNumbers] = None


class NumberOrdersNumberOrderIdPatchResponse(BaseModel):
    data: Optional[NumberOrderWithPhoneNumbers] = None


class CreateWhatsAppMessageRequest(BaseModel):
    audio: Optional[Audio] = None
    contacts: Optional[List[Contact]] = Field(None, description='')
    document: Optional[Document] = None
    hsm: Optional[Hsm] = None
    image: Optional[Image] = None
    location: Optional[Location] = None
    preview_url: Optional[bool] = Field(
        None,
        description='Specifying preview_url in the request is optional when not including a URL in your message.\nTo include a URL preview, set preview_url to true in the message body and make sure the URL begins with http:// or https://.',
    )
    template: Optional[Template] = None
    text: Optional[Text] = None
    to: str = Field(
        ...,
        description='The WhatsApp ID (phone number) returned from contacts endpoint.',
    )
    type: Optional[MessageType] = 'text'
    video: Optional[Video] = None
    whatsapp_user_id: str = Field(..., description="The sender's WhatsApp ID.")
